{"version":3,"sources":["../node_modules/.pnpm/@noble+hashes@1.1.3/node_modules/@noble/hashes/utils.js","../node_modules/.pnpm/@noble+hashes@1.1.3/node_modules/@noble/hashes/_assert.js","../node_modules/.pnpm/bs58@4.0.1/node_modules/bs58/index.js","../../src/rpc/JrpcClient.ts","../../src/rpc/solanaRpcMiddlewares.ts","../../src/providers/injectedProviders/base/baseInjectedProvider.ts","../../src/providers/injectedProviders/base/providerHandlers.ts","../../src/providers/injectedProviders/injectedProviderProxy.ts","../../src/providers/injectedProviders/phantom/phantomInjectedProvider.ts","../../src/providers/injectedProviders/slope/slopeInjectedProvider.ts","../../src/providers/injectedProviders/slope/providerHandlers.ts","../../src/providers/injectedProviders/solflare/solflareInjectedProvider.ts","../../src/providers/injectedProviders/solflare/providerHandlers.ts","../../src/providers/injectedProviders/sollet/solletInjectedProvider.ts","../../src/providers/injectedProviders/sollet/providerHandlers.ts","../../src/providers/injectedProviders/torus/providerHandlers.ts","../../src/providers/injectedProviders/torus/torusInjectedProvider.ts","../../src/providers/privateKeyProvider/solanaPrivateKeyUtils.ts","../../src/providers/privateKeyProvider/solanaPrivateKeyProvider.ts","../../src/solanaWallet.ts","../node_modules/.pnpm/@noble+hashes@1.1.3/node_modules/@noble/hashes/_sha2.js","../node_modules/.pnpm/@noble+hashes@1.1.3/node_modules/@noble/hashes/_u64.js","../../src/Layout.ts","../node_modules/.pnpm/@babel+runtime@7.20.1/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/.pnpm/@noble+ed25519@1.7.1/node_modules/@noble/ed25519/lib/esm/index.js","../../src/utils.ts","../../src/error.ts","../../src/struct.ts","../../src/structs/utilities.ts","../../src/structs/types.ts","../../src/structs/coercions.ts","../node_modules/.pnpm/@noble+secp256k1@1.7.0/node_modules/@noble/secp256k1/lib/esm/index.js","../../src/utils/ed25519.ts","../../src/utils/to-buffer.ts","../../src/utils/borsh-schema.ts","../../src/publickey.ts","../../src/bpf-loader-deprecated.ts","../../src/account.ts","../../src/transaction/constants.ts","../../src/transaction/expiry-custom-errors.ts","../../src/message/account-keys.ts","../../src/layout.ts","../../src/utils/shortvec-encoding.ts","../../src/utils/assert.ts","../../src/transaction/legacy.ts","../../src/message/compiled-keys.ts","../../src/message/legacy.ts","../../src/message/v0.ts","../../src/sysvar.ts","../../src/utils/send-and-confirm-transaction.ts","../../src/utils/sleep.ts","../../src/instruction.ts","../../src/fee-calculator.ts","../../src/utils/bigint.ts","../../src/nonce-account.ts","../../src/programs/system.ts","../../src/loader.ts","../../src/bpf-loader.ts","../../node_modules/fast-stable-stringify/index.js","../../src/epoch-schedule.ts","../../src/errors.ts","../../src/__forks__/browser/fetch-impl.ts","../../src/programs/address-lookup-table/state.ts","../../src/account-data.ts","../../src/utils/makeWebsocketUrl.ts","../../src/connection.ts","../../src/keypair.ts","../../src/programs/address-lookup-table/index.ts","../../src/programs/compute-budget.ts","../../src/programs/ed25519.ts","../../src/utils/secp256k1.ts","../../src/programs/secp256k1.ts","../../src/programs/stake.ts","../../src/programs/vote.ts","../../src/validator-info.ts","../../src/vote-account.ts","../node_modules/.pnpm/@noble+hashes@1.1.3/node_modules/@noble/hashes/sha512.js","../node_modules/.pnpm/@noble+hashes@1.1.3/node_modules/@noble/hashes/cryptoBrowser.js","../node_modules/.pnpm/base-x@3.0.9/node_modules/base-x/src/index.js","../node_modules/.pnpm/@noble+hashes@1.1.3/node_modules/@noble/hashes/sha256.js","../node_modules/.pnpm/borsh@0.7.0/node_modules/borsh/lib/index.js","../node_modules/.pnpm/text-encoding-utf-8@1.0.2/node_modules/text-encoding-utf-8/lib/encoding.lib.mjs","../node_modules/.pnpm/bigint-buffer@1.1.5/node_modules/bigint-buffer/dist/browser.js","../node_modules/.pnpm/rpc-websockets@7.5.0/node_modules/rpc-websockets/dist/index.browser.js","../node_modules/.pnpm/rpc-websockets@7.5.0/node_modules/rpc-websockets/dist/lib/client/websocket.browser.js","../node_modules/.pnpm/rpc-websockets@7.5.0/node_modules/rpc-websockets/dist/lib/client.js","../node_modules/.pnpm/jayson@3.7.0/node_modules/jayson/lib/client/browser/index.js","../node_modules/.pnpm/jayson@3.7.0/node_modules/jayson/lib/generateRequest.js","../node_modules/.pnpm/@noble+hashes@1.1.3/node_modules/@noble/hashes/sha3.js","../node_modules/.pnpm/@noble+hashes@1.1.3/node_modules/@noble/hashes/hmac.js"],"names":["Object","defineProperty","exports","value","randomBytes","wrapConstructorWithOpts","wrapConstructor","checkOpts","Hash","concatBytes","toBytes","utf8ToBytes","asyncLoop","nextTick","hexToBytes","bytesToHex","isLE","rotr","createView","u32","u8","crypto_1","require","arr","Uint8Array","buffer","byteOffset","byteLength","Uint32Array","Math","floor","DataView","word","shift","Error","hexes","Array","from","length","v","i","toString","padStart","uint8a","hex","TypeError","array","j","hexByte","slice","byte","Number","parseInt","isNaN","iters","tick","cb","ts","Date","now","diff","str","TextEncoder","encode","data","arrays","every","a","reduce","result","pad","set","this","_cloneInto","defaults","opts","undefined","obj","prototype","call","constructor","assign","hashConstructor","hashC","message","update","digest","tmp","outputLen","blockLen","create","hashCons","msg","bytesLength","crypto","web","getRandomValues","node","number","n","isSafeInteger","bool","b","bytes","lengths","includes","hash","exists","instance","checkFinished","destroyed","finished","output","out","min","assert","default","basex","module","createChainIdMiddleware","chainId","req","res","next","end","method","createProviderConfigMiddleware","providerConfig","createConfigMiddleware","mergeMiddleware","createJsonRpcClient","rpcTarget","fetchMiddleware","createFetchMiddleware","networkMiddleware","getAccounts","createAsyncMiddleware","request","response","accounts","requestAccounts","targetMethod","handler","createSolanaMiddleware","providerHandlers","signTransaction","signAndSendTransaction","signAllTransactions","signMessage","getPrivateKey","getSecretKey","createRequestAccountsMiddleware","createGetAccountsMiddleware","createGenericJRPCMiddleware","BaseInjectedProvider","config","state","chainConfig","chainNamespace","CHAIN_NAMESPACES","SOLANA","_","Promise","resolve","injectedProvider","engine","JRPCEngine","getProviderHandlers","solanaMiddleware","push","configMiddleware","injectedProviderProxy","getInjectedProviderProxy","provider","providerFromEngine","updateProviderEngineProxy","lookupNetwork","BaseProvider","getBaseProviderHandlers","publicKey","bs58","ethErrors","rpc","methodNotSupported","params","transaction","display","sigData","signature","invalidParams","txRes","createInjectedProviderProxyMiddleware","_next","PhantomInjectedProvider","SlopeInjectedProxyProvider","getProviderEngineProxy","connect","txMessage","invalidRequest","serializeMessage","PublicKey","decode","addSignature","custom","code","conn","Connection","sendRawTransaction","serialize","allTxns","unsignedTx","signatures","getSlopeHandlers","bind","SolflareInjectedProvider","solflareProviderHandlers","getSolflareHandlers","SolletInjectedProvider","sign","getSolletHandlers","getTorusHandlers","sendTransaction","transactions","TorusInjectedProvider","handleInjectedProviderUpdate","setupEngine","connectedChainId","connectedHexChainId","isHexStrict","WalletInitializationError","rpcConnectionError","emit","on","configure","_objectSpread","setupProvider","privKey","keyPairGenerator","Keypair","fromSecretKey","Buffer","keyPair","toBase58","secretKey","partialSign","signedMsg","nacl","detached","_providerEngineProxy","sig","txns","tx","SolanaPrivateKeyProvider","privateKey","getChainSwitchMiddleware","getAccountMiddleware","getChainConfig","health","chainSwitchHandlers","addNewChainConfig","chainName","rpcUrls","blockExplorerUrls","nativeCurrency","addChain","ticker","symbol","tickerName","name","displayName","blockExplorer","switchSolanaChain","switchChain","createChainSwitchMiddleware","accountHandlers","updatePrivatekey","updateAccount","createAccountMiddleware","providerFactory","SolanaWallet","signedTransaction","signedTransactions","args","SHA2","_assert_js_1","utils_js_1","padOffset","pos","view","len","take","subarray","process","dataView","roundClean","fill","setBigUint64","_32n","BigInt","_u32_max","wh","wl","h","l","setUint32","oview","get","forEach","digestInto","destroy","to","add","toBig","split","fromBig","U32_MASK64","le","lst","Ah","Al","Bh","Bl","u64","shrSH","s","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","rotr32L","rotlSH","rotlSL","rotlBH","rotlBL","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5H","Eh","add5L","El","Layout","discr","span","offset","_objectWithoutProperties","source","excluded","key","target","objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","indexOf","propertyIsEnumerable","_0n","_1n","_2n","CU_O","CURVE","freeze","d","P","Gx","Gy","POW_2_256","SQRT_M1","SQRT_AD_MINUS_ONE","INVSQRT_A_MINUS_D","ONE_MINUS_D_SQ","D_MINUS_ONE_SQ","ExtendedPoint","x","y","z","t","other","assertExtPoint","X1","Y1","Z1","X2","Y2","Z2","X1Z2","mod","X2Z1","Y1Z2","Y2Z1","A","B","C","D","x1y1","E","G","F","H","X3","Y3","T3","T1","T2","double","negate","W","windows","points","p","base","window","affinePoint","equals","BASE","Point","_WINDOW_SIZE","precomputes","pointPrecomputes","precomputeWindow","normalizeZ","ZERO","f","windowSize","mask","maxNumber","shiftBy","wbits","pr","cached","abs","scalar","wNAF","normalizeScalar","P0","multiplyUnsafe","invZ","invert","ax","ay","zz","legacyRist","toInv","nums","inverted","acc","num","reduceRight","invertBatch","map","toAffine","toAffineBatch","fromAffine","assertRstPoint","RistrettoPoint","ep","u1","u2","u2sq","invsqrt","invertSqrt","D1","D2","zInv","edIsNegative","_x","_y","numberTo32BytesLE","toRawBytes","toHex","one","two","subtract","multiply","r0","r","Ns","c","uvRatio","Ns_D_is_sq","isValid","s_","Nt","s2","W0","W1","W2","W3","r1","bytes255ToNumberLE","ensureBytes","R1","calcElligatorRistrettoMap","r2","R2","emsg","b1","b2","equalBytes","u1_2","u2_2","I","Dx","Dy","WeakMap","delete","isTorsionFree","strict","normed","bytesToNumberLE","y2","u","isXOdd","isLastByteOdd","getExtendedPublicKey","point","Signature","assertValidity","fromHex","numberTo32BytesBE","reverse","_sha512Sync","MAX_255B","modulo","q","m","gcd","pow2","power","pow_2_252_3","_5n","_10n","_20n","_40n","_80n","b4","b5","b10","b20","b40","b80","b160","b240","b250","pow_p_5_8","v3","v7","vx2","root1","root2","useRoot1","useRoot2","noRoot","modlLE","expectedLength","max","adjustBytes25519","checkPrivateKey","getKeyFromHash","hashed","head","prefix","pointBytes","sha512s","utils","sha512","getExtendedPublicKeySync","prepareVerification","SB","pub","finishVerification","k","kA","sync","getPublicKey","R","verify","_setWindowSize","nodeCrypto","self","TORSION_SUBGROUP","hashToPrivateScalar","randomPrivateKey","subtle","createHash","precompute","sha512Sync","defineProperties","configurable","val","toFailures","StructError","failure","failures","rest","path","join","isObject","print","JSON","stringify","shiftIterator","input","done","toFailure","context","struct","branch","type","refinement","Symbol","iterator","run","options","coerce","ctx","coercer","schema","isArray","valid","validator","entries","Map","Set","refiner","Struct","props","is","validate","tuples","tuple","error","define","Element","boolean","Class","literal","constant","description","never","nullable","optional","record","Key","Value","string","Elements","Never","keys","union","Structs","unknown","condition","_3n","_8n","beta","weistrass","x2","x3","USE_ENDOMORPHISM","ShaError","JacobianPoint","Z1Z1","Z2Z2","U1","U2","S1","S2","x1b","HH","HHH","V","splitScalarEndo","k1neg","k1","k2neg","k2","k1p","k2p","fake","f1p","f2p","iz1","iz2","iz3","scratch","isCompressed","numTo32bStr","hasEvenY","isValidFieldElement","left","Q","aP","bQ","sum","isShort","bytesToNumber","_6n","_11n","_22n","_23n","_44n","_88n","b3","b6","b9","b11","b22","b44","b88","b176","b220","b223","t1","t2","sqrtMod","isYOdd","header","fromCompressedHex","fromUncompressedHex","normalizePrivateKey","msgHash","recovery","truncateHash","normalizeSignature","rinv","multiplyAndAddUnsafe","sliceDER","parseDERInt","isWithinCurveOrder","HALF","hasHighS","toDERHex","sHex","numberToHexUnpadded","rHex","rLen","sLen","toDERRawBytes","toCompactHex","hexToNumber","rBytesLeft","parseDERSignature","fromDER","numTo32b","_sha256Sync","_hmacSha256Sync","divNearest","ENDO","a1","a2","POW_2_128","c1","c2","delta","HmacDrbg","counter","values","hmacSha256","seed","hmac","checkSync","hmacSync","incr","kmdToSig","kBytes","fromCompact","bits2int","bits2octets","z1","z2","int2octets","initSigArgs","extraEntropy","h1","seedArgs","e","finalizeSig","recSig","canonical","der","recovered","normalizeS","toCompactRawBytes","TAGGED_HASH_PREFIXES","isValidPrivateKey","_bigintTo32Bytes","_normalizePrivateKey","hashToPrivateKey","sha256","messages","importKey","ckey","createHmac","sha256Sync","hmacSha256Sync","taggedHash","tag","tagP","charCodeAt","tagH","taggedHashSync","ed25519","generateKeypair","privateScalar","isOnCurve","toBuffer","isBuffer","properties","SOLANA_SCHEMA","deserialize","decodeUnchecked","deserializeUnchecked","PUBLIC_KEY_LENGTH","uniquePublicKeyCounter","_bn","isPublicKeyData","decoded","BN","eq","toJSON","toArrayLike","zeroPad","alloc","copy","unique","createWithSeed","fromPublicKey","programId","concat","publicKeyBytes","createProgramAddressSync","seeds","createProgramAddress","findProgramAddressSync","address","nonce","seedsWithNonce","err","findProgramAddress","pubkeyData","kind","fields","PACKET_DATA_SIZE","TransactionExpiredBlockheightExceededError","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","writable","readonly","index","keySegment","flat","compileInstructions","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","instruction","programIdIndex","accountKeyIndexes","meta","pubkey","property","BufferLayout","rustString","rsl","_decode","_encode","rslShim","chars","getAlloc","getItemAlloc","item","field","elementLayout","layout","decodeLength","size","elem","encodeLength","rem_len","TransactionStatus","CompiledKeys","payer","keyMetaMap","getMessageComponents","mapEntries","writableSigners","filter","isSigner","isWritable","readonlySigners","writableNonSigners","readonlyNonSigners","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","extractTableLookup","lookupTable","drainKeysFoundInLookupTable","addresses","keyMeta","isInvoked","writableIndexes","drainedWritableKeys","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","lookupTableIndex","findIndex","entry","compile","getOrInsertDefault","payerKeyMeta","ix","accountMeta","Message","accountKeys","recentBlockhash","indexToProgramIds","account","version","compiledInstructions","addressTableLookups","getAccountKeys","isAccountSigner","isAccountWritable","numSignedAccounts","isProgramId","has","programIds","nonProgramIds","numKeys","keyCount","shortvec","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","signDataLayout","signData","payerKey","byteArray","accountCount","dataSlice","MessageV0","numAccountKeysFromLookups","count","lookup","addressLookupTableAccounts","resolveAddressTableLookups","numStaticAccountKeys","tableLookup","tableAccount","find","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","serializedMessageLength","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","encodedAccountKeyIndexesLength","encodedDataLength","encodedWritableIndexesLength","encodedReadonlyIndexesLength","compiledKeys","lookupTableAccounts","extractResult","addressTableLookup","maskedPrefix","splice","accountKeyIndexesLength","addressTableLookupsCount","writableIndexesLength","readonlyIndexesLength","DEFAULT_SIGNATURE","TransactionInstruction","Transaction","feePayer","lastValidBlockHeight","nonceInfo","_message","_json","hasOwnProperty","blockhash","nonceInstruction","signers","items","compileMessage","console","warn","accountMetas","uniqueMetas","pubkeyString","uniqueIndex","sort","localeCompare","feePayerIndex","payerMeta","unshift","signedKeys","unsignedKeys","invariant","_compile","pair","getEstimatedFee","connection","getFeeForMessage","setSigners","seen","uniqueSigners","signer","_partialSign","_addSignature","sigpair","verifySignatures","_verifySignatures","requireAllSignatures","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","minContextSlot","confirmTransaction","status","sleep","ms","setTimeout","encodeData","allocLength","layoutFields","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","fromAccountData","nonceAccount","blob","encodeDecode","bigIntLayout","src","toBigIntLE","bigInt","toBufferLE","SYSTEM_INSTRUCTION_LAYOUTS","Create","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","UpgradeNonceAccount","SystemProgram","createAccount","lamports","space","fromPubkey","newAccountPubkey","transfer","basePubkey","toPubkey","accountPubkey","createAccountWithSeed","createNonceAccount","noncePubkey","initParams","nonceInitialize","authorized","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","newAuthorizedPubkey","allocate","Loader","getMinNumSignatures","ceil","chunkSize","load","program","getMinimumBalanceForRentExemption","balanceNeeded","getAccountInfo","programInfo","executable","owner","dataLayout","bytesLengthPadding","_rpcEndpoint","all","objToString","objKeys","isArrayProp","propVal","toStr","isFinite","returnVal","trailingZeros","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","slot","getEpochAndSlotIndex","epoch","getSlotsInEpoch","normalSlotIndex","normalEpochIndex","getFirstSlotInEpoch","pow","getLastSlotInEpoch","SendTransactionError","logs","SolanaJSONRPCError","customMessage","globalThis","fetch","AddressLookupTableAccount","isActive","U64_MAX","deactivationSlot","accountData","typeIndex","decodeData","LookupTableMetaLayout","serializedAddressesLen","numSerializedAddresses","lastExtendedSlot","lastExtendedSlotStartIndex","lastExtendedStartIndex","authority","URL_RE","PublicKeyFromString","RawAccountDataResult","BufferFromRawAccountData","extractCommitmentFromConfig","commitmentOrConfig","specifiedConfig","createRpcResult","pick","jsonrpc","id","UnknownRpcResult","jsonRpcResult","jsonRpcResultAndContext","notificationResultAndContext","versionedMessageFromResponse","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","effectiveSlot","amount","postBalance","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","GetLeaderScheduleResult","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","AddressTableLookupStruct","ConfirmedTransactionResult","ParsedInstructionResult","RawInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","rewardType","GetParsedBlockRpcResult","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","GetRecentPerformanceSamplesRpcResult","numTransactions","numSlots","samplePeriodSecs","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","COMMON_HTTP_HEADERS","endpoint","wsEndpoint","httpHeaders","disableRetryOnRateLimit","client","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","confirmTransactionInitialTimeout","putativeUrl","test","assertEndpointUrl","matches","match","hostish","portWithColon","protocol","startsWith","startPort","websocketPort","makeWebsocketUrl","url","customFetch","fetchWithMiddleware","fetchImpl","info","init","reject","modifiedInfo","modifiedInit","modifiedFetchArgs","clientBrowser","RpcClient","callback","body","agent","headers","too_many_requests_retries","waitTime","log","statusText","text","ok","createRpcClient","requests","batch","methodName","createRpcBatchRequest","RpcWebSocketClient","autoconnect","max_reconnects","Infinity","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","rpcEndpoint","getBalanceAndContext","_buildArgs","unsafeRes","getBalance","then","catch","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","configArg","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","ownerAddress","_args","getParsedTokenAccountsByOwner","getLargestAccounts","arg","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","getMultipleParsedAccounts","publicKeys","rawConfig","getMultipleAccountsInfoAndContext","getMultipleAccountsInfo","getStakeActivation","getProgramAccounts","configOrCommitment","encoding","configWithoutEncoding","getParsedProgramAccounts","strategy","rawSignature","decodedSignature","subscriptionCommitment","confirmationPromise","subscriptionId","onSignature","__type","PROCESSED","expiryPromise","timeoutMs","timeoutId","TIMED_OUT","checkBlockHeight","getBlockHeight","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","race","outcome","clearTimeout","removeSignatureListener","getClusterNodes","getVoteAccounts","getSlot","getSlotLeader","getSlotLeaders","startSlot","limit","getSignatureStatus","getSignatureStatuses","getTransactionCount","getTotalSupply","excludeNonCirculatingAccountsList","getInflationGovernor","getInflationReward","getEpochInfo","getEpochSchedule","epochSchedule","getLeaderSchedule","getRecentBlockhashAndContext","getRecentPerformanceSamples","getFeeCalculatorForBlockhash","wireMessage","getRecentBlockhash","getLatestBlockhash","getLatestBlockhashAndContext","getVersion","getGenesisHash","getBlock","_buildArgsAtLeastConfirmed","getParsedBlock","getBlockProduction","extra","getTransaction","getParsedTransaction","getParsedTransactions","getTransactions","getConfirmedBlock","block","getBlocks","endSlot","getBlockSignatures","transactionDetails","getConfirmedBlockSignatures","getConfirmedTransaction","getParsedConfirmedTransaction","getParsedConfirmedTransactions","getConfirmedSignaturesForAddress","firstAvailableBlock","until","highestConfirmedRoot","before","getConfirmedSignaturesForAddress2","confirmedSignatureInfo","getSignaturesForAddress","getAddressLookupTable","accountInfo","getNonceAndContext","getNonce","requestAirdrop","_blockhashWithExpiryBlockHeight","disableCache","timeSinceFetch","expired","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","MS_PER_SLOT","getStakeMinimumDelegation","simulateTransaction","transactionOrMessage","configOrSigners","includeAccounts","encodedTransaction","originalTx","sigVerify","logTrace","traceIndent","signersOrOptions","rawTransaction","sendEncodedTransaction","setInterval","notify","_updateSubscriptions","MAX_SAFE_INTEGER","clearInterval","close","activeWebSocketGeneration","isCurrentConnectionStillActive","callbacks","serverSubscriptionId","unsubscribeMethod","_handleServerNotification","callbackArgs","notification","_makeSubscription","subscriptionConfig","clientSubscriptionId","fastStableStringify","existingSubscription","onAccountChange","removeAccountChangeListener","_unsubscribeClientSubscription","accountId","onProgramAccountChange","filters","removeProgramAccountChangeListener","onLogs","mentions","removeOnLogsListener","onSlotChange","removeSlotChangeListener","onSlotUpdate","removeSlotUpdateListener","subscriptionName","dispose","override","_err","onSignatureWithOptions","onRootChange","removeRootChangeListener","keypair","_keypair","generate","skipValidation","computedPublicKey","ii","fromSeed","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","bigintLayout","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableProgram","createLookupTable","recentSlot","lookupTableAddress","bumpSeed","freezeLookupTable","extendLookupTable","addr","deactivateLookupTable","closeLookupTable","recipient","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","RequestUnits","RequestHeapFrame","SetComputeUnitLimit","SetComputeUnitPrice","ComputeBudgetProgram","requestUnits","requestHeapFrame","setComputeUnitLimit","setComputeUnitPrice","microLamports","ED25519_INSTRUCTION_LAYOUT","createInstructionWithPublicKey","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","Ed25519Program","createInstructionWithPrivateKey","secp256k1","msgs","ecdsaSign","drbg","reseedSync","generateSync","publicKeyCreate","fromPrivateKey","SECP256K1_INSTRUCTION_LAYOUT","publicKeyToEthAddress","keccak_256","recoveryId","Secp256k1Program","createInstructionWithEthAddress","ethAddress","rawAddress","substr","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","STAKE_CONFIG_ID","Lockup","unixTimestamp","custodian","STAKE_INSTRUCTION_LAYOUTS","Initialize","Authorize","Delegate","Split","Withdraw","Deactivate","Merge","AuthorizeWithSeed","StakeProgram","Staker","Withdrawer","initialize","stakePubkey","lockup","staker","withdrawer","delegate","authorize","stakeAuthorizationType","custodianPubkey","newAuthorized","authorizeWithSeed","authorityBase","authoritySeed","authorityOwner","splitInstruction","splitStakePubkey","splitWithSeed","merge","sourceStakePubKey","withdraw","deactivate","VOTE_INSTRUCTION_LAYOUTS","InitializeAccount","VoteProgram","Voter","initializeAccount","voteInit","authorizedVoter","authorizedWithdrawer","voteAuthorizationType","currentAuthorityDerivedKeyBasePubkey","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","voteAuthorizeWithSeedArgs","authorizedWithdrawerPubkey","safeWithdraw","currentVoteAccountBalance","rentExemptMinimum","website","details","keybaseUsername","sha384","sha512_256","SHA512","_sha2_js_1","_u64_js_1","SHA512_Kh","SHA512_Kl","SHA512_W_H","SHA512_W_L","Fh","Fl","Gh","Gl","Hh","Hl","getUint32","W15h","W15l","s0h","s0l","W2h","W2l","s1h","s1l","SUMl","SUMh","sigma1h","sigma1l","CHIh","CHIl","T1ll","T1h","T1l","sigma0h","sigma0l","MAJh","MAJl","All","SHA512_256","SHA384","_Buffer","ALPHABET","BASE_MAP","charAt","xc","LEADER","FACTOR","iFACTOR","decodeUnsafe","psz","zeroes","b256","carry","it3","it4","vch","allocUnsafe","pbegin","pend","b58","it1","it2","repeat","Maj","SHA256_K","IV","SHA256_W","SHA256","W15","s0","s1","__createBinding","o","enumerable","__setModuleDefault","__decorate","decorators","desc","arguments","getOwnPropertyDescriptor","Reflect","decorate","__importStar","__esModule","__importDefault","BinaryReader","BinaryWriter","BorshError","baseDecode","baseEncode","bn_js_1","bs58_1","textDecoder","TextDecoder","fatal","INITIAL_LENGTH","fieldPath","originalMessage","fieldName","buf","maybeResize","writeUInt8","writeUInt16LE","writeUInt32LE","writeBuffer","toArray","writeU32","fn","handlingRangeError","propertyKey","propertyDescriptor","originalMethod","apply","RangeError","readUInt8","readUInt16LE","readUInt32LE","readBuffer","readU32","capitalizeFirstLetter","toUpperCase","serializeField","fieldType","writer","writeFixedArray","writeArray","writeU8","serializeStruct","addToFieldPath","borshSerialize","structSchema","idx","deserializeField","reader","readFixedArray","readArray","readU8","deserializeStruct","classType","borshDeserialize","fieldValue","Writer","Reader","inRange","ToDictionary","Stream","tokens","endOfStream","read","prepend","token","pop","decoderError","opt_code_point","DEFAULT_ENCODING","String","toLowerCase","_streaming","_BOMseen","_decoder","_fatal","Boolean","_ignoreBOM","_encoder","_options","UTF8Decoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","stream","bite","code_point","UTF8Encoder","temp","ArrayBuffer","input_stream","code_points","cp","fromCharCode","codePointsToString","opt_string","stringToCodePoints","reversed","toBigIntBE","width","toBufferBE","_interopRequireDefault","Client","_createClass2","_classCallCheck2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_websocket","_createSuper","Derived","hasNativeReflectConstruct","construct","sham","Proxy","valueOf","_isNativeReflectConstruct","Super","NewTarget","_CommonClient","_super","_ref","_ref$autoconnect","_ref$reconnect","reconnect","_ref$reconnect_interv","reconnect_interval","_ref$max_reconnects","generate_request_id","WebSocketBrowserImpl","_EventEmitter","protocols","_this","socket","WebSocket","onopen","onmessage","event","onerror","onclose","reason","optionsOrCallback","send","listener","addEventListener","EventEmitter","_regenerator","_asyncToGenerator2","_typeof2","_eventemitter","__rest","CommonClient","webSocketFactory","_a","_a$autoconnect","_a$reconnect","_a$reconnect_interval","_a$max_reconnects","rest_options","queue","rpc_id","ready","current_reconnects","_connect","timeout","ws_opts","_this2","promise","_login","mark","_callee","resp","wrap","_context","prev","sent","abrupt","stop","_listMethods","_callee2","_context2","_this3","_subscribe","_callee3","_context3","_x2","_unsubscribe","_callee4","_context4","_x3","_this4","parse","listeners","_ref2","uuid","v4","generateRequest","ClientBrowser","callServer","reviver","replacer","generator","notificationIdNull","isBatch","hasCallback","_parseResponse","responseText","isError","shake256","shake128","keccak_512","keccak_384","keccak_224","sha3_512","sha3_384","sha3_256","sha3_224","Keccak","keccakP","SHA3_PI","SHA3_ROTL","_SHA3_IOTA","_7n","_256n","_0x71n","round","SHA3_IOTA_H","SHA3_IOTA_L","rotlH","rotlL","rounds","idx1","idx0","B0","B1","Th","Tl","curH","curL","PI","suffix","enableXOF","posOut","state32","keccak","finish","bufferOut","writeInto","xofInto","gen","genShake","dkLen","HMAC","_key","iHash","oHash","getPrototypeOf"],"mappings":"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","file":"static/js/2.6269d9ea.chunk.js","sourcesContent":["\"use strict\";\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.randomBytes = exports.wrapConstructorWithOpts = exports.wrapConstructor = exports.checkOpts = exports.Hash = exports.concatBytes = exports.toBytes = exports.utf8ToBytes = exports.asyncLoop = exports.nextTick = exports.hexToBytes = exports.bytesToHex = exports.isLE = exports.rotr = exports.createView = exports.u32 = exports.u8 = void 0;\n// The import here is via the package name. This is to ensure\n// that exports mapping/resolution does fall into place.\nconst crypto_1 = require(\"@noble/hashes/crypto\");\n// Cast array to different type\nconst u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexports.u8 = u8;\nconst u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\nexports.u32 = u32;\n// Cast array to view\nconst createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\nexports.createView = createView;\n// The rotate right (circular right shift) operation for uint32\nconst rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\nexports.rotr = rotr;\nexports.isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// There is almost no big endian hardware, but js typed arrays uses platform specific endianness.\n// So, just to be sure not to corrupt anything.\nif (!exports.isLE)\n    throw new Error('Non little-endian hardware is not supported');\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef]))\n */\nfunction bytesToHex(uint8a) {\n    // pre-caching improves the speed 6x\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nexports.bytesToHex = bytesToHex;\n/**\n * @example hexToBytes('deadbeef')\n */\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nexports.hexToBytes = hexToBytes;\n// There is no setImmediate in browser and setTimeout is slow. However, call to async function will return Promise\n// which will be fullfiled only on next scheduler queue processing step and this is exactly what we need.\nconst nextTick = async () => { };\nexports.nextTick = nextTick;\n// Returns control to thread each 'tick' ms to avoid blocking\nasync function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await (0, exports.nextTick)();\n        ts += diff;\n    }\n}\nexports.asyncLoop = asyncLoop;\nfunction utf8ToBytes(str) {\n    if (typeof str !== 'string') {\n        throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);\n    }\n    return new TextEncoder().encode(str);\n}\nexports.utf8ToBytes = utf8ToBytes;\nfunction toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!(data instanceof Uint8Array))\n        throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);\n    return data;\n}\nexports.toBytes = toBytes;\n/**\n * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`\n * @example concatBytes(buf1, buf2)\n */\nfunction concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nexports.concatBytes = concatBytes;\n// For runtime check if class implements interface\nclass Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nexports.Hash = Hash;\n// Check if object doens't have custom constructor (like Uint8Array/Array)\nconst isPlainObject = (obj) => Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;\nfunction checkOpts(defaults, opts) {\n    if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))\n        throw new TypeError('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexports.checkOpts = checkOpts;\nfunction wrapConstructor(hashConstructor) {\n    const hashC = (message) => hashConstructor().update(toBytes(message)).digest();\n    const tmp = hashConstructor();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashConstructor();\n    return hashC;\n}\nexports.wrapConstructor = wrapConstructor;\nfunction wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexports.wrapConstructorWithOpts = wrapConstructorWithOpts;\n/**\n * Secure PRNG\n */\nfunction randomBytes(bytesLength = 32) {\n    if (crypto_1.crypto.web) {\n        return crypto_1.crypto.web.getRandomValues(new Uint8Array(bytesLength));\n    }\n    else if (crypto_1.crypto.node) {\n        return new Uint8Array(crypto_1.crypto.node.randomBytes(bytesLength).buffer);\n    }\n    else {\n        throw new Error(\"The environment doesn't have randomBytes function\");\n    }\n}\nexports.randomBytes = randomBytes;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.output = exports.exists = exports.hash = exports.bytes = exports.bool = exports.number = void 0;\nfunction number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nexports.number = number;\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\nexports.bool = bool;\nfunction bytes(b, ...lengths) {\n    if (!(b instanceof Uint8Array))\n        throw new TypeError('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nexports.bytes = bytes;\nfunction hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nexports.hash = hash;\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nexports.exists = exists;\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nexports.output = output;\nconst assert = {\n    number,\n    bool,\n    bytes,\n    hash,\n    exists,\n    output,\n};\nexports.default = assert;\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","import _classCallCheck from '@babel/runtime/helpers/classCallCheck';\nimport _createClass from '@babel/runtime/helpers/createClass';\nimport _inherits from '@babel/runtime/helpers/inherits';\nimport _possibleConstructorReturn from '@babel/runtime/helpers/possibleConstructorReturn';\nimport _getPrototypeOf from '@babel/runtime/helpers/getPrototypeOf';\nimport _asyncToGenerator from '@babel/runtime/helpers/asyncToGenerator';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport _regeneratorRuntime from '@babel/runtime/regenerator';\nimport { createFetchMiddleware, providerFromEngine } from '@toruslabs/base-controllers';\nimport { mergeMiddleware, createAsyncMiddleware, JRPCEngine } from '@toruslabs/openlogin-jrpc';\nimport { CHAIN_NAMESPACES, isHexStrict, WalletInitializationError } from '@web3auth/base';\nimport { BaseProvider } from '@web3auth/base-provider';\nimport bs58 from 'bs58';\nimport { ethErrors } from 'eth-rpc-errors';\nimport { PublicKey, Connection, Keypair } from '@solana/web3.js';\nimport nacl from '@toruslabs/tweetnacl-js';\n\nfunction createChainIdMiddleware(chainId) {\n  return function (req, res, next, end) {\n    if (req.method === \"solana_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n\n    return next();\n  };\n}\nfunction createProviderConfigMiddleware(providerConfig) {\n  return function (req, res, next, end) {\n    if (req.method === \"solana_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n\n    return next();\n  };\n}\nfunction createConfigMiddleware(providerConfig) {\n  var chainId = providerConfig.chainId;\n  return mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig)]);\n}\nfunction createJsonRpcClient(providerConfig) {\n  var rpcTarget = providerConfig.rpcTarget;\n  var fetchMiddleware = createFetchMiddleware({\n    rpcTarget: rpcTarget\n  });\n  var networkMiddleware = mergeMiddleware([createConfigMiddleware(providerConfig), fetchMiddleware]);\n  return {\n    networkMiddleware: networkMiddleware,\n    fetchMiddleware: fetchMiddleware\n  };\n}\n\nfunction createGetAccountsMiddleware(_ref) {\n  var getAccounts = _ref.getAccounts;\n  return createAsyncMiddleware( /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(request, response, next) {\n      var method, accounts;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              method = request.method;\n\n              if (!(method !== \"getAccounts\")) {\n                _context.next = 3;\n                break;\n              }\n\n              return _context.abrupt(\"return\", next());\n\n            case 3:\n              if (getAccounts) {\n                _context.next = 5;\n                break;\n              }\n\n              throw new Error(\"WalletMiddleware - opts.getAccounts not provided\");\n\n            case 5:\n              _context.next = 7;\n              return getAccounts(request);\n\n            case 7:\n              accounts = _context.sent;\n              response.result = accounts;\n              return _context.abrupt(\"return\", undefined);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x, _x2, _x3) {\n      return _ref2.apply(this, arguments);\n    };\n  }());\n}\nfunction createRequestAccountsMiddleware(_ref3) {\n  var requestAccounts = _ref3.requestAccounts;\n  return createAsyncMiddleware( /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(request, response, next) {\n      var method, accounts;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              method = request.method;\n\n              if (!(method !== \"requestAccounts\")) {\n                _context2.next = 3;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", next());\n\n            case 3:\n              if (requestAccounts) {\n                _context2.next = 5;\n                break;\n              }\n\n              throw new Error(\"WalletMiddleware - opts.requestAccounts not provided\");\n\n            case 5:\n              _context2.next = 7;\n              return requestAccounts(request);\n\n            case 7:\n              accounts = _context2.sent;\n              response.result = accounts;\n              return _context2.abrupt(\"return\", undefined);\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x4, _x5, _x6) {\n      return _ref4.apply(this, arguments);\n    };\n  }());\n}\nfunction createGenericJRPCMiddleware(targetMethod, handler) {\n  return createAsyncMiddleware( /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(request, response, next) {\n      var method, result;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              method = request.method;\n\n              if (!(method !== targetMethod)) {\n                _context3.next = 3;\n                break;\n              }\n\n              return _context3.abrupt(\"return\", next());\n\n            case 3:\n              if (handler) {\n                _context3.next = 5;\n                break;\n              }\n\n              throw new Error(\"WalletMiddleware - \".concat(targetMethod, \" not provided\"));\n\n            case 5:\n              _context3.next = 7;\n              return handler(request);\n\n            case 7:\n              result = _context3.sent;\n              response.result = result;\n              return _context3.abrupt(\"return\", undefined);\n\n            case 10:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x7, _x8, _x9) {\n      return _ref5.apply(this, arguments);\n    };\n  }());\n}\nfunction createSolanaMiddleware(providerHandlers) {\n  var getAccounts = providerHandlers.getAccounts,\n      requestAccounts = providerHandlers.requestAccounts,\n      signTransaction = providerHandlers.signTransaction,\n      signAndSendTransaction = providerHandlers.signAndSendTransaction,\n      signAllTransactions = providerHandlers.signAllTransactions,\n      signMessage = providerHandlers.signMessage,\n      getPrivateKey = providerHandlers.getPrivateKey,\n      getSecretKey = providerHandlers.getSecretKey;\n  return mergeMiddleware([createRequestAccountsMiddleware({\n    requestAccounts: requestAccounts\n  }), createGetAccountsMiddleware({\n    getAccounts: getAccounts\n  }), createGenericJRPCMiddleware(\"signTransaction\", signTransaction), createGenericJRPCMiddleware(\"signAndSendTransaction\", signAndSendTransaction), createGenericJRPCMiddleware(\"signAllTransactions\", signAllTransactions), createGenericJRPCMiddleware(\"signMessage\", signMessage), createGenericJRPCMiddleware(\"solanaPrivateKey\", getPrivateKey), createGenericJRPCMiddleware(\"solanaSecretKey\", getSecretKey)]);\n}\nfunction createChainSwitchMiddleware(_ref6) {\n  var addNewChainConfig = _ref6.addNewChainConfig,\n      switchSolanaChain = _ref6.switchSolanaChain;\n  return mergeMiddleware([createGenericJRPCMiddleware(\"addSolanaChain\", addNewChainConfig), createGenericJRPCMiddleware(\"switchSolanaChain\", switchSolanaChain)]);\n}\nfunction createAccountMiddleware(_ref7) {\n  var updatePrivatekey = _ref7.updatePrivatekey;\n  return mergeMiddleware([createGenericJRPCMiddleware(\"updateAccount\", updatePrivatekey)]);\n}\n\nfunction ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper$6(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$6(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct$6() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nvar BaseInjectedProvider = /*#__PURE__*/function (_BaseProvider) {\n  _inherits(BaseInjectedProvider, _BaseProvider);\n\n  var _super = _createSuper$6(BaseInjectedProvider);\n\n  function BaseInjectedProvider(_ref) {\n    var config = _ref.config,\n        state = _ref.state;\n\n    _classCallCheck(this, BaseInjectedProvider);\n\n    return _super.call(this, {\n      config: {\n        chainConfig: _objectSpread$3(_objectSpread$3({}, config.chainConfig), {}, {\n          chainNamespace: CHAIN_NAMESPACES.SOLANA\n        })\n      },\n      state: state\n    });\n  }\n\n  _createClass(BaseInjectedProvider, [{\n    key: \"switchChain\",\n    value: function () {\n      var _switchChain = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", Promise.resolve());\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function switchChain(_x) {\n        return _switchChain.apply(this, arguments);\n      }\n\n      return switchChain;\n    }()\n  }, {\n    key: \"setupProvider\",\n    value: function () {\n      var _setupProvider = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(injectedProvider) {\n        var engine, providerHandlers, solanaMiddleware, configMiddleware, injectedProviderProxy, provider;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                engine = new JRPCEngine();\n                providerHandlers = this.getProviderHandlers(injectedProvider);\n                solanaMiddleware = createSolanaMiddleware(providerHandlers);\n                engine.push(solanaMiddleware);\n                configMiddleware = createConfigMiddleware(this.config.chainConfig);\n                engine.push(configMiddleware);\n                injectedProviderProxy = this.getInjectedProviderProxy(injectedProvider);\n\n                if (injectedProviderProxy) {\n                  engine.push(injectedProviderProxy);\n                }\n\n                provider = providerFromEngine(engine);\n                this.updateProviderEngineProxy(provider);\n                _context2.next = 12;\n                return this.lookupNetwork();\n\n              case 12:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function setupProvider(_x2) {\n        return _setupProvider.apply(this, arguments);\n      }\n\n      return setupProvider;\n    }()\n  }, {\n    key: \"lookupNetwork\",\n    value: function () {\n      var _lookupNetwork = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var chainConfig;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                chainConfig = this.config.chainConfig;\n                this.update({\n                  chainId: chainConfig.chainId\n                });\n                return _context3.abrupt(\"return\", chainConfig.chainId || \"\");\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function lookupNetwork() {\n        return _lookupNetwork.apply(this, arguments);\n      }\n\n      return lookupNetwork;\n    }()\n  }, {\n    key: \"getInjectedProviderProxy\",\n    value: function getInjectedProviderProxy(_) {\n      return undefined;\n    }\n  }]);\n\n  return BaseInjectedProvider;\n}(BaseProvider);\n\nvar getBaseProviderHandlers = function getBaseProviderHandlers(injectedProvider) {\n  var providerHandlers = {\n    requestAccounts: function () {\n      var _requestAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : []);\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function requestAccounts() {\n        return _requestAccounts.apply(this, arguments);\n      }\n\n      return requestAccounts;\n    }(),\n    getAccounts: function () {\n      var _getAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : []);\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function getAccounts() {\n        return _getAccounts.apply(this, arguments);\n      }\n\n      return getAccounts;\n    }(),\n    getPrivateKey: function () {\n      var _getPrivateKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                throw ethErrors.rpc.methodNotSupported();\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function getPrivateKey() {\n        return _getPrivateKey.apply(this, arguments);\n      }\n\n      return getPrivateKey;\n    }(),\n    getSecretKey: function () {\n      var _getSecretKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                throw ethErrors.rpc.methodNotSupported();\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function getSecretKey() {\n        return _getSecretKey.apply(this, arguments);\n      }\n\n      return getSecretKey;\n    }(),\n    signTransaction: function () {\n      var _signTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(req) {\n        var transaction;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return injectedProvider.signTransaction(req.params.message);\n\n              case 2:\n                transaction = _context5.sent;\n                return _context5.abrupt(\"return\", transaction);\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function signTransaction(_x) {\n        return _signTransaction.apply(this, arguments);\n      }\n\n      return signTransaction;\n    }(),\n    signMessage: function () {\n      var _signMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(req) {\n        var sigData;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return injectedProvider.signMessage(req.params.message, req.params.display);\n\n              case 2:\n                sigData = _context6.sent;\n                return _context6.abrupt(\"return\", sigData.signature);\n\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      function signMessage(_x2) {\n        return _signMessage.apply(this, arguments);\n      }\n\n      return signMessage;\n    }(),\n    signAllTransactions: function () {\n      var _signAllTransactions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(req) {\n        var _req$params, _req$params2;\n\n        var transaction;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (!(!((_req$params = req.params) !== null && _req$params !== void 0 && _req$params.message) || !((_req$params2 = req.params) !== null && _req$params2 !== void 0 && _req$params2.message.length))) {\n                  _context7.next = 2;\n                  break;\n                }\n\n                throw ethErrors.rpc.invalidParams(\"message\");\n\n              case 2:\n                _context7.next = 4;\n                return injectedProvider.signAllTransactions(req.params.message);\n\n              case 4:\n                transaction = _context7.sent;\n                return _context7.abrupt(\"return\", transaction);\n\n              case 6:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n\n      function signAllTransactions(_x3) {\n        return _signAllTransactions.apply(this, arguments);\n      }\n\n      return signAllTransactions;\n    }(),\n    signAndSendTransaction: function () {\n      var _signAndSendTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(req) {\n        var txRes;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return injectedProvider.signAndSendTransaction(req.params.message);\n\n              case 2:\n                txRes = _context8.sent;\n                return _context8.abrupt(\"return\", {\n                  signature: txRes.signature\n                });\n\n              case 4:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }));\n\n      function signAndSendTransaction(_x4) {\n        return _signAndSendTransaction.apply(this, arguments);\n      }\n\n      return signAndSendTransaction;\n    }()\n  };\n  return providerHandlers;\n};\n\nfunction ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction createInjectedProviderProxyMiddleware(provider) {\n  return createAsyncMiddleware( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(req, res, _next) {\n      var result;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return provider.request(_objectSpread$2({}, req));\n\n            case 2:\n              result = _context.sent;\n              res.result = result;\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n}\n\nfunction _createSuper$5(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$5(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct$5() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nvar PhantomInjectedProvider = /*#__PURE__*/function (_BaseInjectedProvider) {\n  _inherits(PhantomInjectedProvider, _BaseInjectedProvider);\n\n  var _super = _createSuper$5(PhantomInjectedProvider);\n\n  function PhantomInjectedProvider() {\n    _classCallCheck(this, PhantomInjectedProvider);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(PhantomInjectedProvider, [{\n    key: \"getProviderHandlers\",\n    value: function getProviderHandlers(injectedProvider) {\n      return getBaseProviderHandlers(injectedProvider);\n    }\n  }, {\n    key: \"getInjectedProviderProxy\",\n    value: function getInjectedProviderProxy(injectedProvider) {\n      return createInjectedProviderProxyMiddleware(injectedProvider);\n    }\n  }]);\n\n  return PhantomInjectedProvider;\n}(BaseInjectedProvider);\n\nvar getSlopeHandlers = function getSlopeHandlers(injectedProvider, getProviderEngineProxy) {\n  var providerHandlers = {\n    requestAccounts: function () {\n      var _requestAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _yield$injectedProvid, data;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return injectedProvider.connect();\n\n              case 2:\n                _yield$injectedProvid = _context.sent;\n                data = _yield$injectedProvid.data;\n                return _context.abrupt(\"return\", [data.publicKey]);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function requestAccounts() {\n        return _requestAccounts.apply(this, arguments);\n      }\n\n      return requestAccounts;\n    }(),\n    getAccounts: function () {\n      var _getAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _yield$injectedProvid2, data;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return injectedProvider.connect();\n\n              case 2:\n                _yield$injectedProvid2 = _context2.sent;\n                data = _yield$injectedProvid2.data;\n                return _context2.abrupt(\"return\", [data.publicKey]);\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function getAccounts() {\n        return _getAccounts.apply(this, arguments);\n      }\n\n      return getAccounts;\n    }(),\n    getPrivateKey: function () {\n      var _getPrivateKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                throw ethErrors.rpc.methodNotSupported();\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function getPrivateKey() {\n        return _getPrivateKey.apply(this, arguments);\n      }\n\n      return getPrivateKey;\n    }(),\n    getSecretKey: function () {\n      var _getSecretKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                throw ethErrors.rpc.methodNotSupported();\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function getSecretKey() {\n        return _getSecretKey.apply(this, arguments);\n      }\n\n      return getSecretKey;\n    }(),\n    signTransaction: function () {\n      var _signTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(req) {\n        var txMessage, _yield$injectedProvid3, data, publicKey, signature;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                txMessage = req.params.message;\n\n                if (txMessage) {\n                  _context5.next = 3;\n                  break;\n                }\n\n                throw ethErrors.rpc.invalidRequest({\n                  message: \"Invalid transaction message\"\n                });\n\n              case 3:\n                _context5.next = 5;\n                return injectedProvider.signTransaction(bs58.encode(txMessage.serializeMessage()));\n\n              case 5:\n                _yield$injectedProvid3 = _context5.sent;\n                data = _yield$injectedProvid3.data;\n\n                if (!(!data.publicKey || !data.signature)) {\n                  _context5.next = 9;\n                  break;\n                }\n\n                throw new Error(\"Invalid signature from slope wallet\");\n\n              case 9:\n                publicKey = new PublicKey(data.publicKey);\n                signature = bs58.decode(data.signature);\n                txMessage.addSignature(publicKey, signature);\n                return _context5.abrupt(\"return\", txMessage);\n\n              case 13:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function signTransaction(_x) {\n        return _signTransaction.apply(this, arguments);\n      }\n\n      return signTransaction;\n    }(),\n    signMessage: function () {\n      var _signMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(req) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return injectedProvider.signMessage(req.params.message);\n\n              case 2:\n                response = _context6.sent;\n                return _context6.abrupt(\"return\", bs58.decode(response.data.signature));\n\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      function signMessage(_x2) {\n        return _signMessage.apply(this, arguments);\n      }\n\n      return signMessage;\n    }(),\n    signAndSendTransaction: function () {\n      var _signAndSendTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(req) {\n        var provider, txMessage, _yield$injectedProvid4, data, publicKey, signature, chainConfig, conn, res;\n\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                provider = getProviderEngineProxy();\n\n                if (provider) {\n                  _context7.next = 3;\n                  break;\n                }\n\n                throw ethErrors.provider.custom({\n                  message: \"Provider is not initialized\",\n                  code: 4902\n                });\n\n              case 3:\n                txMessage = req.params.message;\n\n                if (txMessage) {\n                  _context7.next = 6;\n                  break;\n                }\n\n                throw ethErrors.rpc.invalidRequest({\n                  message: \"Invalid transaction message\"\n                });\n\n              case 6:\n                _context7.next = 8;\n                return injectedProvider.signTransaction(bs58.encode(txMessage.serializeMessage()));\n\n              case 8:\n                _yield$injectedProvid4 = _context7.sent;\n                data = _yield$injectedProvid4.data;\n\n                if (!(!data.publicKey || !data.signature)) {\n                  _context7.next = 12;\n                  break;\n                }\n\n                throw new Error(\"Invalid signature from slope wallet\");\n\n              case 12:\n                publicKey = new PublicKey(data.publicKey);\n                signature = bs58.decode(data.signature);\n                txMessage.addSignature(publicKey, signature);\n                _context7.next = 17;\n                return provider.request({\n                  method: \"solana_provider_config\",\n                  params: []\n                });\n\n              case 17:\n                chainConfig = _context7.sent;\n                conn = new Connection(chainConfig.rpcTarget);\n                _context7.next = 21;\n                return conn.sendRawTransaction(txMessage.serialize());\n\n              case 21:\n                res = _context7.sent;\n                return _context7.abrupt(\"return\", {\n                  signature: res\n                });\n\n              case 23:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n\n      function signAndSendTransaction(_x3) {\n        return _signAndSendTransaction.apply(this, arguments);\n      }\n\n      return signAndSendTransaction;\n    }(),\n    signAllTransactions: function () {\n      var _signAllTransactions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(req) {\n        var _req$params, _req$params2, _data$signatures;\n\n        var allTxns, length, unsignedTx, i, _yield$injectedProvid5, msg, data, publicKey, signature;\n\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                if (!(!((_req$params = req.params) !== null && _req$params !== void 0 && _req$params.message) || !((_req$params2 = req.params) !== null && _req$params2 !== void 0 && _req$params2.message.length))) {\n                  _context8.next = 2;\n                  break;\n                }\n\n                throw ethErrors.rpc.invalidParams(\"message\");\n\n              case 2:\n                allTxns = req.params.message;\n                length = allTxns.length;\n                unsignedTx = [];\n\n                for (i = 0; i < length; i++) {\n                  unsignedTx.push(bs58.encode(req.params.message[i].serializeMessage()));\n                }\n\n                _context8.next = 8;\n                return injectedProvider.signAllTransactions(unsignedTx);\n\n              case 8:\n                _yield$injectedProvid5 = _context8.sent;\n                msg = _yield$injectedProvid5.msg;\n                data = _yield$injectedProvid5.data;\n\n                if (!(!data.publicKey || ((_data$signatures = data.signatures) === null || _data$signatures === void 0 ? void 0 : _data$signatures.length) !== length)) {\n                  _context8.next = 13;\n                  break;\n                }\n\n                throw new Error(msg);\n\n              case 13:\n                publicKey = new PublicKey(data.publicKey);\n\n                for (i = 0; i < length; i++) {\n                  signature = bs58.decode(data.signatures[i]);\n                  allTxns[i].addSignature(publicKey, signature);\n                }\n\n                return _context8.abrupt(\"return\", allTxns);\n\n              case 16:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }));\n\n      function signAllTransactions(_x4) {\n        return _signAllTransactions.apply(this, arguments);\n      }\n\n      return signAllTransactions;\n    }()\n  };\n  return providerHandlers;\n};\n\nfunction _createSuper$4(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$4(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct$4() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nvar SlopeInjectedProxyProvider = /*#__PURE__*/function (_BaseInjectedProvider) {\n  _inherits(SlopeInjectedProxyProvider, _BaseInjectedProvider);\n\n  var _super = _createSuper$4(SlopeInjectedProxyProvider);\n\n  function SlopeInjectedProxyProvider() {\n    _classCallCheck(this, SlopeInjectedProxyProvider);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SlopeInjectedProxyProvider, [{\n    key: \"getProviderHandlers\",\n    value: function getProviderHandlers(injectedProvider) {\n      return getSlopeHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n    }\n  }]);\n\n  return SlopeInjectedProxyProvider;\n}(BaseInjectedProvider);\n\nvar getSolflareHandlers = function getSolflareHandlers(injectedProvider, getProviderEngineProxy) {\n  var solflareProviderHandlers = getBaseProviderHandlers(injectedProvider);\n\n  solflareProviderHandlers.signAndSendTransaction = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(req) {\n      var provider, transaction, chainConfig, conn, res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              provider = getProviderEngineProxy();\n\n              if (provider) {\n                _context.next = 3;\n                break;\n              }\n\n              throw ethErrors.provider.custom({\n                message: \"Provider is not initialized\",\n                code: 4902\n              });\n\n            case 3:\n              _context.next = 5;\n              return injectedProvider.signTransaction(req.params.message);\n\n            case 5:\n              transaction = _context.sent;\n              _context.next = 8;\n              return provider.request({\n                method: \"solana_provider_config\",\n                params: []\n              });\n\n            case 8:\n              chainConfig = _context.sent;\n              conn = new Connection(chainConfig.rpcTarget);\n              _context.next = 12;\n              return conn.sendRawTransaction(transaction.serialize());\n\n            case 12:\n              res = _context.sent;\n              return _context.abrupt(\"return\", {\n                signature: res\n              });\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return solflareProviderHandlers;\n};\n\nfunction _createSuper$3(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$3(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct$3() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nvar SolflareInjectedProvider = /*#__PURE__*/function (_BaseInjectedProvider) {\n  _inherits(SolflareInjectedProvider, _BaseInjectedProvider);\n\n  var _super = _createSuper$3(SolflareInjectedProvider);\n\n  function SolflareInjectedProvider() {\n    _classCallCheck(this, SolflareInjectedProvider);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SolflareInjectedProvider, [{\n    key: \"getProviderHandlers\",\n    value: function getProviderHandlers(injectedProvider) {\n      return getSolflareHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n    }\n  }]);\n\n  return SolflareInjectedProvider;\n}(BaseInjectedProvider);\n\nvar getSolletHandlers = function getSolletHandlers(injectedProvider, getProviderEngineProxy) {\n  var providerHandlers = getBaseProviderHandlers(injectedProvider);\n\n  providerHandlers.signMessage = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(req) {\n      var _yield$injectedProvid, signature;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return injectedProvider.sign(req.params.message, \"utf8\");\n\n            case 2:\n              _yield$injectedProvid = _context.sent;\n              signature = _yield$injectedProvid.signature;\n              return _context.abrupt(\"return\", signature);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  providerHandlers.signAndSendTransaction = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(req) {\n      var provider, transaction, chainConfig, conn, res;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              provider = getProviderEngineProxy();\n\n              if (provider) {\n                _context2.next = 3;\n                break;\n              }\n\n              throw ethErrors.provider.custom({\n                message: \"Provider is not initialized\",\n                code: 4902\n              });\n\n            case 3:\n              _context2.next = 5;\n              return injectedProvider.signTransaction(req.params.message);\n\n            case 5:\n              transaction = _context2.sent;\n              _context2.next = 8;\n              return provider.request({\n                method: \"solana_provider_config\",\n                params: []\n              });\n\n            case 8:\n              chainConfig = _context2.sent;\n              conn = new Connection(chainConfig.rpcTarget);\n              _context2.next = 12;\n              return conn.sendRawTransaction(transaction.serialize());\n\n            case 12:\n              res = _context2.sent;\n              return _context2.abrupt(\"return\", {\n                signature: res\n              });\n\n            case 14:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return providerHandlers;\n};\n\nfunction _createSuper$2(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$2(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct$2() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nvar SolletInjectedProvider = /*#__PURE__*/function (_BaseInjectedProvider) {\n  _inherits(SolletInjectedProvider, _BaseInjectedProvider);\n\n  var _super = _createSuper$2(SolletInjectedProvider);\n\n  function SolletInjectedProvider() {\n    _classCallCheck(this, SolletInjectedProvider);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SolletInjectedProvider, [{\n    key: \"getProviderHandlers\",\n    value: function getProviderHandlers(injectedProvider) {\n      return getSolletHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n    }\n  }]);\n\n  return SolletInjectedProvider;\n}(BaseInjectedProvider);\n\nvar getTorusHandlers = function getTorusHandlers(injectedProvider) {\n  var providerHandlers = {\n    requestAccounts: function () {\n      var _requestAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var accounts;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return injectedProvider.request({\n                  method: \"solana_requestAccounts\",\n                  params: {}\n                });\n\n              case 2:\n                accounts = _context.sent;\n                return _context.abrupt(\"return\", accounts);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function requestAccounts() {\n        return _requestAccounts.apply(this, arguments);\n      }\n\n      return requestAccounts;\n    }(),\n    getAccounts: function () {\n      var _getAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var accounts;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return injectedProvider.request({\n                  method: \"solana_requestAccounts\",\n                  params: {}\n                });\n\n              case 2:\n                accounts = _context2.sent;\n                return _context2.abrupt(\"return\", accounts);\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function getAccounts() {\n        return _getAccounts.apply(this, arguments);\n      }\n\n      return getAccounts;\n    }(),\n    getPrivateKey: function () {\n      var _getPrivateKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                throw ethErrors.rpc.methodNotSupported();\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function getPrivateKey() {\n        return _getPrivateKey.apply(this, arguments);\n      }\n\n      return getPrivateKey;\n    }(),\n    getSecretKey: function () {\n      var _getSecretKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                throw ethErrors.rpc.methodNotSupported();\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function getSecretKey() {\n        return _getSecretKey.apply(this, arguments);\n      }\n\n      return getSecretKey;\n    }(),\n    signMessage: function () {\n      var _signMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(req) {\n        var _req$params;\n\n        var message;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if ((_req$params = req.params) !== null && _req$params !== void 0 && _req$params.message) {\n                  _context5.next = 2;\n                  break;\n                }\n\n                throw ethErrors.rpc.invalidParams(\"message\");\n\n              case 2:\n                _context5.next = 4;\n                return injectedProvider.signMessage(req.params.message);\n\n              case 4:\n                message = _context5.sent;\n                return _context5.abrupt(\"return\", message);\n\n              case 6:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function signMessage(_x) {\n        return _signMessage.apply(this, arguments);\n      }\n\n      return signMessage;\n    }(),\n    signTransaction: function () {\n      var _signTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(req) {\n        var _req$params2;\n\n        var txMessage, response;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if ((_req$params2 = req.params) !== null && _req$params2 !== void 0 && _req$params2.message) {\n                  _context6.next = 2;\n                  break;\n                }\n\n                throw ethErrors.rpc.invalidParams(\"message\");\n\n              case 2:\n                txMessage = req.params.message;\n                _context6.next = 5;\n                return injectedProvider.signTransaction(txMessage);\n\n              case 5:\n                response = _context6.sent;\n                return _context6.abrupt(\"return\", response);\n\n              case 7:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      function signTransaction(_x2) {\n        return _signTransaction.apply(this, arguments);\n      }\n\n      return signTransaction;\n    }(),\n    signAndSendTransaction: function () {\n      var _signAndSendTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(req) {\n        var _req$params3;\n\n        var txMessage, response;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if ((_req$params3 = req.params) !== null && _req$params3 !== void 0 && _req$params3.message) {\n                  _context7.next = 2;\n                  break;\n                }\n\n                throw ethErrors.rpc.invalidParams(\"message\");\n\n              case 2:\n                txMessage = req.params.message;\n                _context7.next = 5;\n                return injectedProvider.sendTransaction(txMessage);\n\n              case 5:\n                response = _context7.sent;\n                return _context7.abrupt(\"return\", {\n                  signature: response\n                });\n\n              case 7:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n\n      function signAndSendTransaction(_x3) {\n        return _signAndSendTransaction.apply(this, arguments);\n      }\n\n      return signAndSendTransaction;\n    }(),\n    signAllTransactions: function () {\n      var _signAllTransactions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(req) {\n        var _req$params4, _req$params5;\n\n        var transactions, response;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                if (!(!((_req$params4 = req.params) !== null && _req$params4 !== void 0 && _req$params4.message) || !((_req$params5 = req.params) !== null && _req$params5 !== void 0 && _req$params5.message.length))) {\n                  _context8.next = 2;\n                  break;\n                }\n\n                throw ethErrors.rpc.invalidParams(\"message\");\n\n              case 2:\n                transactions = req.params.message;\n                _context8.next = 5;\n                return injectedProvider.signAllTransactions(transactions);\n\n              case 5:\n                response = _context8.sent;\n                return _context8.abrupt(\"return\", response);\n\n              case 7:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }));\n\n      function signAllTransactions(_x4) {\n        return _signAllTransactions.apply(this, arguments);\n      }\n\n      return signAllTransactions;\n    }()\n  };\n  return providerHandlers;\n};\n\nfunction ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper$1(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$1(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct$1() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nvar TorusInjectedProvider = /*#__PURE__*/function (_BaseProvider) {\n  _inherits(TorusInjectedProvider, _BaseProvider);\n\n  var _super = _createSuper$1(TorusInjectedProvider);\n\n  function TorusInjectedProvider(_ref) {\n    var config = _ref.config,\n        state = _ref.state;\n\n    _classCallCheck(this, TorusInjectedProvider);\n\n    return _super.call(this, {\n      config: {\n        chainConfig: _objectSpread$1(_objectSpread$1({}, config.chainConfig), {}, {\n          chainNamespace: CHAIN_NAMESPACES.SOLANA\n        })\n      },\n      state: state\n    });\n  }\n\n  _createClass(TorusInjectedProvider, [{\n    key: \"switchChain\",\n    value: function () {\n      var _switchChain = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", Promise.resolve());\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function switchChain(_x) {\n        return _switchChain.apply(this, arguments);\n      }\n\n      return switchChain;\n    }()\n  }, {\n    key: \"setupProvider\",\n    value: function () {\n      var _setupProvider = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(injectedProvider) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.handleInjectedProviderUpdate(injectedProvider);\n                _context2.next = 3;\n                return this.setupEngine(injectedProvider);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function setupProvider(_x2) {\n        return _setupProvider.apply(this, arguments);\n      }\n\n      return setupProvider;\n    }()\n  }, {\n    key: \"lookupNetwork\",\n    value: function () {\n      var _lookupNetwork = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var chainId, connectedChainId, connectedHexChainId;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (this.provider) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                throw ethErrors.provider.custom({\n                  message: \"Torus solana provider is not initialized\",\n                  code: 4902\n                });\n\n              case 2:\n                chainId = this.config.chainConfig.chainId;\n                _context3.next = 5;\n                return this.provider.request({\n                  method: \"solana_chainId\"\n                });\n\n              case 5:\n                connectedChainId = _context3.sent;\n                connectedHexChainId = isHexStrict(connectedChainId.toString()) ? connectedChainId : \"0x\".concat(parseInt(connectedChainId, 10).toString(16));\n\n                if (!(chainId !== connectedHexChainId)) {\n                  _context3.next = 9;\n                  break;\n                }\n\n                throw WalletInitializationError.rpcConnectionError(\"Invalid network, net_version is: \".concat(connectedHexChainId, \", expected: \").concat(chainId));\n\n              case 9:\n                this.update({\n                  chainId: connectedHexChainId\n                });\n                this.provider.emit(\"connect\", {\n                  chainId: this.state.chainId\n                });\n                this.provider.emit(\"chainChanged\", this.state.chainId);\n                return _context3.abrupt(\"return\", this.state.chainId);\n\n              case 13:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function lookupNetwork() {\n        return _lookupNetwork.apply(this, arguments);\n      }\n\n      return lookupNetwork;\n    }()\n  }, {\n    key: \"setupEngine\",\n    value: function () {\n      var _setupEngine = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(injectedProvider) {\n        var providerHandlers, solanaMiddleware, injectedProviderProxy, engine, provider;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                providerHandlers = getTorusHandlers(injectedProvider);\n                solanaMiddleware = createSolanaMiddleware(providerHandlers);\n                injectedProviderProxy = createInjectedProviderProxyMiddleware(injectedProvider);\n                engine = new JRPCEngine();\n                engine.push(solanaMiddleware);\n                engine.push(injectedProviderProxy);\n                provider = providerFromEngine(engine);\n                this.updateProviderEngineProxy(provider);\n                _context4.next = 10;\n                return this.lookupNetwork();\n\n              case 10:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function setupEngine(_x3) {\n        return _setupEngine.apply(this, arguments);\n      }\n\n      return setupEngine;\n    }()\n  }, {\n    key: \"handleInjectedProviderUpdate\",\n    value: function () {\n      var _handleInjectedProviderUpdate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(injectedProvider) {\n        var _this = this;\n\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                injectedProvider.on(\"accountsChanged\", /*#__PURE__*/function () {\n                  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(accounts) {\n                    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n                      while (1) {\n                        switch (_context5.prev = _context5.next) {\n                          case 0:\n                            _this.provider.emit(\"accountsChanged\", accounts);\n\n                          case 1:\n                          case \"end\":\n                            return _context5.stop();\n                        }\n                      }\n                    }, _callee5);\n                  }));\n\n                  return function (_x5) {\n                    return _ref2.apply(this, arguments);\n                  };\n                }());\n                injectedProvider.on(\"chainChanged\", /*#__PURE__*/function () {\n                  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(chainId) {\n                    var connectedHexChainId;\n                    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n                      while (1) {\n                        switch (_context6.prev = _context6.next) {\n                          case 0:\n                            connectedHexChainId = isHexStrict(chainId) ? chainId : \"0x\".concat(parseInt(chainId, 10).toString(16)); // Check if chainId changed and trigger event\n\n                            _this.configure({\n                              chainConfig: _objectSpread$1(_objectSpread$1({}, _this.config.chainConfig), {}, {\n                                chainId: connectedHexChainId\n                              })\n                            });\n\n                            _context6.next = 4;\n                            return _this.setupProvider(injectedProvider);\n\n                          case 4:\n                          case \"end\":\n                            return _context6.stop();\n                        }\n                      }\n                    }, _callee6);\n                  }));\n\n                  return function (_x6) {\n                    return _ref3.apply(this, arguments);\n                  };\n                }());\n\n              case 2:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n\n      function handleInjectedProviderUpdate(_x4) {\n        return _handleInjectedProviderUpdate.apply(this, arguments);\n      }\n\n      return handleInjectedProviderUpdate;\n    }()\n  }]);\n\n  return TorusInjectedProvider;\n}(BaseProvider);\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction getProviderHandlers(_x) {\n  return _getProviderHandlers.apply(this, arguments);\n}\n\nfunction _getProviderHandlers() {\n  _getProviderHandlers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(_ref) {\n    var privKey, getProviderEngineProxy, keyPairGenerator, keyPair, providerHandlers;\n    return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            privKey = _ref.privKey, getProviderEngineProxy = _ref.getProviderEngineProxy;\n\n            keyPairGenerator = function keyPairGenerator() {\n              return Keypair.fromSecretKey(Buffer.from(privKey, \"hex\"));\n            };\n\n            if (!(typeof privKey !== \"string\")) {\n              _context9.next = 4;\n              break;\n            }\n\n            throw WalletInitializationError.invalidParams(\"privKey must be a string\");\n\n          case 4:\n            keyPair = keyPairGenerator();\n            providerHandlers = {\n              requestAccounts: function () {\n                var _requestAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          return _context.abrupt(\"return\", [keyPair.publicKey.toBase58()]);\n\n                        case 1:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n\n                function requestAccounts() {\n                  return _requestAccounts.apply(this, arguments);\n                }\n\n                return requestAccounts;\n              }(),\n              getAccounts: function () {\n                var _getAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                  return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          return _context2.abrupt(\"return\", [keyPair.publicKey.toBase58()]);\n\n                        case 1:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, _callee2);\n                }));\n\n                function getAccounts() {\n                  return _getAccounts.apply(this, arguments);\n                }\n\n                return getAccounts;\n              }(),\n              getPrivateKey: function () {\n                var _getPrivateKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                  return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          return _context3.abrupt(\"return\", privKey);\n\n                        case 1:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                }));\n\n                function getPrivateKey() {\n                  return _getPrivateKey.apply(this, arguments);\n                }\n\n                return getPrivateKey;\n              }(),\n              getSecretKey: function () {\n                var _getSecretKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n                  return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                    while (1) {\n                      switch (_context4.prev = _context4.next) {\n                        case 0:\n                          return _context4.abrupt(\"return\", bs58.encode(keyPair.secretKey));\n\n                        case 1:\n                        case \"end\":\n                          return _context4.stop();\n                      }\n                    }\n                  }, _callee4);\n                }));\n\n                function getSecretKey() {\n                  return _getSecretKey.apply(this, arguments);\n                }\n\n                return getSecretKey;\n              }(),\n              signTransaction: function () {\n                var _signTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(req) {\n                  var _req$params;\n\n                  var transaction;\n                  return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n                    while (1) {\n                      switch (_context5.prev = _context5.next) {\n                        case 0:\n                          if ((_req$params = req.params) !== null && _req$params !== void 0 && _req$params.message) {\n                            _context5.next = 2;\n                            break;\n                          }\n\n                          throw ethErrors.rpc.invalidParams(\"message\");\n\n                        case 2:\n                          transaction = req.params.message;\n                          transaction.partialSign(keyPair);\n                          return _context5.abrupt(\"return\", transaction);\n\n                        case 5:\n                        case \"end\":\n                          return _context5.stop();\n                      }\n                    }\n                  }, _callee5);\n                }));\n\n                function signTransaction(_x2) {\n                  return _signTransaction.apply(this, arguments);\n                }\n\n                return signTransaction;\n              }(),\n              signMessage: function () {\n                var _signMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(req) {\n                  var _req$params2;\n\n                  var signedMsg;\n                  return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n                    while (1) {\n                      switch (_context6.prev = _context6.next) {\n                        case 0:\n                          if ((_req$params2 = req.params) !== null && _req$params2 !== void 0 && _req$params2.message) {\n                            _context6.next = 2;\n                            break;\n                          }\n\n                          throw ethErrors.rpc.invalidParams(\"message\");\n\n                        case 2:\n                          signedMsg = nacl.sign.detached(req.params.message, keyPair.secretKey);\n                          return _context6.abrupt(\"return\", signedMsg);\n\n                        case 4:\n                        case \"end\":\n                          return _context6.stop();\n                      }\n                    }\n                  }, _callee6);\n                }));\n\n                function signMessage(_x3) {\n                  return _signMessage.apply(this, arguments);\n                }\n\n                return signMessage;\n              }(),\n              signAndSendTransaction: function () {\n                var _signAndSendTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(req) {\n                  var _req$params3;\n\n                  var _providerEngineProxy, transaction, sig;\n\n                  return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n                    while (1) {\n                      switch (_context7.prev = _context7.next) {\n                        case 0:\n                          if ((_req$params3 = req.params) !== null && _req$params3 !== void 0 && _req$params3.message) {\n                            _context7.next = 2;\n                            break;\n                          }\n\n                          throw ethErrors.rpc.invalidParams(\"message\");\n\n                        case 2:\n                          _providerEngineProxy = getProviderEngineProxy();\n\n                          if (_providerEngineProxy) {\n                            _context7.next = 5;\n                            break;\n                          }\n\n                          throw ethErrors.provider.custom({\n                            message: \"Provider is not initialized\",\n                            code: 4902\n                          });\n\n                        case 5:\n                          transaction = req.params.message;\n                          transaction.sign(keyPair);\n                          _context7.next = 9;\n                          return _providerEngineProxy.request({\n                            method: \"sendTransaction\",\n                            params: [bs58.encode(transaction.serialize())]\n                          });\n\n                        case 9:\n                          sig = _context7.sent;\n                          return _context7.abrupt(\"return\", {\n                            signature: sig\n                          });\n\n                        case 11:\n                        case \"end\":\n                          return _context7.stop();\n                      }\n                    }\n                  }, _callee7);\n                }));\n\n                function signAndSendTransaction(_x4) {\n                  return _signAndSendTransaction.apply(this, arguments);\n                }\n\n                return signAndSendTransaction;\n              }(),\n              signAllTransactions: function () {\n                var _signAllTransactions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(req) {\n                  var _req$params4, _req$params5, _req$params6;\n\n                  var txns, _iterator, _step, tx, transaction;\n\n                  return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n                    while (1) {\n                      switch (_context8.prev = _context8.next) {\n                        case 0:\n                          if (!(!((_req$params4 = req.params) !== null && _req$params4 !== void 0 && _req$params4.message) || !((_req$params5 = req.params) !== null && _req$params5 !== void 0 && _req$params5.message.length))) {\n                            _context8.next = 2;\n                            break;\n                          }\n\n                          throw ethErrors.rpc.invalidParams(\"message\");\n\n                        case 2:\n                          txns = (_req$params6 = req.params) === null || _req$params6 === void 0 ? void 0 : _req$params6.message;\n                          _iterator = _createForOfIteratorHelper(txns || []);\n\n                          try {\n                            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                              tx = _step.value;\n                              transaction = tx;\n                              transaction.partialSign(keyPair);\n                            }\n                          } catch (err) {\n                            _iterator.e(err);\n                          } finally {\n                            _iterator.f();\n                          }\n\n                          return _context8.abrupt(\"return\", txns);\n\n                        case 6:\n                        case \"end\":\n                          return _context8.stop();\n                      }\n                    }\n                  }, _callee8);\n                }));\n\n                function signAllTransactions(_x5) {\n                  return _signAllTransactions.apply(this, arguments);\n                }\n\n                return signAllTransactions;\n              }()\n            };\n            return _context9.abrupt(\"return\", providerHandlers);\n\n          case 7:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee9);\n  }));\n  return _getProviderHandlers.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nvar SolanaPrivateKeyProvider = /*#__PURE__*/function (_BaseProvider) {\n  _inherits(SolanaPrivateKeyProvider, _BaseProvider);\n\n  var _super = _createSuper(SolanaPrivateKeyProvider);\n\n  function SolanaPrivateKeyProvider(_ref) {\n    var config = _ref.config,\n        state = _ref.state;\n\n    _classCallCheck(this, SolanaPrivateKeyProvider);\n\n    return _super.call(this, {\n      config: {\n        chainConfig: _objectSpread(_objectSpread({}, config.chainConfig), {}, {\n          chainNamespace: CHAIN_NAMESPACES.SOLANA\n        })\n      },\n      state: state\n    });\n  }\n\n  _createClass(SolanaPrivateKeyProvider, [{\n    key: \"enable\",\n    value: function () {\n      var _enable = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.state.privateKey) {\n                  _context.next = 2;\n                  break;\n                }\n\n                throw ethErrors.provider.custom({\n                  message: \"Private key is not found in state, plz pass it in constructor state param\",\n                  code: 4902\n                });\n\n              case 2:\n                _context.next = 4;\n                return this.setupProvider(this.state.privateKey);\n\n              case 4:\n                return _context.abrupt(\"return\", this._providerEngineProxy.request({\n                  method: \"eth_accounts\"\n                }));\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function enable() {\n        return _enable.apply(this, arguments);\n      }\n\n      return enable;\n    }()\n  }, {\n    key: \"setupProvider\",\n    value: function () {\n      var _setupProvider = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(privKey) {\n        var providerHandlers, solanaMiddleware, engine, _createJsonRpcClient, networkMiddleware, provider;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return getProviderHandlers({\n                  privKey: privKey,\n                  getProviderEngineProxy: this.getProviderEngineProxy.bind(this)\n                });\n\n              case 2:\n                providerHandlers = _context2.sent;\n                solanaMiddleware = createSolanaMiddleware(providerHandlers);\n                engine = new JRPCEngine();\n                _createJsonRpcClient = createJsonRpcClient(this.config.chainConfig), networkMiddleware = _createJsonRpcClient.networkMiddleware;\n                engine.push(this.getChainSwitchMiddleware());\n                engine.push(this.getAccountMiddleware());\n                engine.push(solanaMiddleware);\n                engine.push(networkMiddleware);\n                provider = providerFromEngine(engine);\n                this.updateProviderEngineProxy(provider);\n                _context2.next = 14;\n                return this.lookupNetwork();\n\n              case 14:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function setupProvider(_x) {\n        return _setupProvider.apply(this, arguments);\n      }\n\n      return setupProvider;\n    }()\n  }, {\n    key: \"updateAccount\",\n    value: function () {\n      var _updateAccount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(params) {\n        var existingKey;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (this._providerEngineProxy) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                throw ethErrors.provider.custom({\n                  message: \"Provider is not initialized\",\n                  code: 4902\n                });\n\n              case 2:\n                _context3.next = 4;\n                return this._providerEngineProxy.request({\n                  method: \"solanaPrivateKey\"\n                });\n\n              case 4:\n                existingKey = _context3.sent;\n\n                if (!(existingKey !== params.privateKey)) {\n                  _context3.next = 14;\n                  break;\n                }\n\n                _context3.next = 8;\n                return this.setupProvider(params.privateKey);\n\n              case 8:\n                _context3.t0 = this._providerEngineProxy;\n                _context3.next = 11;\n                return this._providerEngineProxy.request({\n                  method: \"requestAccounts\"\n                });\n\n              case 11:\n                _context3.t1 = _context3.sent;\n                _context3.t2 = {\n                  accounts: _context3.t1\n                };\n\n                _context3.t0.emit.call(_context3.t0, \"accountsChanged\", _context3.t2);\n\n              case 14:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function updateAccount(_x2) {\n        return _updateAccount.apply(this, arguments);\n      }\n\n      return updateAccount;\n    }()\n  }, {\n    key: \"switchChain\",\n    value: function () {\n      var _switchChain = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(params) {\n        var chainConfig, privKey;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (this._providerEngineProxy) {\n                  _context4.next = 2;\n                  break;\n                }\n\n                throw ethErrors.provider.custom({\n                  message: \"Provider is not initialized\",\n                  code: 4902\n                });\n\n              case 2:\n                chainConfig = this.getChainConfig(params.chainId);\n                this.update({\n                  chainId: \"loading\"\n                });\n                this.configure({\n                  chainConfig: chainConfig\n                });\n                _context4.next = 7;\n                return this._providerEngineProxy.request({\n                  method: \"solanaPrivateKey\"\n                });\n\n              case 7:\n                privKey = _context4.sent;\n                _context4.next = 10;\n                return this.setupProvider(privKey);\n\n              case 10:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function switchChain(_x3) {\n        return _switchChain.apply(this, arguments);\n      }\n\n      return switchChain;\n    }()\n  }, {\n    key: \"lookupNetwork\",\n    value: function () {\n      var _lookupNetwork = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var health, chainConfig;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (this._providerEngineProxy) {\n                  _context5.next = 2;\n                  break;\n                }\n\n                throw ethErrors.provider.custom({\n                  message: \"Provider is not initialized\",\n                  code: 4902\n                });\n\n              case 2:\n                _context5.next = 4;\n                return this._providerEngineProxy.request({\n                  method: \"getHealth\",\n                  params: []\n                });\n\n              case 4:\n                health = _context5.sent;\n                chainConfig = this.config.chainConfig;\n\n                if (!(health !== \"ok\")) {\n                  _context5.next = 8;\n                  break;\n                }\n\n                throw WalletInitializationError.rpcConnectionError(\"Failed to lookup network for following rpc target: \".concat(chainConfig.rpcTarget));\n\n              case 8:\n                this.update({\n                  chainId: chainConfig.chainId\n                });\n\n                if (this.state.chainId !== chainConfig.chainId) {\n                  this.provider.emit(\"chainChanged\", this.state.chainId);\n                  this.provider.emit(\"connect\", {\n                    chainId: this.state.chainId\n                  });\n                }\n\n                return _context5.abrupt(\"return\", this.state.chainId);\n\n              case 11:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function lookupNetwork() {\n        return _lookupNetwork.apply(this, arguments);\n      }\n\n      return lookupNetwork;\n    }()\n  }, {\n    key: \"getChainSwitchMiddleware\",\n    value: function getChainSwitchMiddleware() {\n      var _this = this;\n\n      var chainSwitchHandlers = {\n        addNewChainConfig: function () {\n          var _addNewChainConfig = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(req) {\n            var _req$params, chainId, chainName, rpcUrls, blockExplorerUrls, nativeCurrency;\n\n            return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n              while (1) {\n                switch (_context6.prev = _context6.next) {\n                  case 0:\n                    if (req.params) {\n                      _context6.next = 2;\n                      break;\n                    }\n\n                    throw ethErrors.rpc.invalidParams(\"Missing request params\");\n\n                  case 2:\n                    _req$params = req.params, chainId = _req$params.chainId, chainName = _req$params.chainName, rpcUrls = _req$params.rpcUrls, blockExplorerUrls = _req$params.blockExplorerUrls, nativeCurrency = _req$params.nativeCurrency;\n\n                    if (chainId) {\n                      _context6.next = 5;\n                      break;\n                    }\n\n                    throw ethErrors.rpc.invalidParams(\"Missing chainId in chainParams\");\n\n                  case 5:\n                    if (!(!rpcUrls || rpcUrls.length === 0)) {\n                      _context6.next = 7;\n                      break;\n                    }\n\n                    throw ethErrors.rpc.invalidParams(\"Missing rpcUrls in chainParams\");\n\n                  case 7:\n                    if (nativeCurrency) {\n                      _context6.next = 9;\n                      break;\n                    }\n\n                    throw ethErrors.rpc.invalidParams(\"Missing nativeCurrency in chainParams\");\n\n                  case 9:\n                    _this.addChain({\n                      chainNamespace: CHAIN_NAMESPACES.SOLANA,\n                      chainId: chainId,\n                      ticker: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.symbol) || \"SOL\",\n                      tickerName: (nativeCurrency === null || nativeCurrency === void 0 ? void 0 : nativeCurrency.name) || \"Solana\",\n                      displayName: chainName,\n                      rpcTarget: rpcUrls[0],\n                      blockExplorer: (blockExplorerUrls === null || blockExplorerUrls === void 0 ? void 0 : blockExplorerUrls[0]) || \"\"\n                    });\n\n                  case 10:\n                  case \"end\":\n                    return _context6.stop();\n                }\n              }\n            }, _callee6);\n          }));\n\n          function addNewChainConfig(_x4) {\n            return _addNewChainConfig.apply(this, arguments);\n          }\n\n          return addNewChainConfig;\n        }(),\n        switchSolanaChain: function () {\n          var _switchSolanaChain = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(req) {\n            return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n              while (1) {\n                switch (_context7.prev = _context7.next) {\n                  case 0:\n                    if (req.params) {\n                      _context7.next = 2;\n                      break;\n                    }\n\n                    throw ethErrors.rpc.invalidParams(\"Missing request params\");\n\n                  case 2:\n                    if (req.params.chainId) {\n                      _context7.next = 4;\n                      break;\n                    }\n\n                    throw ethErrors.rpc.invalidParams(\"Missing chainId\");\n\n                  case 4:\n                    _context7.next = 6;\n                    return _this.switchChain(req.params);\n\n                  case 6:\n                  case \"end\":\n                    return _context7.stop();\n                }\n              }\n            }, _callee7);\n          }));\n\n          function switchSolanaChain(_x5) {\n            return _switchSolanaChain.apply(this, arguments);\n          }\n\n          return switchSolanaChain;\n        }()\n      };\n      var chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n      return chainSwitchMiddleware;\n    }\n  }, {\n    key: \"getAccountMiddleware\",\n    value: function getAccountMiddleware() {\n      var _this2 = this;\n\n      var accountHandlers = {\n        updatePrivatekey: function () {\n          var _updatePrivatekey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(req) {\n            var privateKey;\n            return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n              while (1) {\n                switch (_context8.prev = _context8.next) {\n                  case 0:\n                    if (req.params) {\n                      _context8.next = 2;\n                      break;\n                    }\n\n                    throw ethErrors.rpc.invalidParams(\"Missing request params\");\n\n                  case 2:\n                    if (req.params.privateKey) {\n                      _context8.next = 4;\n                      break;\n                    }\n\n                    throw ethErrors.rpc.invalidParams(\"Missing privateKey\");\n\n                  case 4:\n                    privateKey = req.params.privateKey;\n                    _context8.next = 7;\n                    return _this2.updateAccount({\n                      privateKey: privateKey\n                    });\n\n                  case 7:\n                  case \"end\":\n                    return _context8.stop();\n                }\n              }\n            }, _callee8);\n          }));\n\n          function updatePrivatekey(_x6) {\n            return _updatePrivatekey.apply(this, arguments);\n          }\n\n          return updatePrivatekey;\n        }()\n      };\n      return createAccountMiddleware(accountHandlers);\n    }\n  }]);\n\n  return SolanaPrivateKeyProvider;\n}(BaseProvider);\n\n_defineProperty(SolanaPrivateKeyProvider, \"getProviderInstance\", /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(params) {\n    var providerFactory;\n    return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            providerFactory = new SolanaPrivateKeyProvider({\n              config: {\n                chainConfig: params.chainConfig\n              }\n            });\n            _context9.next = 3;\n            return providerFactory.setupProvider(params.privKey);\n\n          case 3:\n            return _context9.abrupt(\"return\", providerFactory);\n\n          case 4:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee9);\n  }));\n\n  return function (_x7) {\n    return _ref2.apply(this, arguments);\n  };\n}());\n\nvar SolanaWallet = /*#__PURE__*/function () {\n  function SolanaWallet(provider) {\n    _classCallCheck(this, SolanaWallet);\n\n    _defineProperty(this, \"provider\", void 0);\n\n    this.provider = provider;\n  }\n\n  _createClass(SolanaWallet, [{\n    key: \"requestAccounts\",\n    value: function () {\n      var _requestAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var accounts;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.provider.request({\n                  method: \"requestAccounts\",\n                  params: {}\n                });\n\n              case 2:\n                accounts = _context.sent;\n                return _context.abrupt(\"return\", accounts);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function requestAccounts() {\n        return _requestAccounts.apply(this, arguments);\n      }\n\n      return requestAccounts;\n    }()\n  }, {\n    key: \"signAndSendTransaction\",\n    value: function () {\n      var _signAndSendTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(transaction) {\n        var _yield$this$provider$, signature;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.provider.request({\n                  method: \"signAndSendTransaction\",\n                  params: {\n                    message: transaction\n                  }\n                });\n\n              case 2:\n                _yield$this$provider$ = _context2.sent;\n                signature = _yield$this$provider$.signature;\n                return _context2.abrupt(\"return\", {\n                  signature: signature\n                });\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function signAndSendTransaction(_x) {\n        return _signAndSendTransaction.apply(this, arguments);\n      }\n\n      return signAndSendTransaction;\n    }()\n  }, {\n    key: \"signTransaction\",\n    value: function () {\n      var _signTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(transaction) {\n        var signedTransaction;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.provider.request({\n                  method: \"signTransaction\",\n                  params: {\n                    message: transaction\n                  }\n                });\n\n              case 2:\n                signedTransaction = _context3.sent;\n                return _context3.abrupt(\"return\", signedTransaction);\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function signTransaction(_x2) {\n        return _signTransaction.apply(this, arguments);\n      }\n\n      return signTransaction;\n    }()\n  }, {\n    key: \"signAllTransactions\",\n    value: function () {\n      var _signAllTransactions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(transactions) {\n        var signedTransactions;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.provider.request({\n                  method: \"signAllTransactions\",\n                  params: {\n                    message: transactions\n                  }\n                });\n\n              case 2:\n                signedTransactions = _context4.sent;\n                return _context4.abrupt(\"return\", signedTransactions);\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function signAllTransactions(_x3) {\n        return _signAllTransactions.apply(this, arguments);\n      }\n\n      return signAllTransactions;\n    }()\n  }, {\n    key: \"signMessage\",\n    value: function () {\n      var _signMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(data) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.provider.request({\n                  method: \"signMessage\",\n                  params: {\n                    message: data\n                  }\n                });\n\n              case 2:\n                response = _context5.sent;\n                return _context5.abrupt(\"return\", response);\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function signMessage(_x4) {\n        return _signMessage.apply(this, arguments);\n      }\n\n      return signMessage;\n    }()\n  }, {\n    key: \"request\",\n    value: function () {\n      var _request = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(args) {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this.provider.request(args);\n\n              case 2:\n                result = _context6.sent;\n                return _context6.abrupt(\"return\", result);\n\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function request(_x5) {\n        return _request.apply(this, arguments);\n      }\n\n      return request;\n    }()\n  }]);\n\n  return SolanaWallet;\n}();\n\nexport { PhantomInjectedProvider, SlopeInjectedProxyProvider, SolanaPrivateKeyProvider, SolanaWallet, SolflareInjectedProvider, SolletInjectedProvider, TorusInjectedProvider };\n//# sourceMappingURL=solanaProvider.esm.js.map\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SHA2 = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nclass SHA2 extends utils_js_1.Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = (0, utils_js_1.createView)(this.buffer);\n    }\n    update(data) {\n        _assert_js_1.default.exists(this);\n        const { view, buffer, blockLen } = this;\n        data = (0, utils_js_1.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = (0, utils_js_1.createView)(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        _assert_js_1.default.exists(this);\n        _assert_js_1.default.output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = (0, utils_js_1.createView)(out);\n        this.get().forEach((v, i) => oview.setUint32(4 * i, v, isLE));\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\nexports.SHA2 = SHA2;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.add = exports.toBig = exports.split = exports.fromBig = void 0;\nconst U32_MASK64 = BigInt(2 ** 32 - 1);\nconst _32n = BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nexports.fromBig = fromBig;\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nexports.split = split;\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\nexports.toBig = toBig;\n// for Shift in [0, 32)\nconst shrSH = (h, l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (h, l) => l;\nconst rotr32L = (h, l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\nexports.add = add;\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig: exports.toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexports.default = u64;\n","/* The MIT License (MIT)\n *\n * Copyright 2015-2018 Peter A. Bigot\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n/**\n * Support for translating between Uint8Array instances and JavaScript\n * native types.\n *\n * {@link module:Layout~Layout|Layout} is the basis of a class\n * hierarchy that associates property names with sequences of encoded\n * bytes.\n *\n * Layouts are supported for these scalar (numeric) types:\n * * {@link module:Layout~UInt|Unsigned integers in little-endian\n *   format} with {@link module:Layout.u8|8-bit}, {@link\n *   module:Layout.u16|16-bit}, {@link module:Layout.u24|24-bit},\n *   {@link module:Layout.u32|32-bit}, {@link\n *   module:Layout.u40|40-bit}, and {@link module:Layout.u48|48-bit}\n *   representation ranges;\n * * {@link module:Layout~UIntBE|Unsigned integers in big-endian\n *   format} with {@link module:Layout.u16be|16-bit}, {@link\n *   module:Layout.u24be|24-bit}, {@link module:Layout.u32be|32-bit},\n *   {@link module:Layout.u40be|40-bit}, and {@link\n *   module:Layout.u48be|48-bit} representation ranges;\n * * {@link module:Layout~Int|Signed integers in little-endian\n *   format} with {@link module:Layout.s8|8-bit}, {@link\n *   module:Layout.s16|16-bit}, {@link module:Layout.s24|24-bit},\n *   {@link module:Layout.s32|32-bit}, {@link\n *   module:Layout.s40|40-bit}, and {@link module:Layout.s48|48-bit}\n *   representation ranges;\n * * {@link module:Layout~IntBE|Signed integers in big-endian format}\n *   with {@link module:Layout.s16be|16-bit}, {@link\n *   module:Layout.s24be|24-bit}, {@link module:Layout.s32be|32-bit},\n *   {@link module:Layout.s40be|40-bit}, and {@link\n *   module:Layout.s48be|48-bit} representation ranges;\n * * 64-bit integral values that decode to an exact (if magnitude is\n *   less than 2^53) or nearby integral Number in {@link\n *   module:Layout.nu64|unsigned little-endian}, {@link\n *   module:Layout.nu64be|unsigned big-endian}, {@link\n *   module:Layout.ns64|signed little-endian}, and {@link\n *   module:Layout.ns64be|unsigned big-endian} encodings;\n * * 32-bit floating point values with {@link\n *   module:Layout.f32|little-endian} and {@link\n *   module:Layout.f32be|big-endian} representations;\n * * 64-bit floating point values with {@link\n *   module:Layout.f64|little-endian} and {@link\n *   module:Layout.f64be|big-endian} representations;\n * * {@link module:Layout.const|Constants} that take no space in the\n *   encoded expression.\n *\n * and for these aggregate types:\n * * {@link module:Layout.seq|Sequence}s of instances of a {@link\n *   module:Layout~Layout|Layout}, with JavaScript representation as\n *   an Array and constant or data-dependent {@link\n *   module:Layout~Sequence#count|length};\n * * {@link module:Layout.struct|Structure}s that aggregate a\n *   heterogeneous sequence of {@link module:Layout~Layout|Layout}\n *   instances, with JavaScript representation as an Object;\n * * {@link module:Layout.union|Union}s that support multiple {@link\n *   module:Layout~VariantLayout|variant layouts} over a fixed\n *   (padded) or variable (not padded) span of bytes, using an\n *   unsigned integer at the start of the data or a separate {@link\n *   module:Layout.unionLayoutDiscriminator|layout element} to\n *   determine which layout to use when interpreting the buffer\n *   contents;\n * * {@link module:Layout.bits|BitStructure}s that contain a sequence\n *   of individual {@link\n *   module:Layout~BitStructure#addField|BitField}s packed into an 8,\n *   16, 24, or 32-bit unsigned integer starting at the least- or\n *   most-significant bit;\n * * {@link module:Layout.cstr|C strings} of varying length;\n * * {@link module:Layout.blob|Blobs} of fixed- or variable-{@link\n *   module:Layout~Blob#length|length} raw data.\n *\n * All {@link module:Layout~Layout|Layout} instances are immutable\n * after construction, to prevent internal state from becoming\n * inconsistent.\n *\n * @local Layout\n * @local ExternalLayout\n * @local GreedyCount\n * @local OffsetLayout\n * @local UInt\n * @local UIntBE\n * @local Int\n * @local IntBE\n * @local NearUInt64\n * @local NearUInt64BE\n * @local NearInt64\n * @local NearInt64BE\n * @local Float\n * @local FloatBE\n * @local Double\n * @local DoubleBE\n * @local Sequence\n * @local Structure\n * @local UnionDiscriminator\n * @local UnionLayoutDiscriminator\n * @local Union\n * @local VariantLayout\n * @local BitStructure\n * @local BitField\n * @local Boolean\n * @local Blob\n * @local CString\n * @local Constant\n * @local bindConstructorLayout\n * @module Layout\n * @license MIT\n * @author Peter A. Bigot\n * @see {@link https://github.com/pabigot/buffer-layout|buffer-layout on GitHub}\n */\n'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.s16 = exports.s8 = exports.nu64be = exports.u48be = exports.u40be = exports.u32be = exports.u24be = exports.u16be = exports.nu64 = exports.u48 = exports.u40 = exports.u32 = exports.u24 = exports.u16 = exports.u8 = exports.offset = exports.greedy = exports.Constant = exports.UTF8 = exports.CString = exports.Blob = exports.Boolean = exports.BitField = exports.BitStructure = exports.VariantLayout = exports.Union = exports.UnionLayoutDiscriminator = exports.UnionDiscriminator = exports.Structure = exports.Sequence = exports.DoubleBE = exports.Double = exports.FloatBE = exports.Float = exports.NearInt64BE = exports.NearInt64 = exports.NearUInt64BE = exports.NearUInt64 = exports.IntBE = exports.Int = exports.UIntBE = exports.UInt = exports.OffsetLayout = exports.GreedyCount = exports.ExternalLayout = exports.bindConstructorLayout = exports.nameWithProperty = exports.Layout = exports.uint8ArrayToBuffer = exports.checkUint8Array = void 0;\nexports.constant = exports.utf8 = exports.cstr = exports.blob = exports.unionLayoutDiscriminator = exports.union = exports.seq = exports.bits = exports.struct = exports.f64be = exports.f64 = exports.f32be = exports.f32 = exports.ns64be = exports.s48be = exports.s40be = exports.s32be = exports.s24be = exports.s16be = exports.ns64 = exports.s48 = exports.s40 = exports.s32 = exports.s24 = void 0;\nconst buffer_1 = require(\"buffer\");\n/* Check if a value is a Uint8Array.\n *\n * @ignore */\nfunction checkUint8Array(b) {\n    if (!(b instanceof Uint8Array)) {\n        throw new TypeError('b must be a Uint8Array');\n    }\n}\nexports.checkUint8Array = checkUint8Array;\n/* Create a Buffer instance from a Uint8Array.\n *\n * @ignore */\nfunction uint8ArrayToBuffer(b) {\n    checkUint8Array(b);\n    return buffer_1.Buffer.from(b.buffer, b.byteOffset, b.length);\n}\nexports.uint8ArrayToBuffer = uint8ArrayToBuffer;\n/**\n * Base class for layout objects.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support the {@link\n * Layout#encode|encode} or {@link Layout#decode|decode} functions.\n *\n * @param {Number} span - Initializer for {@link Layout#span|span}.  The\n * parameter must be an integer; a negative value signifies that the\n * span is {@link Layout#getSpan|value-specific}.\n *\n * @param {string} [property] - Initializer for {@link\n * Layout#property|property}.\n *\n * @abstract\n */\nclass Layout {\n    constructor(span, property) {\n        if (!Number.isInteger(span)) {\n            throw new TypeError('span must be an integer');\n        }\n        /** The span of the layout in bytes.\n         *\n         * Positive values are generally expected.\n         *\n         * Zero will only appear in {@link Constant}s and in {@link\n         * Sequence}s where the {@link Sequence#count|count} is zero.\n         *\n         * A negative value indicates that the span is value-specific, and\n         * must be obtained using {@link Layout#getSpan|getSpan}. */\n        this.span = span;\n        /** The property name used when this layout is represented in an\n         * Object.\n         *\n         * Used only for layouts that {@link Layout#decode|decode} to Object\n         * instances.  If left undefined the span of the unnamed layout will\n         * be treated as padding: it will not be mutated by {@link\n         * Layout#encode|encode} nor represented as a property in the\n         * decoded Object. */\n        this.property = property;\n    }\n    /** Function to create an Object into which decoded properties will\n     * be written.\n     *\n     * Used only for layouts that {@link Layout#decode|decode} to Object\n     * instances, which means:\n     * * {@link Structure}\n     * * {@link Union}\n     * * {@link VariantLayout}\n     * * {@link BitStructure}\n     *\n     * If left undefined the JavaScript representation of these layouts\n     * will be Object instances.\n     *\n     * See {@link bindConstructorLayout}.\n     */\n    makeDestinationObject() {\n        return {};\n    }\n    /**\n     * Calculate the span of a specific instance of a layout.\n     *\n     * @param {Uint8Array} b - the buffer that contains an encoded instance.\n     *\n     * @param {Number} [offset] - the offset at which the encoded instance\n     * starts.  If absent a zero offset is inferred.\n     *\n     * @return {Number} - the number of bytes covered by the layout\n     * instance.  If this method is not overridden in a subclass the\n     * definition-time constant {@link Layout#span|span} will be\n     * returned.\n     *\n     * @throws {RangeError} - if the length of the value cannot be\n     * determined.\n     */\n    getSpan(b, offset) {\n        if (0 > this.span) {\n            throw new RangeError('indeterminate span');\n        }\n        return this.span;\n    }\n    /**\n     * Replicate the layout using a new property.\n     *\n     * This function must be used to get a structurally-equivalent layout\n     * with a different name since all {@link Layout} instances are\n     * immutable.\n     *\n     * **NOTE** This is a shallow copy.  All fields except {@link\n     * Layout#property|property} are strictly equal to the origin layout.\n     *\n     * @param {String} property - the value for {@link\n     * Layout#property|property} in the replica.\n     *\n     * @returns {Layout} - the copy with {@link Layout#property|property}\n     * set to `property`.\n     */\n    replicate(property) {\n        const rv = Object.create(this.constructor.prototype);\n        Object.assign(rv, this);\n        rv.property = property;\n        return rv;\n    }\n    /**\n     * Create an object from layout properties and an array of values.\n     *\n     * **NOTE** This function returns `undefined` if invoked on a layout\n     * that does not return its value as an Object.  Objects are\n     * returned for things that are a {@link Structure}, which includes\n     * {@link VariantLayout|variant layouts} if they are structures, and\n     * excludes {@link Union}s.  If you want this feature for a union\n     * you must use {@link Union.getVariant|getVariant} to select the\n     * desired layout.\n     *\n     * @param {Array} values - an array of values that correspond to the\n     * default order for properties.  As with {@link Layout#decode|decode}\n     * layout elements that have no property name are skipped when\n     * iterating over the array values.  Only the top-level properties are\n     * assigned; arguments are not assigned to properties of contained\n     * layouts.  Any unused values are ignored.\n     *\n     * @return {(Object|undefined)}\n     */\n    fromArray(values) {\n        return undefined;\n    }\n}\nexports.Layout = Layout;\n/* Provide text that carries a name (such as for a function that will\n * be throwing an error) annotated with the property of a given layout\n * (such as one for which the value was unacceptable).\n *\n * @ignore */\nfunction nameWithProperty(name, lo) {\n    if (lo.property) {\n        return name + '[' + lo.property + ']';\n    }\n    return name;\n}\nexports.nameWithProperty = nameWithProperty;\n/**\n * Augment a class so that instances can be encoded/decoded using a\n * given layout.\n *\n * Calling this function couples `Class` with `layout` in several ways:\n *\n * * `Class.layout_` becomes a static member property equal to `layout`;\n * * `layout.boundConstructor_` becomes a static member property equal\n *    to `Class`;\n * * The {@link Layout#makeDestinationObject|makeDestinationObject()}\n *   property of `layout` is set to a function that returns a `new\n *   Class()`;\n * * `Class.decode(b, offset)` becomes a static member function that\n *   delegates to {@link Layout#decode|layout.decode}.  The\n *   synthesized function may be captured and extended.\n * * `Class.prototype.encode(b, offset)` provides an instance member\n *   function that delegates to {@link Layout#encode|layout.encode}\n *   with `src` set to `this`.  The synthesized function may be\n *   captured and extended, but when the extension is invoked `this`\n *   must be explicitly bound to the instance.\n *\n * @param {class} Class - a JavaScript class with a nullary\n * constructor.\n *\n * @param {Layout} layout - the {@link Layout} instance used to encode\n * instances of `Class`.\n */\n// `Class` must be a constructor Function, but the assignment of a `layout_` property to it makes it difficult to type\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction bindConstructorLayout(Class, layout) {\n    if ('function' !== typeof Class) {\n        throw new TypeError('Class must be constructor');\n    }\n    if (Object.prototype.hasOwnProperty.call(Class, 'layout_')) {\n        throw new Error('Class is already bound to a layout');\n    }\n    if (!(layout && (layout instanceof Layout))) {\n        throw new TypeError('layout must be a Layout');\n    }\n    if (Object.prototype.hasOwnProperty.call(layout, 'boundConstructor_')) {\n        throw new Error('layout is already bound to a constructor');\n    }\n    Class.layout_ = layout;\n    layout.boundConstructor_ = Class;\n    layout.makeDestinationObject = (() => new Class());\n    Object.defineProperty(Class.prototype, 'encode', {\n        value(b, offset) {\n            return layout.encode(this, b, offset);\n        },\n        writable: true,\n    });\n    Object.defineProperty(Class, 'decode', {\n        value(b, offset) {\n            return layout.decode(b, offset);\n        },\n        writable: true,\n    });\n}\nexports.bindConstructorLayout = bindConstructorLayout;\n/**\n * An object that behaves like a layout but does not consume space\n * within its containing layout.\n *\n * This is primarily used to obtain metadata about a member, such as a\n * {@link OffsetLayout} that can provide data about a {@link\n * Layout#getSpan|value-specific span}.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support {@link\n * ExternalLayout#isCount|isCount} or other {@link Layout} functions.\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @abstract\n * @augments {Layout}\n */\nclass ExternalLayout extends Layout {\n    /**\n     * Return `true` iff the external layout decodes to an unsigned\n     * integer layout.\n     *\n     * In that case it can be used as the source of {@link\n     * Sequence#count|Sequence counts}, {@link Blob#length|Blob lengths},\n     * or as {@link UnionLayoutDiscriminator#layout|external union\n     * discriminators}.\n     *\n     * @abstract\n     */\n    isCount() {\n        throw new Error('ExternalLayout is abstract');\n    }\n}\nexports.ExternalLayout = ExternalLayout;\n/**\n * An {@link ExternalLayout} that determines its {@link\n * Layout#decode|value} based on offset into and length of the buffer\n * on which it is invoked.\n *\n * *Factory*: {@link module:Layout.greedy|greedy}\n *\n * @param {Number} [elementSpan] - initializer for {@link\n * GreedyCount#elementSpan|elementSpan}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {ExternalLayout}\n */\nclass GreedyCount extends ExternalLayout {\n    constructor(elementSpan = 1, property) {\n        if ((!Number.isInteger(elementSpan)) || (0 >= elementSpan)) {\n            throw new TypeError('elementSpan must be a (positive) integer');\n        }\n        super(-1, property);\n        /** The layout for individual elements of the sequence.  The value\n         * must be a positive integer.  If not provided, the value will be\n         * 1. */\n        this.elementSpan = elementSpan;\n    }\n    /** @override */\n    isCount() {\n        return true;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        checkUint8Array(b);\n        const rem = b.length - offset;\n        return Math.floor(rem / this.elementSpan);\n    }\n    /** @override */\n    encode(src, b, offset) {\n        return 0;\n    }\n}\nexports.GreedyCount = GreedyCount;\n/**\n * An {@link ExternalLayout} that supports accessing a {@link Layout}\n * at a fixed offset from the start of another Layout.  The offset may\n * be before, within, or after the base layout.\n *\n * *Factory*: {@link module:Layout.offset|offset}\n *\n * @param {Layout} layout - initializer for {@link\n * OffsetLayout#layout|layout}, modulo `property`.\n *\n * @param {Number} [offset] - Initializes {@link\n * OffsetLayout#offset|offset}.  Defaults to zero.\n *\n * @param {string} [property] - Optional new property name for a\n * {@link Layout#replicate| replica} of `layout` to be used as {@link\n * OffsetLayout#layout|layout}.  If not provided the `layout` is used\n * unchanged.\n *\n * @augments {Layout}\n */\nclass OffsetLayout extends ExternalLayout {\n    constructor(layout, offset = 0, property) {\n        if (!(layout instanceof Layout)) {\n            throw new TypeError('layout must be a Layout');\n        }\n        if (!Number.isInteger(offset)) {\n            throw new TypeError('offset must be integer or undefined');\n        }\n        super(layout.span, property || layout.property);\n        /** The subordinated layout. */\n        this.layout = layout;\n        /** The location of {@link OffsetLayout#layout} relative to the\n         * start of another layout.\n         *\n         * The value may be positive or negative, but an error will thrown\n         * if at the point of use it goes outside the span of the Uint8Array\n         * being accessed.  */\n        this.offset = offset;\n    }\n    /** @override */\n    isCount() {\n        return ((this.layout instanceof UInt)\n            || (this.layout instanceof UIntBE));\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return this.layout.decode(b, offset + this.offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        return this.layout.encode(src, b, offset + this.offset);\n    }\n}\nexports.OffsetLayout = OffsetLayout;\n/**\n * Represent an unsigned integer in little-endian format.\n *\n * *Factory*: {@link module:Layout.u8|u8}, {@link\n *  module:Layout.u16|u16}, {@link module:Layout.u24|u24}, {@link\n *  module:Layout.u32|u32}, {@link module:Layout.u40|u40}, {@link\n *  module:Layout.u48|u48}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass UInt extends Layout {\n    constructor(span, property) {\n        super(span, property);\n        if (6 < this.span) {\n            throw new RangeError('span must not exceed 6 bytes');\n        }\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readUIntLE(offset, this.span);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeUIntLE(src, offset, this.span);\n        return this.span;\n    }\n}\nexports.UInt = UInt;\n/**\n * Represent an unsigned integer in big-endian format.\n *\n * *Factory*: {@link module:Layout.u8be|u8be}, {@link\n * module:Layout.u16be|u16be}, {@link module:Layout.u24be|u24be},\n * {@link module:Layout.u32be|u32be}, {@link\n * module:Layout.u40be|u40be}, {@link module:Layout.u48be|u48be}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass UIntBE extends Layout {\n    constructor(span, property) {\n        super(span, property);\n        if (6 < this.span) {\n            throw new RangeError('span must not exceed 6 bytes');\n        }\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readUIntBE(offset, this.span);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeUIntBE(src, offset, this.span);\n        return this.span;\n    }\n}\nexports.UIntBE = UIntBE;\n/**\n * Represent a signed integer in little-endian format.\n *\n * *Factory*: {@link module:Layout.s8|s8}, {@link\n *  module:Layout.s16|s16}, {@link module:Layout.s24|s24}, {@link\n *  module:Layout.s32|s32}, {@link module:Layout.s40|s40}, {@link\n *  module:Layout.s48|s48}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Int extends Layout {\n    constructor(span, property) {\n        super(span, property);\n        if (6 < this.span) {\n            throw new RangeError('span must not exceed 6 bytes');\n        }\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readIntLE(offset, this.span);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeIntLE(src, offset, this.span);\n        return this.span;\n    }\n}\nexports.Int = Int;\n/**\n * Represent a signed integer in big-endian format.\n *\n * *Factory*: {@link module:Layout.s8be|s8be}, {@link\n * module:Layout.s16be|s16be}, {@link module:Layout.s24be|s24be},\n * {@link module:Layout.s32be|s32be}, {@link\n * module:Layout.s40be|s40be}, {@link module:Layout.s48be|s48be}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass IntBE extends Layout {\n    constructor(span, property) {\n        super(span, property);\n        if (6 < this.span) {\n            throw new RangeError('span must not exceed 6 bytes');\n        }\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readIntBE(offset, this.span);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeIntBE(src, offset, this.span);\n        return this.span;\n    }\n}\nexports.IntBE = IntBE;\nconst V2E32 = Math.pow(2, 32);\n/* True modulus high and low 32-bit words, where low word is always\n * non-negative. */\nfunction divmodInt64(src) {\n    const hi32 = Math.floor(src / V2E32);\n    const lo32 = src - (hi32 * V2E32);\n    return { hi32, lo32 };\n}\n/* Reconstruct Number from quotient and non-negative remainder */\nfunction roundedInt64(hi32, lo32) {\n    return hi32 * V2E32 + lo32;\n}\n/**\n * Represent an unsigned 64-bit integer in little-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.nu64|nu64}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearUInt64 extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const buffer = uint8ArrayToBuffer(b);\n        const lo32 = buffer.readUInt32LE(offset);\n        const hi32 = buffer.readUInt32LE(offset + 4);\n        return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        const split = divmodInt64(src);\n        const buffer = uint8ArrayToBuffer(b);\n        buffer.writeUInt32LE(split.lo32, offset);\n        buffer.writeUInt32LE(split.hi32, offset + 4);\n        return 8;\n    }\n}\nexports.NearUInt64 = NearUInt64;\n/**\n * Represent an unsigned 64-bit integer in big-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.nu64be|nu64be}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearUInt64BE extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const buffer = uint8ArrayToBuffer(b);\n        const hi32 = buffer.readUInt32BE(offset);\n        const lo32 = buffer.readUInt32BE(offset + 4);\n        return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        const split = divmodInt64(src);\n        const buffer = uint8ArrayToBuffer(b);\n        buffer.writeUInt32BE(split.hi32, offset);\n        buffer.writeUInt32BE(split.lo32, offset + 4);\n        return 8;\n    }\n}\nexports.NearUInt64BE = NearUInt64BE;\n/**\n * Represent a signed 64-bit integer in little-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.ns64|ns64}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearInt64 extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const buffer = uint8ArrayToBuffer(b);\n        const lo32 = buffer.readUInt32LE(offset);\n        const hi32 = buffer.readInt32LE(offset + 4);\n        return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        const split = divmodInt64(src);\n        const buffer = uint8ArrayToBuffer(b);\n        buffer.writeUInt32LE(split.lo32, offset);\n        buffer.writeInt32LE(split.hi32, offset + 4);\n        return 8;\n    }\n}\nexports.NearInt64 = NearInt64;\n/**\n * Represent a signed 64-bit integer in big-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.ns64be|ns64be}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearInt64BE extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const buffer = uint8ArrayToBuffer(b);\n        const hi32 = buffer.readInt32BE(offset);\n        const lo32 = buffer.readUInt32BE(offset + 4);\n        return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        const split = divmodInt64(src);\n        const buffer = uint8ArrayToBuffer(b);\n        buffer.writeInt32BE(split.hi32, offset);\n        buffer.writeUInt32BE(split.lo32, offset + 4);\n        return 8;\n    }\n}\nexports.NearInt64BE = NearInt64BE;\n/**\n * Represent a 32-bit floating point number in little-endian format.\n *\n * *Factory*: {@link module:Layout.f32|f32}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Float extends Layout {\n    constructor(property) {\n        super(4, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readFloatLE(offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeFloatLE(src, offset);\n        return 4;\n    }\n}\nexports.Float = Float;\n/**\n * Represent a 32-bit floating point number in big-endian format.\n *\n * *Factory*: {@link module:Layout.f32be|f32be}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass FloatBE extends Layout {\n    constructor(property) {\n        super(4, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readFloatBE(offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeFloatBE(src, offset);\n        return 4;\n    }\n}\nexports.FloatBE = FloatBE;\n/**\n * Represent a 64-bit floating point number in little-endian format.\n *\n * *Factory*: {@link module:Layout.f64|f64}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Double extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readDoubleLE(offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeDoubleLE(src, offset);\n        return 8;\n    }\n}\nexports.Double = Double;\n/**\n * Represent a 64-bit floating point number in big-endian format.\n *\n * *Factory*: {@link module:Layout.f64be|f64be}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass DoubleBE extends Layout {\n    constructor(property) {\n        super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        return uint8ArrayToBuffer(b).readDoubleBE(offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        uint8ArrayToBuffer(b).writeDoubleBE(src, offset);\n        return 8;\n    }\n}\nexports.DoubleBE = DoubleBE;\n/**\n * Represent a contiguous sequence of a specific layout as an Array.\n *\n * *Factory*: {@link module:Layout.seq|seq}\n *\n * @param {Layout} elementLayout - initializer for {@link\n * Sequence#elementLayout|elementLayout}.\n *\n * @param {(Number|ExternalLayout)} count - initializer for {@link\n * Sequence#count|count}.  The parameter must be either a positive\n * integer or an instance of {@link ExternalLayout}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Sequence extends Layout {\n    constructor(elementLayout, count, property) {\n        if (!(elementLayout instanceof Layout)) {\n            throw new TypeError('elementLayout must be a Layout');\n        }\n        if (!(((count instanceof ExternalLayout) && count.isCount())\n            || (Number.isInteger(count) && (0 <= count)))) {\n            throw new TypeError('count must be non-negative integer '\n                + 'or an unsigned integer ExternalLayout');\n        }\n        let span = -1;\n        if ((!(count instanceof ExternalLayout))\n            && (0 < elementLayout.span)) {\n            span = count * elementLayout.span;\n        }\n        super(span, property);\n        /** The layout for individual elements of the sequence. */\n        this.elementLayout = elementLayout;\n        /** The number of elements in the sequence.\n         *\n         * This will be either a non-negative integer or an instance of\n         * {@link ExternalLayout} for which {@link\n         * ExternalLayout#isCount|isCount()} is `true`. */\n        this.count = count;\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        if (0 <= this.span) {\n            return this.span;\n        }\n        let span = 0;\n        let count = this.count;\n        if (count instanceof ExternalLayout) {\n            count = count.decode(b, offset);\n        }\n        if (0 < this.elementLayout.span) {\n            span = count * this.elementLayout.span;\n        }\n        else {\n            let idx = 0;\n            while (idx < count) {\n                span += this.elementLayout.getSpan(b, offset + span);\n                ++idx;\n            }\n        }\n        return span;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const rv = [];\n        let i = 0;\n        let count = this.count;\n        if (count instanceof ExternalLayout) {\n            count = count.decode(b, offset);\n        }\n        while (i < count) {\n            rv.push(this.elementLayout.decode(b, offset));\n            offset += this.elementLayout.getSpan(b, offset);\n            i += 1;\n        }\n        return rv;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Sequence}.\n     *\n     * **NOTE** If `src` is shorter than {@link Sequence#count|count} then\n     * the unused space in the buffer is left unchanged.  If `src` is\n     * longer than {@link Sequence#count|count} the unneeded elements are\n     * ignored.\n     *\n     * **NOTE** If {@link Layout#count|count} is an instance of {@link\n     * ExternalLayout} then the length of `src` will be encoded as the\n     * count after `src` is encoded. */\n    encode(src, b, offset = 0) {\n        const elo = this.elementLayout;\n        const span = src.reduce((span, v) => {\n            return span + elo.encode(v, b, offset + span);\n        }, 0);\n        if (this.count instanceof ExternalLayout) {\n            this.count.encode(src.length, b, offset);\n        }\n        return span;\n    }\n}\nexports.Sequence = Sequence;\n/**\n * Represent a contiguous sequence of arbitrary layout elements as an\n * Object.\n *\n * *Factory*: {@link module:Layout.struct|struct}\n *\n * **NOTE** The {@link Layout#span|span} of the structure is variable\n * if any layout in {@link Structure#fields|fields} has a variable\n * span.  When {@link Layout#encode|encoding} we must have a value for\n * all variable-length fields, or we wouldn't be able to figure out\n * how much space to use for storage.  We can only identify the value\n * for a field when it has a {@link Layout#property|property}.  As\n * such, although a structure may contain both unnamed fields and\n * variable-length fields, it cannot contain an unnamed\n * variable-length field.\n *\n * @param {Layout[]} fields - initializer for {@link\n * Structure#fields|fields}.  An error is raised if this contains a\n * variable-length field for which a {@link Layout#property|property}\n * is not defined.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @param {Boolean} [decodePrefixes] - initializer for {@link\n * Structure#decodePrefixes|property}.\n *\n * @throws {Error} - if `fields` contains an unnamed variable-length\n * layout.\n *\n * @augments {Layout}\n */\nclass Structure extends Layout {\n    constructor(fields, property, decodePrefixes) {\n        if (!(Array.isArray(fields)\n            && fields.reduce((acc, v) => acc && (v instanceof Layout), true))) {\n            throw new TypeError('fields must be array of Layout instances');\n        }\n        if (('boolean' === typeof property)\n            && (undefined === decodePrefixes)) {\n            decodePrefixes = property;\n            property = undefined;\n        }\n        /* Verify absence of unnamed variable-length fields. */\n        for (const fd of fields) {\n            if ((0 > fd.span)\n                && (undefined === fd.property)) {\n                throw new Error('fields cannot contain unnamed variable-length layout');\n            }\n        }\n        let span = -1;\n        try {\n            span = fields.reduce((span, fd) => span + fd.getSpan(), 0);\n        }\n        catch (e) {\n            // ignore error\n        }\n        super(span, property);\n        /** The sequence of {@link Layout} values that comprise the\n         * structure.\n         *\n         * The individual elements need not be the same type, and may be\n         * either scalar or aggregate layouts.  If a member layout leaves\n         * its {@link Layout#property|property} undefined the\n         * corresponding region of the buffer associated with the element\n         * will not be mutated.\n         *\n         * @type {Layout[]} */\n        this.fields = fields;\n        /** Control behavior of {@link Layout#decode|decode()} given short\n         * buffers.\n         *\n         * In some situations a structure many be extended with additional\n         * fields over time, with older installations providing only a\n         * prefix of the full structure.  If this property is `true`\n         * decoding will accept those buffers and leave subsequent fields\n         * undefined, as long as the buffer ends at a field boundary.\n         * Defaults to `false`. */\n        this.decodePrefixes = !!decodePrefixes;\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        if (0 <= this.span) {\n            return this.span;\n        }\n        let span = 0;\n        try {\n            span = this.fields.reduce((span, fd) => {\n                const fsp = fd.getSpan(b, offset);\n                offset += fsp;\n                return span + fsp;\n            }, 0);\n        }\n        catch (e) {\n            throw new RangeError('indeterminate span');\n        }\n        return span;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        checkUint8Array(b);\n        const dest = this.makeDestinationObject();\n        for (const fd of this.fields) {\n            if (undefined !== fd.property) {\n                dest[fd.property] = fd.decode(b, offset);\n            }\n            offset += fd.getSpan(b, offset);\n            if (this.decodePrefixes\n                && (b.length === offset)) {\n                break;\n            }\n        }\n        return dest;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Structure}.\n     *\n     * If `src` is missing a property for a member with a defined {@link\n     * Layout#property|property} the corresponding region of the buffer is\n     * left unmodified. */\n    encode(src, b, offset = 0) {\n        const firstOffset = offset;\n        let lastOffset = 0;\n        let lastWrote = 0;\n        for (const fd of this.fields) {\n            let span = fd.span;\n            lastWrote = (0 < span) ? span : 0;\n            if (undefined !== fd.property) {\n                const fv = src[fd.property];\n                if (undefined !== fv) {\n                    lastWrote = fd.encode(fv, b, offset);\n                    if (0 > span) {\n                        /* Read the as-encoded span, which is not necessarily the\n                         * same as what we wrote. */\n                        span = fd.getSpan(b, offset);\n                    }\n                }\n            }\n            lastOffset = offset;\n            offset += span;\n        }\n        /* Use (lastOffset + lastWrote) instead of offset because the last\n         * item may have had a dynamic length and we don't want to include\n         * the padding between it and the end of the space reserved for\n         * it. */\n        return (lastOffset + lastWrote) - firstOffset;\n    }\n    /** @override */\n    fromArray(values) {\n        const dest = this.makeDestinationObject();\n        for (const fd of this.fields) {\n            if ((undefined !== fd.property)\n                && (0 < values.length)) {\n                dest[fd.property] = values.shift();\n            }\n        }\n        return dest;\n    }\n    /**\n     * Get access to the layout of a given property.\n     *\n     * @param {String} property - the structure member of interest.\n     *\n     * @return {Layout} - the layout associated with `property`, or\n     * undefined if there is no such property.\n     */\n    layoutFor(property) {\n        if ('string' !== typeof property) {\n            throw new TypeError('property must be string');\n        }\n        for (const fd of this.fields) {\n            if (fd.property === property) {\n                return fd;\n            }\n        }\n        return undefined;\n    }\n    /**\n     * Get the offset of a structure member.\n     *\n     * @param {String} property - the structure member of interest.\n     *\n     * @return {Number} - the offset in bytes to the start of `property`\n     * within the structure, or undefined if `property` is not a field\n     * within the structure.  If the property is a member but follows a\n     * variable-length structure member a negative number will be\n     * returned.\n     */\n    offsetOf(property) {\n        if ('string' !== typeof property) {\n            throw new TypeError('property must be string');\n        }\n        let offset = 0;\n        for (const fd of this.fields) {\n            if (fd.property === property) {\n                return offset;\n            }\n            if (0 > fd.span) {\n                offset = -1;\n            }\n            else if (0 <= offset) {\n                offset += fd.span;\n            }\n        }\n        return undefined;\n    }\n}\nexports.Structure = Structure;\n/**\n * An object that can provide a {@link\n * Union#discriminator|discriminator} API for {@link Union}.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support the {@link\n * UnionDiscriminator#encode|encode} or {@link\n * UnionDiscriminator#decode|decode} functions.\n *\n * @param {string} [property] - Default for {@link\n * UnionDiscriminator#property|property}.\n *\n * @abstract\n */\nclass UnionDiscriminator {\n    constructor(property) {\n        /** The {@link Layout#property|property} to be used when the\n         * discriminator is referenced in isolation (generally when {@link\n         * Union#decode|Union decode} cannot delegate to a specific\n         * variant). */\n        this.property = property;\n    }\n    /** Analog to {@link Layout#decode|Layout decode} for union discriminators.\n     *\n     * The implementation of this method need not reference the buffer if\n     * variant information is available through other means. */\n    decode(b, offset) {\n        throw new Error('UnionDiscriminator is abstract');\n    }\n    /** Analog to {@link Layout#decode|Layout encode} for union discriminators.\n     *\n     * The implementation of this method need not store the value if\n     * variant information is maintained through other means. */\n    encode(src, b, offset) {\n        throw new Error('UnionDiscriminator is abstract');\n    }\n}\nexports.UnionDiscriminator = UnionDiscriminator;\n/**\n * An object that can provide a {@link\n * UnionDiscriminator|discriminator API} for {@link Union} using an\n * unsigned integral {@link Layout} instance located either inside or\n * outside the union.\n *\n * @param {ExternalLayout} layout - initializes {@link\n * UnionLayoutDiscriminator#layout|layout}.  Must satisfy {@link\n * ExternalLayout#isCount|isCount()}.\n *\n * @param {string} [property] - Default for {@link\n * UnionDiscriminator#property|property}, superseding the property\n * from `layout`, but defaulting to `variant` if neither `property`\n * nor layout provide a property name.\n *\n * @augments {UnionDiscriminator}\n */\nclass UnionLayoutDiscriminator extends UnionDiscriminator {\n    constructor(layout, property) {\n        if (!((layout instanceof ExternalLayout)\n            && layout.isCount())) {\n            throw new TypeError('layout must be an unsigned integer ExternalLayout');\n        }\n        super(property || layout.property || 'variant');\n        /** The {@link ExternalLayout} used to access the discriminator\n         * value. */\n        this.layout = layout;\n    }\n    /** Delegate decoding to {@link UnionLayoutDiscriminator#layout|layout}. */\n    decode(b, offset) {\n        return this.layout.decode(b, offset);\n    }\n    /** Delegate encoding to {@link UnionLayoutDiscriminator#layout|layout}. */\n    encode(src, b, offset) {\n        return this.layout.encode(src, b, offset);\n    }\n}\nexports.UnionLayoutDiscriminator = UnionLayoutDiscriminator;\n/**\n * Represent any number of span-compatible layouts.\n *\n * *Factory*: {@link module:Layout.union|union}\n *\n * If the union has a {@link Union#defaultLayout|default layout} that\n * layout must have a non-negative {@link Layout#span|span}.  The span\n * of a fixed-span union includes its {@link\n * Union#discriminator|discriminator} if the variant is a {@link\n * Union#usesPrefixDiscriminator|prefix of the union}, plus the span\n * of its {@link Union#defaultLayout|default layout}.\n *\n * If the union does not have a default layout then the encoded span\n * of the union depends on the encoded span of its variant (which may\n * be fixed or variable).\n *\n * {@link VariantLayout#layout|Variant layout}s are added through\n * {@link Union#addVariant|addVariant}.  If the union has a default\n * layout, the span of the {@link VariantLayout#layout|layout\n * contained by the variant} must not exceed the span of the {@link\n * Union#defaultLayout|default layout} (minus the span of a {@link\n * Union#usesPrefixDiscriminator|prefix disriminator}, if used).  The\n * span of the variant will equal the span of the union itself.\n *\n * The variant for a buffer can only be identified from the {@link\n * Union#discriminator|discriminator} {@link\n * UnionDiscriminator#property|property} (in the case of the {@link\n * Union#defaultLayout|default layout}), or by using {@link\n * Union#getVariant|getVariant} and examining the resulting {@link\n * VariantLayout} instance.\n *\n * A variant compatible with a JavaScript object can be identified\n * using {@link Union#getSourceVariant|getSourceVariant}.\n *\n * @param {(UnionDiscriminator|ExternalLayout|Layout)} discr - How to\n * identify the layout used to interpret the union contents.  The\n * parameter must be an instance of {@link UnionDiscriminator}, an\n * {@link ExternalLayout} that satisfies {@link\n * ExternalLayout#isCount|isCount()}, or {@link UInt} (or {@link\n * UIntBE}).  When a non-external layout element is passed the layout\n * appears at the start of the union.  In all cases the (synthesized)\n * {@link UnionDiscriminator} instance is recorded as {@link\n * Union#discriminator|discriminator}.\n *\n * @param {(Layout|null)} defaultLayout - initializer for {@link\n * Union#defaultLayout|defaultLayout}.  If absent defaults to `null`.\n * If `null` there is no default layout: the union has data-dependent\n * length and attempts to decode or encode unrecognized variants will\n * throw an exception.  A {@link Layout} instance must have a\n * non-negative {@link Layout#span|span}, and if it lacks a {@link\n * Layout#property|property} the {@link\n * Union#defaultLayout|defaultLayout} will be a {@link\n * Layout#replicate|replica} with property `content`.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Union extends Layout {\n    constructor(discr, defaultLayout, property) {\n        let discriminator;\n        if ((discr instanceof UInt)\n            || (discr instanceof UIntBE)) {\n            discriminator = new UnionLayoutDiscriminator(new OffsetLayout(discr));\n        }\n        else if ((discr instanceof ExternalLayout)\n            && discr.isCount()) {\n            discriminator = new UnionLayoutDiscriminator(discr);\n        }\n        else if (!(discr instanceof UnionDiscriminator)) {\n            throw new TypeError('discr must be a UnionDiscriminator '\n                + 'or an unsigned integer layout');\n        }\n        else {\n            discriminator = discr;\n        }\n        if (undefined === defaultLayout) {\n            defaultLayout = null;\n        }\n        if (!((null === defaultLayout)\n            || (defaultLayout instanceof Layout))) {\n            throw new TypeError('defaultLayout must be null or a Layout');\n        }\n        if (null !== defaultLayout) {\n            if (0 > defaultLayout.span) {\n                throw new Error('defaultLayout must have constant span');\n            }\n            if (undefined === defaultLayout.property) {\n                defaultLayout = defaultLayout.replicate('content');\n            }\n        }\n        /* The union span can be estimated only if there's a default\n         * layout.  The union spans its default layout, plus any prefix\n         * variant layout.  By construction both layouts, if present, have\n         * non-negative span. */\n        let span = -1;\n        if (defaultLayout) {\n            span = defaultLayout.span;\n            if ((0 <= span) && ((discr instanceof UInt)\n                || (discr instanceof UIntBE))) {\n                span += discriminator.layout.span;\n            }\n        }\n        super(span, property);\n        /** The interface for the discriminator value in isolation.\n         *\n         * This a {@link UnionDiscriminator} either passed to the\n         * constructor or synthesized from the `discr` constructor\n         * argument.  {@link\n         * Union#usesPrefixDiscriminator|usesPrefixDiscriminator} will be\n         * `true` iff the `discr` parameter was a non-offset {@link\n         * Layout} instance. */\n        this.discriminator = discriminator;\n        /** `true` if the {@link Union#discriminator|discriminator} is the\n         * first field in the union.\n         *\n         * If `false` the discriminator is obtained from somewhere\n         * else. */\n        this.usesPrefixDiscriminator = (discr instanceof UInt)\n            || (discr instanceof UIntBE);\n        /** The layout for non-discriminator content when the value of the\n         * discriminator is not recognized.\n         *\n         * This is the value passed to the constructor.  It is\n         * structurally equivalent to the second component of {@link\n         * Union#layout|layout} but may have a different property\n         * name. */\n        this.defaultLayout = defaultLayout;\n        /** A registry of allowed variants.\n         *\n         * The keys are unsigned integers which should be compatible with\n         * {@link Union.discriminator|discriminator}.  The property value\n         * is the corresponding {@link VariantLayout} instances assigned\n         * to this union by {@link Union#addVariant|addVariant}.\n         *\n         * **NOTE** The registry remains mutable so that variants can be\n         * {@link Union#addVariant|added} at any time.  Users should not\n         * manipulate the content of this property. */\n        this.registry = {};\n        /* Private variable used when invoking getSourceVariant */\n        let boundGetSourceVariant = this.defaultGetSourceVariant.bind(this);\n        /** Function to infer the variant selected by a source object.\n         *\n         * Defaults to {@link\n         * Union#defaultGetSourceVariant|defaultGetSourceVariant} but may\n         * be overridden using {@link\n         * Union#configGetSourceVariant|configGetSourceVariant}.\n         *\n         * @param {Object} src - as with {@link\n         * Union#defaultGetSourceVariant|defaultGetSourceVariant}.\n         *\n         * @returns {(undefined|VariantLayout)} The default variant\n         * (`undefined`) or first registered variant that uses a property\n         * available in `src`. */\n        this.getSourceVariant = function (src) {\n            return boundGetSourceVariant(src);\n        };\n        /** Function to override the implementation of {@link\n         * Union#getSourceVariant|getSourceVariant}.\n         *\n         * Use this if the desired variant cannot be identified using the\n         * algorithm of {@link\n         * Union#defaultGetSourceVariant|defaultGetSourceVariant}.\n         *\n         * **NOTE** The provided function will be invoked bound to this\n         * Union instance, providing local access to {@link\n         * Union#registry|registry}.\n         *\n         * @param {Function} gsv - a function that follows the API of\n         * {@link Union#defaultGetSourceVariant|defaultGetSourceVariant}. */\n        this.configGetSourceVariant = function (gsv) {\n            boundGetSourceVariant = gsv.bind(this);\n        };\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        if (0 <= this.span) {\n            return this.span;\n        }\n        /* Default layouts always have non-negative span, so we don't have\n         * one and we have to recognize the variant which will in turn\n         * determine the span. */\n        const vlo = this.getVariant(b, offset);\n        if (!vlo) {\n            throw new Error('unable to determine span for unrecognized variant');\n        }\n        return vlo.getSpan(b, offset);\n    }\n    /**\n     * Method to infer a registered Union variant compatible with `src`.\n     *\n     * The first satisfied rule in the following sequence defines the\n     * return value:\n     * * If `src` has properties matching the Union discriminator and\n     *   the default layout, `undefined` is returned regardless of the\n     *   value of the discriminator property (this ensures the default\n     *   layout will be used);\n     * * If `src` has a property matching the Union discriminator, the\n     *   value of the discriminator identifies a registered variant, and\n     *   either (a) the variant has no layout, or (b) `src` has the\n     *   variant's property, then the variant is returned (because the\n     *   source satisfies the constraints of the variant it identifies);\n     * * If `src` does not have a property matching the Union\n     *   discriminator, but does have a property matching a registered\n     *   variant, then the variant is returned (because the source\n     *   matches a variant without an explicit conflict);\n     * * An error is thrown (because we either can't identify a variant,\n     *   or we were explicitly told the variant but can't satisfy it).\n     *\n     * @param {Object} src - an object presumed to be compatible with\n     * the content of the Union.\n     *\n     * @return {(undefined|VariantLayout)} - as described above.\n     *\n     * @throws {Error} - if `src` cannot be associated with a default or\n     * registered variant.\n     */\n    defaultGetSourceVariant(src) {\n        if (Object.prototype.hasOwnProperty.call(src, this.discriminator.property)) {\n            if (this.defaultLayout && this.defaultLayout.property\n                && Object.prototype.hasOwnProperty.call(src, this.defaultLayout.property)) {\n                return undefined;\n            }\n            const vlo = this.registry[src[this.discriminator.property]];\n            if (vlo\n                && ((!vlo.layout)\n                    || (vlo.property && Object.prototype.hasOwnProperty.call(src, vlo.property)))) {\n                return vlo;\n            }\n        }\n        else {\n            for (const tag in this.registry) {\n                const vlo = this.registry[tag];\n                if (vlo.property && Object.prototype.hasOwnProperty.call(src, vlo.property)) {\n                    return vlo;\n                }\n            }\n        }\n        throw new Error('unable to infer src variant');\n    }\n    /** Implement {@link Layout#decode|decode} for {@link Union}.\n     *\n     * If the variant is {@link Union#addVariant|registered} the return\n     * value is an instance of that variant, with no explicit\n     * discriminator.  Otherwise the {@link Union#defaultLayout|default\n     * layout} is used to decode the content. */\n    decode(b, offset = 0) {\n        let dest;\n        const dlo = this.discriminator;\n        const discr = dlo.decode(b, offset);\n        const clo = this.registry[discr];\n        if (undefined === clo) {\n            const defaultLayout = this.defaultLayout;\n            let contentOffset = 0;\n            if (this.usesPrefixDiscriminator) {\n                contentOffset = dlo.layout.span;\n            }\n            dest = this.makeDestinationObject();\n            dest[dlo.property] = discr;\n            // defaultLayout.property can be undefined, but this is allowed by buffer-layout\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            dest[defaultLayout.property] = defaultLayout.decode(b, offset + contentOffset);\n        }\n        else {\n            dest = clo.decode(b, offset);\n        }\n        return dest;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Union}.\n     *\n     * This API assumes the `src` object is consistent with the union's\n     * {@link Union#defaultLayout|default layout}.  To encode variants\n     * use the appropriate variant-specific {@link VariantLayout#encode}\n     * method. */\n    encode(src, b, offset = 0) {\n        const vlo = this.getSourceVariant(src);\n        if (undefined === vlo) {\n            const dlo = this.discriminator;\n            // this.defaultLayout is not undefined when vlo is undefined\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const clo = this.defaultLayout;\n            let contentOffset = 0;\n            if (this.usesPrefixDiscriminator) {\n                contentOffset = dlo.layout.span;\n            }\n            dlo.encode(src[dlo.property], b, offset);\n            // clo.property is not undefined when vlo is undefined\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            return contentOffset + clo.encode(src[clo.property], b, offset + contentOffset);\n        }\n        return vlo.encode(src, b, offset);\n    }\n    /** Register a new variant structure within a union.  The newly\n     * created variant is returned.\n     *\n     * @param {Number} variant - initializer for {@link\n     * VariantLayout#variant|variant}.\n     *\n     * @param {Layout} layout - initializer for {@link\n     * VariantLayout#layout|layout}.\n     *\n     * @param {String} property - initializer for {@link\n     * Layout#property|property}.\n     *\n     * @return {VariantLayout} */\n    addVariant(variant, layout, property) {\n        const rv = new VariantLayout(this, variant, layout, property);\n        this.registry[variant] = rv;\n        return rv;\n    }\n    /**\n     * Get the layout associated with a registered variant.\n     *\n     * If `vb` does not produce a registered variant the function returns\n     * `undefined`.\n     *\n     * @param {(Number|Uint8Array)} vb - either the variant number, or a\n     * buffer from which the discriminator is to be read.\n     *\n     * @param {Number} offset - offset into `vb` for the start of the\n     * union.  Used only when `vb` is an instance of {Uint8Array}.\n     *\n     * @return {({VariantLayout}|undefined)}\n     */\n    getVariant(vb, offset = 0) {\n        let variant;\n        if (vb instanceof Uint8Array) {\n            variant = this.discriminator.decode(vb, offset);\n        }\n        else {\n            variant = vb;\n        }\n        return this.registry[variant];\n    }\n}\nexports.Union = Union;\n/**\n * Represent a specific variant within a containing union.\n *\n * **NOTE** The {@link Layout#span|span} of the variant may include\n * the span of the {@link Union#discriminator|discriminator} used to\n * identify it, but values read and written using the variant strictly\n * conform to the content of {@link VariantLayout#layout|layout}.\n *\n * **NOTE** User code should not invoke this constructor directly.  Use\n * the union {@link Union#addVariant|addVariant} helper method.\n *\n * @param {Union} union - initializer for {@link\n * VariantLayout#union|union}.\n *\n * @param {Number} variant - initializer for {@link\n * VariantLayout#variant|variant}.\n *\n * @param {Layout} [layout] - initializer for {@link\n * VariantLayout#layout|layout}.  If absent the variant carries no\n * data.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.  Unlike many other layouts, variant\n * layouts normally include a property name so they can be identified\n * within their containing {@link Union}.  The property identifier may\n * be absent only if `layout` is is absent.\n *\n * @augments {Layout}\n */\nclass VariantLayout extends Layout {\n    constructor(union, variant, layout, property) {\n        if (!(union instanceof Union)) {\n            throw new TypeError('union must be a Union');\n        }\n        if ((!Number.isInteger(variant)) || (0 > variant)) {\n            throw new TypeError('variant must be a (non-negative) integer');\n        }\n        if (('string' === typeof layout)\n            && (undefined === property)) {\n            property = layout;\n            layout = null;\n        }\n        if (layout) {\n            if (!(layout instanceof Layout)) {\n                throw new TypeError('layout must be a Layout');\n            }\n            if ((null !== union.defaultLayout)\n                && (0 <= layout.span)\n                && (layout.span > union.defaultLayout.span)) {\n                throw new Error('variant span exceeds span of containing union');\n            }\n            if ('string' !== typeof property) {\n                throw new TypeError('variant must have a String property');\n            }\n        }\n        let span = union.span;\n        if (0 > union.span) {\n            span = layout ? layout.span : 0;\n            if ((0 <= span) && union.usesPrefixDiscriminator) {\n                span += union.discriminator.layout.span;\n            }\n        }\n        super(span, property);\n        /** The {@link Union} to which this variant belongs. */\n        this.union = union;\n        /** The unsigned integral value identifying this variant within\n         * the {@link Union#discriminator|discriminator} of the containing\n         * union. */\n        this.variant = variant;\n        /** The {@link Layout} to be used when reading/writing the\n         * non-discriminator part of the {@link\n         * VariantLayout#union|union}.  If `null` the variant carries no\n         * data. */\n        this.layout = layout || null;\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        if (0 <= this.span) {\n            /* Will be equal to the containing union span if that is not\n             * variable. */\n            return this.span;\n        }\n        let contentOffset = 0;\n        if (this.union.usesPrefixDiscriminator) {\n            contentOffset = this.union.discriminator.layout.span;\n        }\n        /* Span is defined solely by the variant (and prefix discriminator) */\n        let span = 0;\n        if (this.layout) {\n            span = this.layout.getSpan(b, offset + contentOffset);\n        }\n        return contentOffset + span;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const dest = this.makeDestinationObject();\n        if (this !== this.union.getVariant(b, offset)) {\n            throw new Error('variant mismatch');\n        }\n        let contentOffset = 0;\n        if (this.union.usesPrefixDiscriminator) {\n            contentOffset = this.union.discriminator.layout.span;\n        }\n        if (this.layout) {\n            dest[this.property] = this.layout.decode(b, offset + contentOffset);\n        }\n        else if (this.property) {\n            dest[this.property] = true;\n        }\n        else if (this.union.usesPrefixDiscriminator) {\n            dest[this.union.discriminator.property] = this.variant;\n        }\n        return dest;\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        let contentOffset = 0;\n        if (this.union.usesPrefixDiscriminator) {\n            contentOffset = this.union.discriminator.layout.span;\n        }\n        if (this.layout\n            && (!Object.prototype.hasOwnProperty.call(src, this.property))) {\n            throw new TypeError('variant lacks property ' + this.property);\n        }\n        this.union.discriminator.encode(this.variant, b, offset);\n        let span = contentOffset;\n        if (this.layout) {\n            this.layout.encode(src[this.property], b, offset + contentOffset);\n            span += this.layout.getSpan(b, offset + contentOffset);\n            if ((0 <= this.union.span)\n                && (span > this.union.span)) {\n                throw new Error('encoded variant overruns containing union');\n            }\n        }\n        return span;\n    }\n    /** Delegate {@link Layout#fromArray|fromArray} to {@link\n     * VariantLayout#layout|layout}. */\n    fromArray(values) {\n        if (this.layout) {\n            return this.layout.fromArray(values);\n        }\n        return undefined;\n    }\n}\nexports.VariantLayout = VariantLayout;\n/** JavaScript chose to define bitwise operations as operating on\n * signed 32-bit values in 2's complement form, meaning any integer\n * with bit 31 set is going to look negative.  For right shifts that's\n * not a problem, because `>>>` is a logical shift, but for every\n * other bitwise operator we have to compensate for possible negative\n * results. */\nfunction fixBitwiseResult(v) {\n    if (0 > v) {\n        v += 0x100000000;\n    }\n    return v;\n}\n/**\n * Contain a sequence of bit fields as an unsigned integer.\n *\n * *Factory*: {@link module:Layout.bits|bits}\n *\n * This is a container element; within it there are {@link BitField}\n * instances that provide the extracted properties.  The container\n * simply defines the aggregate representation and its bit ordering.\n * The representation is an object containing properties with numeric\n * or {@link Boolean} values.\n *\n * {@link BitField}s are added with the {@link\n * BitStructure#addField|addField} and {@link\n * BitStructure#addBoolean|addBoolean} methods.\n\n * @param {Layout} word - initializer for {@link\n * BitStructure#word|word}.  The parameter must be an instance of\n * {@link UInt} (or {@link UIntBE}) that is no more than 4 bytes wide.\n *\n * @param {bool} [msb] - `true` if the bit numbering starts at the\n * most significant bit of the containing word; `false` (default) if\n * it starts at the least significant bit of the containing word.  If\n * the parameter at this position is a string and `property` is\n * `undefined` the value of this argument will instead be used as the\n * value of `property`.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass BitStructure extends Layout {\n    constructor(word, msb, property) {\n        if (!((word instanceof UInt)\n            || (word instanceof UIntBE))) {\n            throw new TypeError('word must be a UInt or UIntBE layout');\n        }\n        if (('string' === typeof msb)\n            && (undefined === property)) {\n            property = msb;\n            msb = false;\n        }\n        if (4 < word.span) {\n            throw new RangeError('word cannot exceed 32 bits');\n        }\n        super(word.span, property);\n        /** The layout used for the packed value.  {@link BitField}\n         * instances are packed sequentially depending on {@link\n         * BitStructure#msb|msb}. */\n        this.word = word;\n        /** Whether the bit sequences are packed starting at the most\n         * significant bit growing down (`true`), or the least significant\n         * bit growing up (`false`).\n         *\n         * **NOTE** Regardless of this value, the least significant bit of\n         * any {@link BitField} value is the least significant bit of the\n         * corresponding section of the packed value. */\n        this.msb = !!msb;\n        /** The sequence of {@link BitField} layouts that comprise the\n         * packed structure.\n         *\n         * **NOTE** The array remains mutable to allow fields to be {@link\n         * BitStructure#addField|added} after construction.  Users should\n         * not manipulate the content of this property.*/\n        this.fields = [];\n        /* Storage for the value.  Capture a variable instead of using an\n         * instance property because we don't want anything to change the\n         * value without going through the mutator. */\n        let value = 0;\n        this._packedSetValue = function (v) {\n            value = fixBitwiseResult(v);\n            return this;\n        };\n        this._packedGetValue = function () {\n            return value;\n        };\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const dest = this.makeDestinationObject();\n        const value = this.word.decode(b, offset);\n        this._packedSetValue(value);\n        for (const fd of this.fields) {\n            if (undefined !== fd.property) {\n                dest[fd.property] = fd.decode(b);\n            }\n        }\n        return dest;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link BitStructure}.\n     *\n     * If `src` is missing a property for a member with a defined {@link\n     * Layout#property|property} the corresponding region of the packed\n     * value is left unmodified.  Unused bits are also left unmodified. */\n    encode(src, b, offset = 0) {\n        const value = this.word.decode(b, offset);\n        this._packedSetValue(value);\n        for (const fd of this.fields) {\n            if (undefined !== fd.property) {\n                const fv = src[fd.property];\n                if (undefined !== fv) {\n                    fd.encode(fv);\n                }\n            }\n        }\n        return this.word.encode(this._packedGetValue(), b, offset);\n    }\n    /** Register a new bitfield with a containing bit structure.  The\n     * resulting bitfield is returned.\n     *\n     * @param {Number} bits - initializer for {@link BitField#bits|bits}.\n     *\n     * @param {string} property - initializer for {@link\n     * Layout#property|property}.\n     *\n     * @return {BitField} */\n    addField(bits, property) {\n        const bf = new BitField(this, bits, property);\n        this.fields.push(bf);\n        return bf;\n    }\n    /** As with {@link BitStructure#addField|addField} for single-bit\n     * fields with `boolean` value representation.\n     *\n     * @param {string} property - initializer for {@link\n     * Layout#property|property}.\n     *\n     * @return {Boolean} */\n    // `Boolean` conflicts with the native primitive type\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    addBoolean(property) {\n        // This is my Boolean, not the Javascript one.\n        const bf = new Boolean(this, property);\n        this.fields.push(bf);\n        return bf;\n    }\n    /**\n     * Get access to the bit field for a given property.\n     *\n     * @param {String} property - the bit field of interest.\n     *\n     * @return {BitField} - the field associated with `property`, or\n     * undefined if there is no such property.\n     */\n    fieldFor(property) {\n        if ('string' !== typeof property) {\n            throw new TypeError('property must be string');\n        }\n        for (const fd of this.fields) {\n            if (fd.property === property) {\n                return fd;\n            }\n        }\n        return undefined;\n    }\n}\nexports.BitStructure = BitStructure;\n/**\n * Represent a sequence of bits within a {@link BitStructure}.\n *\n * All bit field values are represented as unsigned integers.\n *\n * **NOTE** User code should not invoke this constructor directly.\n * Use the container {@link BitStructure#addField|addField} helper\n * method.\n *\n * **NOTE** BitField instances are not instances of {@link Layout}\n * since {@link Layout#span|span} measures 8-bit units.\n *\n * @param {BitStructure} container - initializer for {@link\n * BitField#container|container}.\n *\n * @param {Number} bits - initializer for {@link BitField#bits|bits}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n */\nclass BitField {\n    constructor(container, bits, property) {\n        if (!(container instanceof BitStructure)) {\n            throw new TypeError('container must be a BitStructure');\n        }\n        if ((!Number.isInteger(bits)) || (0 >= bits)) {\n            throw new TypeError('bits must be positive integer');\n        }\n        const totalBits = 8 * container.span;\n        const usedBits = container.fields.reduce((sum, fd) => sum + fd.bits, 0);\n        if ((bits + usedBits) > totalBits) {\n            throw new Error('bits too long for span remainder ('\n                + (totalBits - usedBits) + ' of '\n                + totalBits + ' remain)');\n        }\n        /** The {@link BitStructure} instance to which this bit field\n         * belongs. */\n        this.container = container;\n        /** The span of this value in bits. */\n        this.bits = bits;\n        /** A mask of {@link BitField#bits|bits} bits isolating value bits\n         * that fit within the field.\n         *\n         * That is, it masks a value that has not yet been shifted into\n         * position within its containing packed integer. */\n        this.valueMask = (1 << bits) - 1;\n        if (32 === bits) { // shifted value out of range\n            this.valueMask = 0xFFFFFFFF;\n        }\n        /** The offset of the value within the containing packed unsigned\n         * integer.  The least significant bit of the packed value is at\n         * offset zero, regardless of bit ordering used. */\n        this.start = usedBits;\n        if (this.container.msb) {\n            this.start = totalBits - usedBits - bits;\n        }\n        /** A mask of {@link BitField#bits|bits} isolating the field value\n         * within the containing packed unsigned integer. */\n        this.wordMask = fixBitwiseResult(this.valueMask << this.start);\n        /** The property name used when this bitfield is represented in an\n         * Object.\n         *\n         * Intended to be functionally equivalent to {@link\n         * Layout#property}.\n         *\n         * If left undefined the corresponding span of bits will be\n         * treated as padding: it will not be mutated by {@link\n         * Layout#encode|encode} nor represented as a property in the\n         * decoded Object. */\n        this.property = property;\n    }\n    /** Store a value into the corresponding subsequence of the containing\n     * bit field. */\n    decode(b, offset) {\n        const word = this.container._packedGetValue();\n        const wordValue = fixBitwiseResult(word & this.wordMask);\n        const value = wordValue >>> this.start;\n        return value;\n    }\n    /** Store a value into the corresponding subsequence of the containing\n     * bit field.\n     *\n     * **NOTE** This is not a specialization of {@link\n     * Layout#encode|Layout.encode} and there is no return value. */\n    encode(value) {\n        if ('number' !== typeof value\n            || !Number.isInteger(value)\n            || (value !== fixBitwiseResult(value & this.valueMask))) {\n            throw new TypeError(nameWithProperty('BitField.encode', this)\n                + ' value must be integer not exceeding ' + this.valueMask);\n        }\n        const word = this.container._packedGetValue();\n        const wordValue = fixBitwiseResult(value << this.start);\n        this.container._packedSetValue(fixBitwiseResult(word & ~this.wordMask)\n            | wordValue);\n    }\n}\nexports.BitField = BitField;\n/**\n * Represent a single bit within a {@link BitStructure} as a\n * JavaScript boolean.\n *\n * **NOTE** User code should not invoke this constructor directly.\n * Use the container {@link BitStructure#addBoolean|addBoolean} helper\n * method.\n *\n * @param {BitStructure} container - initializer for {@link\n * BitField#container|container}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {BitField}\n */\n/* eslint-disable no-extend-native */\nclass Boolean extends BitField {\n    constructor(container, property) {\n        super(container, 1, property);\n    }\n    /** Override {@link BitField#decode|decode} for {@link Boolean|Boolean}.\n     *\n     * @returns {boolean} */\n    decode(b, offset) {\n        return !!super.decode(b, offset);\n    }\n    /** @override */\n    encode(value) {\n        if ('boolean' === typeof value) {\n            // BitField requires integer values\n            value = +value;\n        }\n        super.encode(value);\n    }\n}\nexports.Boolean = Boolean;\n/* eslint-enable no-extend-native */\n/**\n * Contain a fixed-length block of arbitrary data, represented as a\n * Uint8Array.\n *\n * *Factory*: {@link module:Layout.blob|blob}\n *\n * @param {(Number|ExternalLayout)} length - initializes {@link\n * Blob#length|length}.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Blob extends Layout {\n    constructor(length, property) {\n        if (!(((length instanceof ExternalLayout) && length.isCount())\n            || (Number.isInteger(length) && (0 <= length)))) {\n            throw new TypeError('length must be positive integer '\n                + 'or an unsigned integer ExternalLayout');\n        }\n        let span = -1;\n        if (!(length instanceof ExternalLayout)) {\n            span = length;\n        }\n        super(span, property);\n        /** The number of bytes in the blob.\n         *\n         * This may be a non-negative integer, or an instance of {@link\n         * ExternalLayout} that satisfies {@link\n         * ExternalLayout#isCount|isCount()}. */\n        this.length = length;\n    }\n    /** @override */\n    getSpan(b, offset) {\n        let span = this.span;\n        if (0 > span) {\n            span = this.length.decode(b, offset);\n        }\n        return span;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        let span = this.span;\n        if (0 > span) {\n            span = this.length.decode(b, offset);\n        }\n        return uint8ArrayToBuffer(b).slice(offset, offset + span);\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Blob}.\n     *\n     * **NOTE** If {@link Layout#count|count} is an instance of {@link\n     * ExternalLayout} then the length of `src` will be encoded as the\n     * count after `src` is encoded. */\n    encode(src, b, offset) {\n        let span = this.length;\n        if (this.length instanceof ExternalLayout) {\n            span = src.length;\n        }\n        if (!(src instanceof Uint8Array && span === src.length)) {\n            throw new TypeError(nameWithProperty('Blob.encode', this)\n                + ' requires (length ' + span + ') Uint8Array as src');\n        }\n        if ((offset + span) > b.length) {\n            throw new RangeError('encoding overruns Uint8Array');\n        }\n        const srcBuffer = uint8ArrayToBuffer(src);\n        uint8ArrayToBuffer(b).write(srcBuffer.toString('hex'), offset, span, 'hex');\n        if (this.length instanceof ExternalLayout) {\n            this.length.encode(span, b, offset);\n        }\n        return span;\n    }\n}\nexports.Blob = Blob;\n/**\n * Contain a `NUL`-terminated UTF8 string.\n *\n * *Factory*: {@link module:Layout.cstr|cstr}\n *\n * **NOTE** Any UTF8 string that incorporates a zero-valued byte will\n * not be correctly decoded by this layout.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass CString extends Layout {\n    constructor(property) {\n        super(-1, property);\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        checkUint8Array(b);\n        let idx = offset;\n        while ((idx < b.length) && (0 !== b[idx])) {\n            idx += 1;\n        }\n        return 1 + idx - offset;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const span = this.getSpan(b, offset);\n        return uint8ArrayToBuffer(b).slice(offset, offset + span - 1).toString('utf-8');\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        /* Must force this to a string, lest it be a number and the\n         * \"utf8-encoding\" below actually allocate a buffer of length\n         * src */\n        if ('string' !== typeof src) {\n            src = String(src);\n        }\n        const srcb = buffer_1.Buffer.from(src, 'utf8');\n        const span = srcb.length;\n        if ((offset + span) > b.length) {\n            throw new RangeError('encoding overruns Buffer');\n        }\n        const buffer = uint8ArrayToBuffer(b);\n        srcb.copy(buffer, offset);\n        buffer[offset + span] = 0;\n        return span + 1;\n    }\n}\nexports.CString = CString;\n/**\n * Contain a UTF8 string with implicit length.\n *\n * *Factory*: {@link module:Layout.utf8|utf8}\n *\n * **NOTE** Because the length is implicit in the size of the buffer\n * this layout should be used only in isolation, or in a situation\n * where the length can be expressed by operating on a slice of the\n * containing buffer.\n *\n * @param {Number} [maxSpan] - the maximum length allowed for encoded\n * string content.  If not provided there is no bound on the allowed\n * content.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass UTF8 extends Layout {\n    constructor(maxSpan, property) {\n        if (('string' === typeof maxSpan) && (undefined === property)) {\n            property = maxSpan;\n            maxSpan = undefined;\n        }\n        if (undefined === maxSpan) {\n            maxSpan = -1;\n        }\n        else if (!Number.isInteger(maxSpan)) {\n            throw new TypeError('maxSpan must be an integer');\n        }\n        super(-1, property);\n        /** The maximum span of the layout in bytes.\n         *\n         * Positive values are generally expected.  Zero is abnormal.\n         * Attempts to encode or decode a value that exceeds this length\n         * will throw a `RangeError`.\n         *\n         * A negative value indicates that there is no bound on the length\n         * of the content. */\n        this.maxSpan = maxSpan;\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n        checkUint8Array(b);\n        return b.length - offset;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n        const span = this.getSpan(b, offset);\n        if ((0 <= this.maxSpan)\n            && (this.maxSpan < span)) {\n            throw new RangeError('text length exceeds maxSpan');\n        }\n        return uint8ArrayToBuffer(b).slice(offset, offset + span).toString('utf-8');\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n        /* Must force this to a string, lest it be a number and the\n         * \"utf8-encoding\" below actually allocate a buffer of length\n         * src */\n        if ('string' !== typeof src) {\n            src = String(src);\n        }\n        const srcb = buffer_1.Buffer.from(src, 'utf8');\n        const span = srcb.length;\n        if ((0 <= this.maxSpan)\n            && (this.maxSpan < span)) {\n            throw new RangeError('text length exceeds maxSpan');\n        }\n        if ((offset + span) > b.length) {\n            throw new RangeError('encoding overruns Buffer');\n        }\n        srcb.copy(uint8ArrayToBuffer(b), offset);\n        return span;\n    }\n}\nexports.UTF8 = UTF8;\n/**\n * Contain a constant value.\n *\n * This layout may be used in cases where a JavaScript value can be\n * inferred without an expression in the binary encoding.  An example\n * would be a {@link VariantLayout|variant layout} where the content\n * is implied by the union {@link Union#discriminator|discriminator}.\n *\n * @param {Object|Number|String} value - initializer for {@link\n * Constant#value|value}.  If the value is an object (or array) and\n * the application intends the object to remain unchanged regardless\n * of what is done to values decoded by this layout, the value should\n * be frozen prior passing it to this constructor.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Constant extends Layout {\n    constructor(value, property) {\n        super(0, property);\n        /** The value produced by this constant when the layout is {@link\n         * Constant#decode|decoded}.\n         *\n         * Any JavaScript value including `null` and `undefined` is\n         * permitted.\n         *\n         * **WARNING** If `value` passed in the constructor was not\n         * frozen, it is possible for users of decoded values to change\n         * the content of the value. */\n        this.value = value;\n    }\n    /** @override */\n    decode(b, offset) {\n        return this.value;\n    }\n    /** @override */\n    encode(src, b, offset) {\n        /* Constants take no space */\n        return 0;\n    }\n}\nexports.Constant = Constant;\n/** Factory for {@link GreedyCount}. */\nexports.greedy = ((elementSpan, property) => new GreedyCount(elementSpan, property));\n/** Factory for {@link OffsetLayout}. */\nexports.offset = ((layout, offset, property) => new OffsetLayout(layout, offset, property));\n/** Factory for {@link UInt|unsigned int layouts} spanning one\n * byte. */\nexports.u8 = ((property) => new UInt(1, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning two bytes. */\nexports.u16 = ((property) => new UInt(2, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning three bytes. */\nexports.u24 = ((property) => new UInt(3, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning four bytes. */\nexports.u32 = ((property) => new UInt(4, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning five bytes. */\nexports.u40 = ((property) => new UInt(5, property));\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning six bytes. */\nexports.u48 = ((property) => new UInt(6, property));\n/** Factory for {@link NearUInt64|little-endian unsigned int\n * layouts} interpreted as Numbers. */\nexports.nu64 = ((property) => new NearUInt64(property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning two bytes. */\nexports.u16be = ((property) => new UIntBE(2, property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning three bytes. */\nexports.u24be = ((property) => new UIntBE(3, property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning four bytes. */\nexports.u32be = ((property) => new UIntBE(4, property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning five bytes. */\nexports.u40be = ((property) => new UIntBE(5, property));\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning six bytes. */\nexports.u48be = ((property) => new UIntBE(6, property));\n/** Factory for {@link NearUInt64BE|big-endian unsigned int\n * layouts} interpreted as Numbers. */\nexports.nu64be = ((property) => new NearUInt64BE(property));\n/** Factory for {@link Int|signed int layouts} spanning one\n * byte. */\nexports.s8 = ((property) => new Int(1, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning two bytes. */\nexports.s16 = ((property) => new Int(2, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning three bytes. */\nexports.s24 = ((property) => new Int(3, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning four bytes. */\nexports.s32 = ((property) => new Int(4, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning five bytes. */\nexports.s40 = ((property) => new Int(5, property));\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning six bytes. */\nexports.s48 = ((property) => new Int(6, property));\n/** Factory for {@link NearInt64|little-endian signed int layouts}\n * interpreted as Numbers. */\nexports.ns64 = ((property) => new NearInt64(property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning two bytes. */\nexports.s16be = ((property) => new IntBE(2, property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning three bytes. */\nexports.s24be = ((property) => new IntBE(3, property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning four bytes. */\nexports.s32be = ((property) => new IntBE(4, property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning five bytes. */\nexports.s40be = ((property) => new IntBE(5, property));\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning six bytes. */\nexports.s48be = ((property) => new IntBE(6, property));\n/** Factory for {@link NearInt64BE|big-endian signed int layouts}\n * interpreted as Numbers. */\nexports.ns64be = ((property) => new NearInt64BE(property));\n/** Factory for {@link Float|little-endian 32-bit floating point} values. */\nexports.f32 = ((property) => new Float(property));\n/** Factory for {@link FloatBE|big-endian 32-bit floating point} values. */\nexports.f32be = ((property) => new FloatBE(property));\n/** Factory for {@link Double|little-endian 64-bit floating point} values. */\nexports.f64 = ((property) => new Double(property));\n/** Factory for {@link DoubleBE|big-endian 64-bit floating point} values. */\nexports.f64be = ((property) => new DoubleBE(property));\n/** Factory for {@link Structure} values. */\nexports.struct = ((fields, property, decodePrefixes) => new Structure(fields, property, decodePrefixes));\n/** Factory for {@link BitStructure} values. */\nexports.bits = ((word, msb, property) => new BitStructure(word, msb, property));\n/** Factory for {@link Sequence} values. */\nexports.seq = ((elementLayout, count, property) => new Sequence(elementLayout, count, property));\n/** Factory for {@link Union} values. */\nexports.union = ((discr, defaultLayout, property) => new Union(discr, defaultLayout, property));\n/** Factory for {@link UnionLayoutDiscriminator} values. */\nexports.unionLayoutDiscriminator = ((layout, property) => new UnionLayoutDiscriminator(layout, property));\n/** Factory for {@link Blob} values. */\nexports.blob = ((length, property) => new Blob(length, property));\n/** Factory for {@link CString} values. */\nexports.cstr = ((property) => new CString(property));\n/** Factory for {@link UTF8} values. */\nexports.utf8 = ((maxSpan, property) => new UTF8(maxSpan, property));\n/** Factory for {@link Constant} values. */\nexports.constant = ((value, property) => new Constant(value, property));\n//# sourceMappingURL=Layout.js.map","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}","/*! noble-ed25519 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst CU_O = BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989');\nconst CURVE = Object.freeze({\n    a: BigInt(-1),\n    d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n    P: BigInt('57896044618658097711785492504343953926634992332820282019728792003956564819949'),\n    l: CU_O,\n    n: CU_O,\n    h: BigInt(8),\n    Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n    Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n});\nexport { CURVE };\nconst POW_2_256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\nconst SQRT_M1 = BigInt('19681161376707505956807079304988542015446066515923890162744021073123829784752');\nconst SQRT_D = BigInt('6853475219497561581579357271197624642482790079785650197046958215289687604742');\nconst SQRT_AD_MINUS_ONE = BigInt('25063068953384623474111414158702152701244531502492656460079210482610430750235');\nconst INVSQRT_A_MINUS_D = BigInt('54469307008909316920995813868745141605393597292927456921205312896311721017578');\nconst ONE_MINUS_D_SQ = BigInt('1159843021668779879193775521855586647937357759715417654439879720876111806838');\nconst D_MINUS_ONE_SQ = BigInt('40440834346308536858101042469323190826248399146238708352240133220865137265952');\nclass ExtendedPoint {\n    constructor(x, y, z, t) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.t = t;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('ExtendedPoint#fromAffine: expected Point');\n        }\n        if (p.equals(Point.ZERO))\n            return ExtendedPoint.ZERO;\n        return new ExtendedPoint(p.x, p.y, _1n, mod(p.x * p.y));\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return this.toAffineBatch(points).map(this.fromAffine);\n    }\n    equals(other) {\n        assertExtPoint(other);\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        const X1Z2 = mod(X1 * Z2);\n        const X2Z1 = mod(X2 * Z1);\n        const Y1Z2 = mod(Y1 * Z2);\n        const Y2Z1 = mod(Y2 * Z1);\n        return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n    negate() {\n        return new ExtendedPoint(mod(-this.x), this.y, this.z, mod(-this.t));\n    }\n    double() {\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { a } = CURVE;\n        const A = mod(X1 * X1);\n        const B = mod(Y1 * Y1);\n        const C = mod(_2n * mod(Z1 * Z1));\n        const D = mod(a * A);\n        const x1y1 = X1 + Y1;\n        const E = mod(mod(x1y1 * x1y1) - A - B);\n        const G = D + B;\n        const F = G - C;\n        const H = D - B;\n        const X3 = mod(E * F);\n        const Y3 = mod(G * H);\n        const T3 = mod(E * H);\n        const Z3 = mod(F * G);\n        return new ExtendedPoint(X3, Y3, Z3, T3);\n    }\n    add(other) {\n        assertExtPoint(other);\n        const { x: X1, y: Y1, z: Z1, t: T1 } = this;\n        const { x: X2, y: Y2, z: Z2, t: T2 } = other;\n        const A = mod((Y1 - X1) * (Y2 + X2));\n        const B = mod((Y1 + X1) * (Y2 - X2));\n        const F = mod(B - A);\n        if (F === _0n)\n            return this.double();\n        const C = mod(Z1 * _2n * T2);\n        const D = mod(T1 * _2n * Z2);\n        const E = D + C;\n        const G = B + A;\n        const H = D - C;\n        const X3 = mod(E * F);\n        const Y3 = mod(G * H);\n        const T3 = mod(E * H);\n        const Z3 = mod(F * G);\n        return new ExtendedPoint(X3, Y3, Z3, T3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    precomputeWindow(W) {\n        const windows = 1 + 256 / W;\n        const points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(ExtendedPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = ExtendedPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = ExtendedPoint.ZERO;\n        let f = ExtendedPoint.ZERO;\n        const windows = 1 + 256 / W;\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            if (wbits === 0) {\n                let pr = precomputes[offset];\n                if (window % 2)\n                    pr = pr.negate();\n                f = f.add(pr);\n            }\n            else {\n                let cached = precomputes[offset + Math.abs(wbits) - 1];\n                if (wbits < 0)\n                    cached = cached.negate();\n                p = p.add(cached);\n            }\n        }\n        return ExtendedPoint.normalizeZ([p, f])[0];\n    }\n    multiply(scalar, affinePoint) {\n        return this.wNAF(normalizeScalar(scalar, CURVE.l), affinePoint);\n    }\n    multiplyUnsafe(scalar) {\n        let n = normalizeScalar(scalar, CURVE.l, false);\n        const G = ExtendedPoint.BASE;\n        const P0 = ExtendedPoint.ZERO;\n        if (n === _0n)\n            return P0;\n        if (this.equals(P0) || n === _1n)\n            return this;\n        if (this.equals(G))\n            return this.wNAF(n);\n        let p = P0;\n        let d = this;\n        while (n > _0n) {\n            if (n & _1n)\n                p = p.add(d);\n            d = d.double();\n            n >>= _1n;\n        }\n        return p;\n    }\n    isSmallOrder() {\n        return this.multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n    }\n    isTorsionFree() {\n        return this.multiplyUnsafe(CURVE.l).equals(ExtendedPoint.ZERO);\n    }\n    toAffine(invZ = invert(this.z)) {\n        const { x, y, z } = this;\n        const ax = mod(x * invZ);\n        const ay = mod(y * invZ);\n        const zz = mod(z * invZ);\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return new Point(ax, ay);\n    }\n    fromRistrettoBytes() {\n        legacyRist();\n    }\n    toRistrettoBytes() {\n        legacyRist();\n    }\n    fromRistrettoHash() {\n        legacyRist();\n    }\n}\nExtendedPoint.BASE = new ExtendedPoint(CURVE.Gx, CURVE.Gy, _1n, mod(CURVE.Gx * CURVE.Gy));\nExtendedPoint.ZERO = new ExtendedPoint(_0n, _1n, _1n, _0n);\nfunction assertExtPoint(other) {\n    if (!(other instanceof ExtendedPoint))\n        throw new TypeError('ExtendedPoint expected');\n}\nfunction assertRstPoint(other) {\n    if (!(other instanceof RistrettoPoint))\n        throw new TypeError('RistrettoPoint expected');\n}\nfunction legacyRist() {\n    throw new Error('Legacy method: switch to RistrettoPoint');\n}\nclass RistrettoPoint {\n    constructor(ep) {\n        this.ep = ep;\n    }\n    static calcElligatorRistrettoMap(r0) {\n        const { d } = CURVE;\n        const r = mod(SQRT_M1 * r0 * r0);\n        const Ns = mod((r + _1n) * ONE_MINUS_D_SQ);\n        let c = BigInt(-1);\n        const D = mod((c - d * r) * mod(r + d));\n        let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D);\n        let s_ = mod(s * r0);\n        if (!edIsNegative(s_))\n            s_ = mod(-s_);\n        if (!Ns_D_is_sq)\n            s = s_;\n        if (!Ns_D_is_sq)\n            c = r;\n        const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D);\n        const s2 = s * s;\n        const W0 = mod((s + s) * D);\n        const W1 = mod(Nt * SQRT_AD_MINUS_ONE);\n        const W2 = mod(_1n - s2);\n        const W3 = mod(_1n + s2);\n        return new ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n    }\n    static hashToCurve(hex) {\n        hex = ensureBytes(hex, 64);\n        const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n        const R1 = this.calcElligatorRistrettoMap(r1);\n        const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n        const R2 = this.calcElligatorRistrettoMap(r2);\n        return new RistrettoPoint(R1.add(R2));\n    }\n    static fromHex(hex) {\n        hex = ensureBytes(hex, 32);\n        const { a, d } = CURVE;\n        const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n        const s = bytes255ToNumberLE(hex);\n        if (!equalBytes(numberTo32BytesLE(s), hex) || edIsNegative(s))\n            throw new Error(emsg);\n        const s2 = mod(s * s);\n        const u1 = mod(_1n + a * s2);\n        const u2 = mod(_1n - a * s2);\n        const u1_2 = mod(u1 * u1);\n        const u2_2 = mod(u2 * u2);\n        const v = mod(a * d * u1_2 - u2_2);\n        const { isValid, value: I } = invertSqrt(mod(v * u2_2));\n        const Dx = mod(I * u2);\n        const Dy = mod(I * Dx * v);\n        let x = mod((s + s) * Dx);\n        if (edIsNegative(x))\n            x = mod(-x);\n        const y = mod(u1 * Dy);\n        const t = mod(x * y);\n        if (!isValid || edIsNegative(t) || y === _0n)\n            throw new Error(emsg);\n        return new RistrettoPoint(new ExtendedPoint(x, y, _1n, t));\n    }\n    toRawBytes() {\n        let { x, y, z, t } = this.ep;\n        const u1 = mod(mod(z + y) * mod(z - y));\n        const u2 = mod(x * y);\n        const u2sq = mod(u2 * u2);\n        const { value: invsqrt } = invertSqrt(mod(u1 * u2sq));\n        const D1 = mod(invsqrt * u1);\n        const D2 = mod(invsqrt * u2);\n        const zInv = mod(D1 * D2 * t);\n        let D;\n        if (edIsNegative(t * zInv)) {\n            let _x = mod(y * SQRT_M1);\n            let _y = mod(x * SQRT_M1);\n            x = _x;\n            y = _y;\n            D = mod(D1 * INVSQRT_A_MINUS_D);\n        }\n        else {\n            D = D2;\n        }\n        if (edIsNegative(x * zInv))\n            y = mod(-y);\n        let s = mod((z - y) * D);\n        if (edIsNegative(s))\n            s = mod(-s);\n        return numberTo32BytesLE(s);\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toString() {\n        return this.toHex();\n    }\n    equals(other) {\n        assertRstPoint(other);\n        const a = this.ep;\n        const b = other.ep;\n        const one = mod(a.x * b.y) === mod(a.y * b.x);\n        const two = mod(a.y * b.y) === mod(a.x * b.x);\n        return one || two;\n    }\n    add(other) {\n        assertRstPoint(other);\n        return new RistrettoPoint(this.ep.add(other.ep));\n    }\n    subtract(other) {\n        assertRstPoint(other);\n        return new RistrettoPoint(this.ep.subtract(other.ep));\n    }\n    multiply(scalar) {\n        return new RistrettoPoint(this.ep.multiply(scalar));\n    }\n    multiplyUnsafe(scalar) {\n        return new RistrettoPoint(this.ep.multiplyUnsafe(scalar));\n    }\n}\nRistrettoPoint.BASE = new RistrettoPoint(ExtendedPoint.BASE);\nRistrettoPoint.ZERO = new RistrettoPoint(ExtendedPoint.ZERO);\nconst pointPrecomputes = new WeakMap();\nclass Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    static fromHex(hex, strict = true) {\n        const { d, P } = CURVE;\n        hex = ensureBytes(hex, 32);\n        const normed = hex.slice();\n        normed[31] = hex[31] & ~0x80;\n        const y = bytesToNumberLE(normed);\n        if (strict && y >= P)\n            throw new Error('Expected 0 < hex < P');\n        if (!strict && y >= POW_2_256)\n            throw new Error('Expected 0 < hex < 2**256');\n        const y2 = mod(y * y);\n        const u = mod(y2 - _1n);\n        const v = mod(d * y2 + _1n);\n        let { isValid, value: x } = uvRatio(u, v);\n        if (!isValid)\n            throw new Error('Point.fromHex: invalid y coordinate');\n        const isXOdd = (x & _1n) === _1n;\n        const isLastByteOdd = (hex[31] & 0x80) !== 0;\n        if (isLastByteOdd !== isXOdd) {\n            x = mod(-x);\n        }\n        return new Point(x, y);\n    }\n    static async fromPrivateKey(privateKey) {\n        return (await getExtendedPublicKey(privateKey)).point;\n    }\n    toRawBytes() {\n        const bytes = numberTo32BytesLE(this.y);\n        bytes[31] |= this.x & _1n ? 0x80 : 0;\n        return bytes;\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toX25519() {\n        const { y } = this;\n        const u = mod((_1n + y) * invert(_1n - y));\n        return numberTo32BytesLE(u);\n    }\n    isTorsionFree() {\n        return ExtendedPoint.fromAffine(this).isTorsionFree();\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(mod(-this.x), this.y);\n    }\n    add(other) {\n        return ExtendedPoint.fromAffine(this).add(ExtendedPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return ExtendedPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _1n);\nclass Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex, 64);\n        const r = Point.fromHex(bytes.slice(0, 32), false);\n        const s = bytesToNumberLE(bytes.slice(32, 64));\n        return new Signature(r, s);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!(r instanceof Point))\n            throw new Error('Expected Point instance');\n        normalizeScalar(s, CURVE.l, false);\n        return this;\n    }\n    toRawBytes() {\n        const u8 = new Uint8Array(64);\n        u8.set(this.r.toRawBytes());\n        u8.set(numberTo32BytesLE(this.s), 32);\n        return u8;\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n}\nexport { ExtendedPoint, RistrettoPoint, Point, Signature };\nfunction concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array list');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nfunction numberTo32BytesBE(num) {\n    const length = 32;\n    const hex = num.toString(16).padStart(length * 2, '0');\n    return hexToBytes(hex);\n}\nfunction numberTo32BytesLE(num) {\n    return numberTo32BytesBE(num).reverse();\n}\nfunction edIsNegative(num) {\n    return (mod(num) & _1n) === _1n;\n}\nfunction bytesToNumberLE(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    return BigInt('0x' + bytesToHex(Uint8Array.from(uint8a).reverse()));\n}\nconst MAX_255B = BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nfunction bytes255ToNumberLE(bytes) {\n    return mod(bytesToNumberLE(bytes) & MAX_255B);\n}\nfunction mod(a, b = CURVE.P) {\n    const res = a % b;\n    return res >= _0n ? res : b + res;\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, p = CURVE.P) {\n    const tmp = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        tmp[i] = acc;\n        return mod(acc * num, p);\n    }, _1n);\n    const inverted = invert(lastMultiplied, p);\n    nums.reduceRight((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        tmp[i] = mod(acc * tmp[i], p);\n        return mod(acc * num, p);\n    }, inverted);\n    return tmp;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction pow_2_252_3(x) {\n    const { P } = CURVE;\n    const _5n = BigInt(5);\n    const _10n = BigInt(10);\n    const _20n = BigInt(20);\n    const _40n = BigInt(40);\n    const _80n = BigInt(80);\n    const x2 = (x * x) % P;\n    const b2 = (x2 * x) % P;\n    const b4 = (pow2(b2, _2n) * b2) % P;\n    const b5 = (pow2(b4, _1n) * x) % P;\n    const b10 = (pow2(b5, _5n) * b5) % P;\n    const b20 = (pow2(b10, _10n) * b10) % P;\n    const b40 = (pow2(b20, _20n) * b20) % P;\n    const b80 = (pow2(b40, _40n) * b40) % P;\n    const b160 = (pow2(b80, _80n) * b80) % P;\n    const b240 = (pow2(b160, _80n) * b80) % P;\n    const b250 = (pow2(b240, _10n) * b10) % P;\n    const pow_p_5_8 = (pow2(b250, _2n) * x) % P;\n    return { pow_p_5_8, b2 };\n}\nfunction uvRatio(u, v) {\n    const v3 = mod(v * v * v);\n    const v7 = mod(v3 * v3 * v);\n    const pow = pow_2_252_3(u * v7).pow_p_5_8;\n    let x = mod(u * v3 * pow);\n    const vx2 = mod(v * x * x);\n    const root1 = x;\n    const root2 = mod(x * SQRT_M1);\n    const useRoot1 = vx2 === u;\n    const useRoot2 = vx2 === mod(-u);\n    const noRoot = vx2 === mod(-u * SQRT_M1);\n    if (useRoot1)\n        x = root1;\n    if (useRoot2 || noRoot)\n        x = root2;\n    if (edIsNegative(x))\n        x = mod(-x);\n    return { isValid: useRoot1 || useRoot2, value: x };\n}\nfunction invertSqrt(number) {\n    return uvRatio(_1n, number);\n}\nfunction modlLE(hash) {\n    return mod(bytesToNumberLE(hash), CURVE.l);\n}\nfunction equalBytes(b1, b2) {\n    if (b1.length !== b2.length) {\n        return false;\n    }\n    for (let i = 0; i < b1.length; i++) {\n        if (b1[i] !== b2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction ensureBytes(hex, expectedLength) {\n    const bytes = hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n    if (typeof expectedLength === 'number' && bytes.length !== expectedLength)\n        throw new Error(`Expected ${expectedLength} bytes`);\n    return bytes;\n}\nfunction normalizeScalar(num, max, strict = true) {\n    if (!max)\n        throw new TypeError('Specify max value');\n    if (typeof num === 'number' && Number.isSafeInteger(num))\n        num = BigInt(num);\n    if (typeof num === 'bigint' && num < max) {\n        if (strict) {\n            if (_0n < num)\n                return num;\n        }\n        else {\n            if (_0n <= num)\n                return num;\n        }\n    }\n    throw new TypeError('Expected valid scalar: 0 < scalar < max');\n}\nfunction adjustBytes25519(bytes) {\n    bytes[0] &= 248;\n    bytes[31] &= 127;\n    bytes[31] |= 64;\n    return bytes;\n}\nfunction decodeScalar25519(n) {\n    return bytesToNumberLE(adjustBytes25519(ensureBytes(n, 32)));\n}\nfunction checkPrivateKey(key) {\n    key =\n        typeof key === 'bigint' || typeof key === 'number'\n            ? numberTo32BytesBE(normalizeScalar(key, POW_2_256))\n            : ensureBytes(key);\n    if (key.length !== 32)\n        throw new Error(`Expected 32 bytes`);\n    return key;\n}\nfunction getKeyFromHash(hashed) {\n    const head = adjustBytes25519(hashed.slice(0, 32));\n    const prefix = hashed.slice(32, 64);\n    const scalar = modlLE(head);\n    const point = Point.BASE.multiply(scalar);\n    const pointBytes = point.toRawBytes();\n    return { head, prefix, scalar, point, pointBytes };\n}\nlet _sha512Sync;\nfunction sha512s(...m) {\n    if (typeof _sha512Sync !== 'function')\n        throw new Error('utils.sha512Sync must be set to use sync methods');\n    return _sha512Sync(...m);\n}\nasync function getExtendedPublicKey(key) {\n    return getKeyFromHash(await utils.sha512(checkPrivateKey(key)));\n}\nfunction getExtendedPublicKeySync(key) {\n    return getKeyFromHash(sha512s(checkPrivateKey(key)));\n}\nexport async function getPublicKey(privateKey) {\n    return (await getExtendedPublicKey(privateKey)).pointBytes;\n}\nfunction getPublicKeySync(privateKey) {\n    return getExtendedPublicKeySync(privateKey).pointBytes;\n}\nexport async function sign(message, privateKey) {\n    message = ensureBytes(message);\n    const { prefix, scalar, pointBytes } = await getExtendedPublicKey(privateKey);\n    const r = modlLE(await utils.sha512(prefix, message));\n    const R = Point.BASE.multiply(r);\n    const k = modlLE(await utils.sha512(R.toRawBytes(), pointBytes, message));\n    const s = mod(r + k * scalar, CURVE.l);\n    return new Signature(R, s).toRawBytes();\n}\nfunction signSync(message, privateKey) {\n    message = ensureBytes(message);\n    const { prefix, scalar, pointBytes } = getExtendedPublicKeySync(privateKey);\n    const r = modlLE(sha512s(prefix, message));\n    const R = Point.BASE.multiply(r);\n    const k = modlLE(sha512s(R.toRawBytes(), pointBytes, message));\n    const s = mod(r + k * scalar, CURVE.l);\n    return new Signature(R, s).toRawBytes();\n}\nfunction prepareVerification(sig, message, publicKey) {\n    message = ensureBytes(message);\n    if (!(publicKey instanceof Point))\n        publicKey = Point.fromHex(publicKey, false);\n    const { r, s } = sig instanceof Signature ? sig.assertValidity() : Signature.fromHex(sig);\n    const SB = ExtendedPoint.BASE.multiplyUnsafe(s);\n    return { r, s, SB, pub: publicKey, msg: message };\n}\nfunction finishVerification(publicKey, r, SB, hashed) {\n    const k = modlLE(hashed);\n    const kA = ExtendedPoint.fromAffine(publicKey).multiplyUnsafe(k);\n    const RkA = ExtendedPoint.fromAffine(r).add(kA);\n    return RkA.subtract(SB).multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n}\nexport async function verify(sig, message, publicKey) {\n    const { r, SB, msg, pub } = prepareVerification(sig, message, publicKey);\n    const hashed = await utils.sha512(r.toRawBytes(), pub.toRawBytes(), msg);\n    return finishVerification(pub, r, SB, hashed);\n}\nfunction verifySync(sig, message, publicKey) {\n    const { r, SB, msg, pub } = prepareVerification(sig, message, publicKey);\n    const hashed = sha512s(r.toRawBytes(), pub.toRawBytes(), msg);\n    return finishVerification(pub, r, SB, hashed);\n}\nexport const sync = {\n    getExtendedPublicKey: getExtendedPublicKeySync,\n    getPublicKey: getPublicKeySync,\n    sign: signSync,\n    verify: verifySync,\n};\nexport async function getSharedSecret(privateKey, publicKey) {\n    const { head } = await getExtendedPublicKey(privateKey);\n    const u = Point.fromHex(publicKey).toX25519();\n    return curve25519.scalarMult(head, u);\n}\nPoint.BASE._setWindowSize(8);\nfunction cswap(swap, x_2, x_3) {\n    const dummy = mod(swap * (x_2 - x_3));\n    x_2 = mod(x_2 - dummy);\n    x_3 = mod(x_3 + dummy);\n    return [x_2, x_3];\n}\nfunction montgomeryLadder(pointU, scalar) {\n    const { P } = CURVE;\n    const u = normalizeScalar(pointU, P);\n    const k = normalizeScalar(scalar, P);\n    const a24 = BigInt(121665);\n    const x_1 = u;\n    let x_2 = _1n;\n    let z_2 = _0n;\n    let x_3 = u;\n    let z_3 = _1n;\n    let swap = _0n;\n    let sw;\n    for (let t = BigInt(255 - 1); t >= _0n; t--) {\n        const k_t = (k >> t) & _1n;\n        swap ^= k_t;\n        sw = cswap(swap, x_2, x_3);\n        x_2 = sw[0];\n        x_3 = sw[1];\n        sw = cswap(swap, z_2, z_3);\n        z_2 = sw[0];\n        z_3 = sw[1];\n        swap = k_t;\n        const A = x_2 + z_2;\n        const AA = mod(A * A);\n        const B = x_2 - z_2;\n        const BB = mod(B * B);\n        const E = AA - BB;\n        const C = x_3 + z_3;\n        const D = x_3 - z_3;\n        const DA = mod(D * A);\n        const CB = mod(C * B);\n        const dacb = DA + CB;\n        const da_cb = DA - CB;\n        x_3 = mod(dacb * dacb);\n        z_3 = mod(x_1 * mod(da_cb * da_cb));\n        x_2 = mod(AA * BB);\n        z_2 = mod(E * (AA + mod(a24 * E)));\n    }\n    sw = cswap(swap, x_2, x_3);\n    x_2 = sw[0];\n    x_3 = sw[1];\n    sw = cswap(swap, z_2, z_3);\n    z_2 = sw[0];\n    z_3 = sw[1];\n    const { pow_p_5_8, b2 } = pow_2_252_3(z_2);\n    const xp2 = mod(pow2(pow_p_5_8, BigInt(3)) * b2);\n    return mod(x_2 * xp2);\n}\nfunction encodeUCoordinate(u) {\n    return numberTo32BytesLE(mod(u, CURVE.P));\n}\nfunction decodeUCoordinate(uEnc) {\n    const u = ensureBytes(uEnc, 32);\n    u[31] &= 127;\n    return bytesToNumberLE(u);\n}\nexport const curve25519 = {\n    BASE_POINT_U: '0900000000000000000000000000000000000000000000000000000000000000',\n    scalarMult(privateKey, publicKey) {\n        const u = decodeUCoordinate(publicKey);\n        const p = decodeScalar25519(privateKey);\n        const pu = montgomeryLadder(u, p);\n        if (pu === _0n)\n            throw new Error('Invalid private or public key received');\n        return encodeUCoordinate(pu);\n    },\n    scalarMultBase(privateKey) {\n        return curve25519.scalarMult(privateKey, curve25519.BASE_POINT_U);\n    },\n};\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nexport const utils = {\n    bytesToHex,\n    hexToBytes,\n    concatBytes,\n    getExtendedPublicKey,\n    mod,\n    invert,\n    TORSION_SUBGROUP: [\n        '0100000000000000000000000000000000000000000000000000000000000000',\n        'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n        '0000000000000000000000000000000000000000000000000000000000000080',\n        '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n        'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n        '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n        '0000000000000000000000000000000000000000000000000000000000000000',\n        'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n    ],\n    hashToPrivateScalar: (hash) => {\n        hash = ensureBytes(hash);\n        if (hash.length < 40 || hash.length > 1024)\n            throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');\n        return mod(bytesToNumberLE(hash), CURVE.l - _1n) + _1n;\n    },\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return new Uint8Array(randomBytes(bytesLength).buffer);\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => {\n        return utils.randomBytes(32);\n    },\n    sha512: async (...messages) => {\n        const message = concatBytes(...messages);\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-512', message.buffer);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            return Uint8Array.from(crypto.node.createHash('sha512').update(message).digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha512 function\");\n        }\n    },\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point.equals(Point.BASE) ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_2n);\n        return cached;\n    },\n    sha512Sync: undefined,\n};\nObject.defineProperties(utils, {\n    sha512Sync: {\n        configurable: false,\n        get() {\n            return _sha512Sync;\n        },\n        set(val) {\n            if (!_sha512Sync)\n                _sha512Sync = val;\n        },\n    },\n});\n","import { Struct, Infer, Result, Context, Describe } from './struct'\nimport { Failure } from './error'\n\n/**\n * Check if a value is an iterator.\n */\n\nfunction isIterable<T>(x: unknown): x is Iterable<T> {\n  return isObject(x) && typeof x[Symbol.iterator] === 'function'\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isObject(x: unknown): x is object {\n  return typeof x === 'object' && x != null\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isPlainObject(x: unknown): x is { [key: string]: any } {\n  if (Object.prototype.toString.call(x) !== '[object Object]') {\n    return false\n  }\n\n  const prototype = Object.getPrototypeOf(x)\n  return prototype === null || prototype === Object.prototype\n}\n\n/**\n * Return a value as a printable string.\n */\n\nexport function print(value: any): string {\n  return typeof value === 'string' ? JSON.stringify(value) : `${value}`\n}\n\n/**\n * Shifts (removes and returns) the first value from the `input` iterator.\n * Like `Array.prototype.shift()` but for an `Iterator`.\n */\n\nexport function shiftIterator<T>(input: Iterator<T>): T | undefined {\n  const { done, value } = input.next()\n  return done ? undefined : value\n}\n\n/**\n * Convert a single validation result to a failure.\n */\n\nexport function toFailure<T, S>(\n  result: string | boolean | Partial<Failure>,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): Failure | undefined {\n  if (result === true) {\n    return\n  } else if (result === false) {\n    result = {}\n  } else if (typeof result === 'string') {\n    result = { message: result }\n  }\n\n  const { path, branch } = context\n  const { type } = struct\n  const {\n    refinement,\n    message = `Expected a value of type \\`${type}\\`${\n      refinement ? ` with refinement \\`${refinement}\\`` : ''\n    }, but received: \\`${print(value)}\\``,\n  } = result\n\n  return {\n    value,\n    type,\n    refinement,\n    key: path[path.length - 1],\n    path,\n    branch,\n    ...result,\n    message,\n  }\n}\n\n/**\n * Convert a validation result to an iterable of failures.\n */\n\nexport function* toFailures<T, S>(\n  result: Result,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): IterableIterator<Failure> {\n  if (!isIterable(result)) {\n    result = [result]\n  }\n\n  for (const r of result) {\n    const failure = toFailure(r, context, struct, value)\n\n    if (failure) {\n      yield failure\n    }\n  }\n}\n\n/**\n * Check a value against a struct, traversing deeply into nested values, and\n * returning an iterator of failures or success.\n */\n\nexport function* run<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    path?: any[]\n    branch?: any[]\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): IterableIterator<[Failure, undefined] | [undefined, T]> {\n  const { path = [], branch = [value], coerce = false, mask = false } = options\n  const ctx: Context = { path, branch }\n\n  if (coerce) {\n    value = struct.coercer(value, ctx)\n\n    if (\n      mask &&\n      struct.type !== 'type' &&\n      isObject(struct.schema) &&\n      isObject(value) &&\n      !Array.isArray(value)\n    ) {\n      for (const key in value) {\n        if (struct.schema[key] === undefined) {\n          delete value[key]\n        }\n      }\n    }\n  }\n\n  let valid = true\n\n  for (const failure of struct.validator(value, ctx)) {\n    valid = false\n    yield [failure, undefined]\n  }\n\n  for (let [k, v, s] of struct.entries(value, ctx)) {\n    const ts = run(v, s as Struct, {\n      path: k === undefined ? path : [...path, k],\n      branch: k === undefined ? branch : [...branch, v],\n      coerce,\n      mask,\n    })\n\n    for (const t of ts) {\n      if (t[0]) {\n        valid = false\n        yield [t[0], undefined]\n      } else if (coerce) {\n        v = t[1]\n\n        if (k === undefined) {\n          value = v\n        } else if (value instanceof Map) {\n          value.set(k, v)\n        } else if (value instanceof Set) {\n          value.add(v)\n        } else if (isObject(value)) {\n          value[k] = v\n        }\n      }\n    }\n  }\n\n  if (valid) {\n    for (const failure of struct.refiner(value as T, ctx)) {\n      valid = false\n      yield [failure, undefined]\n    }\n  }\n\n  if (valid) {\n    yield [undefined, value as T]\n  }\n}\n\n/**\n * Assign properties from one type to another, overwriting existing.\n */\n\nexport type Assign<T, U> = Simplify<U & Omit<T, keyof U>>\n\n/**\n * A schema for enum structs.\n */\n\nexport type EnumSchema<T extends string | number> = { [K in T]: K }\n\n/**\n * Check if a type is an exact match.\n */\n\nexport type IsMatch<T, G> = T extends G ? (G extends T ? T : never) : never\n\n/**\n * Check if a type is a record type.\n */\n\nexport type IsRecord<T> = T extends object\n  ? string extends keyof T\n    ? T\n    : never\n  : never\n/**\n * Check if a type is a tuple.\n */\n\nexport type IsTuple<T> = T extends [any]\n  ? T\n  : T extends [any, any]\n  ? T\n  : T extends [any, any, any]\n  ? T\n  : T extends [any, any, any, any]\n  ? T\n  : T extends [any, any, any, any, any]\n  ? T\n  : never\n\n/**\n * Check if a type is a union.\n */\n\nexport type IsUnion<T, U extends T = T> = (\n  T extends any ? (U extends T ? false : true) : false\n) extends false\n  ? never\n  : T\n\n/**\n * A schema for object structs.\n */\n\nexport type ObjectSchema = Record<string, Struct<any, any>>\n\n/**\n * Infer a type from an object struct schema.\n */\n\nexport type ObjectType<S extends ObjectSchema> = Simplify<\n  Optionalize<{ [K in keyof S]: Infer<S[K]> }>\n>\n\n/**\n * Omit properties from a type that extend from a specific type.\n */\n\nexport type OmitBy<T, V> = Omit<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Normalize properties of a type that allow `undefined` to make them optional.\n */\n\nexport type Optionalize<S extends object> = OmitBy<S, undefined> &\n  Partial<PickBy<S, undefined>>\n\n/**\n * Transform an object schema type to represent a partial.\n */\n\nexport type PartialObjectSchema<S extends ObjectSchema> = {\n  [K in keyof S]: Struct<Infer<S[K]> | undefined>\n}\n\n/**\n * Pick properties from a type that extend from a specific type.\n */\n\nexport type PickBy<T, V> = Pick<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Simplifies a type definition to its most basic representation.\n */\n\nexport type Simplify<T> = T extends any[] | Date\n  ? T\n  : { [K in keyof T]: T[K] } & {}\n\nexport type If<B extends Boolean, Then, Else> = B extends true ? Then : Else\n\n/**\n * A schema for any type of struct.\n */\n\nexport type StructSchema<T> = [T] extends [string]\n  ? [T] extends [IsMatch<T, string>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [number]\n  ? [T] extends [IsMatch<T, number>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [boolean]\n  ? [T] extends [IsMatch<T, boolean>]\n    ? null\n    : T\n  : T extends\n      | bigint\n      | symbol\n      | undefined\n      | null\n      | Function\n      | Date\n      | Error\n      | RegExp\n      | Map<any, any>\n      | WeakMap<any, any>\n      | Set<any>\n      | WeakSet<any>\n      | Promise<any>\n  ? null\n  : T extends Array<infer E>\n  ? T extends IsTuple<T>\n    ? null\n    : Struct<E>\n  : T extends object\n  ? T extends IsRecord<T>\n    ? null\n    : { [K in keyof T]: Describe<T[K]> }\n  : null\n\n/**\n * A schema for tuple structs.\n */\n\nexport type TupleSchema<T> = { [K in keyof T]: Struct<T[K]> }\n","/**\n * A `StructFailure` represents a single specific failure in validation.\n */\n\nexport type Failure = {\n  value: any\n  key: any\n  type: string\n  refinement: string | undefined\n  message: string\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * `StructError` objects are thrown (or returned) when validation fails.\n *\n * Validation logic is design to exit early for maximum performance. The error\n * represents the first error encountered during validation. For more detail,\n * the `error.failures` property is a generator function that can be run to\n * continue validation and receive all the failures in the data.\n */\n\nexport class StructError extends TypeError {\n  value: any\n  key!: any\n  type!: string\n  refinement!: string | undefined\n  path!: Array<any>\n  branch!: Array<any>\n  failures: () => Array<Failure>;\n  [x: string]: any\n\n  constructor(failure: Failure, failures: () => Generator<Failure>) {\n    let cached: Array<Failure> | undefined\n    const { message, ...rest } = failure\n    const { path } = failure\n    const msg =\n      path.length === 0 ? message : `At path: ${path.join('.')} -- ${message}`\n    super(msg)\n    Object.assign(this, rest)\n    this.name = this.constructor.name\n    this.failures = () => {\n      return (cached ??= [failure, ...failures()])\n    }\n  }\n}\n","import { toFailures, shiftIterator, StructSchema, run } from './utils'\nimport { StructError, Failure } from './error'\n\n/**\n * `Struct` objects encapsulate the validation logic for a specific type of\n * values. Once constructed, you use the `assert`, `is` or `validate` helpers to\n * validate unknown input data against the struct.\n */\n\nexport class Struct<T = unknown, S = unknown> {\n  readonly TYPE!: T\n  type: string\n  schema: S\n  coercer: (value: unknown, context: Context) => unknown\n  validator: (value: unknown, context: Context) => Iterable<Failure>\n  refiner: (value: T, context: Context) => Iterable<Failure>\n  entries: (\n    value: unknown,\n    context: Context\n  ) => Iterable<[string | number, unknown, Struct<any> | Struct<never>]>\n\n  constructor(props: {\n    type: string\n    schema: S\n    coercer?: Coercer\n    validator?: Validator\n    refiner?: Refiner<T>\n    entries?: Struct<T, S>['entries']\n  }) {\n    const {\n      type,\n      schema,\n      validator,\n      refiner,\n      coercer = (value: unknown) => value,\n      entries = function* () {},\n    } = props\n\n    this.type = type\n    this.schema = schema\n    this.entries = entries\n    this.coercer = coercer\n\n    if (validator) {\n      this.validator = (value, context) => {\n        const result = validator(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.validator = () => []\n    }\n\n    if (refiner) {\n      this.refiner = (value, context) => {\n        const result = refiner(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.refiner = () => []\n    }\n  }\n\n  /**\n   * Assert that a value passes the struct's validation, throwing if it doesn't.\n   */\n\n  assert(value: unknown): asserts value is T {\n    return assert(value, this)\n  }\n\n  /**\n   * Create a value with the struct's coercion logic, then validate it.\n   */\n\n  create(value: unknown): T {\n    return create(value, this)\n  }\n\n  /**\n   * Check if a value passes the struct's validation.\n   */\n\n  is(value: unknown): value is T {\n    return is(value, this)\n  }\n\n  /**\n   * Mask a value, coercing and validating it, but returning only the subset of\n   * properties defined by the struct's schema.\n   */\n\n  mask(value: unknown): T {\n    return mask(value, this)\n  }\n\n  /**\n   * Validate a value with the struct's validation logic, returning a tuple\n   * representing the result.\n   *\n   * You may optionally pass `true` for the `withCoercion` argument to coerce\n   * the value before attempting to validate it. If you do, the result will\n   * contain the coerced result when successful.\n   */\n\n  validate(\n    value: unknown,\n    options: {\n      coerce?: boolean\n    } = {}\n  ): [StructError, undefined] | [undefined, T] {\n    return validate(value, this, options)\n  }\n}\n\n/**\n * Assert that a value passes a struct, throwing if it doesn't.\n */\n\nexport function assert<T, S>(\n  value: unknown,\n  struct: Struct<T, S>\n): asserts value is T {\n  const result = validate(value, struct)\n\n  if (result[0]) {\n    throw result[0]\n  }\n}\n\n/**\n * Create a value with the coercion logic of struct and validate it.\n */\n\nexport function create<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Mask a value, returning only the subset of properties defined by a struct.\n */\n\nexport function mask<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true, mask: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Check if a value passes a struct.\n */\n\nexport function is<T, S>(value: unknown, struct: Struct<T, S>): value is T {\n  const result = validate(value, struct)\n  return !result[0]\n}\n\n/**\n * Validate a value against a struct, returning an error if invalid, or the\n * value (with potential coercion) if valid.\n */\n\nexport function validate<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): [StructError, undefined] | [undefined, T] {\n  const tuples = run(value, struct, options)\n  const tuple = shiftIterator(tuples)!\n\n  if (tuple[0]) {\n    const error = new StructError(tuple[0], function* () {\n      for (const t of tuples) {\n        if (t[0]) {\n          yield t[0]\n        }\n      }\n    })\n\n    return [error, undefined]\n  } else {\n    const v = tuple[1]\n    return [undefined, v]\n  }\n}\n\n/**\n * A `Context` contains information about the current location of the\n * validation inside the initial input value.\n */\n\nexport type Context = {\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * A type utility to extract the type from a `Struct` class.\n */\n\nexport type Infer<T extends Struct<any, any>> = T['TYPE']\n\n/**\n * A type utility to describe that a struct represents a TypeScript type.\n */\n\nexport type Describe<T> = Struct<T, StructSchema<T>>\n\n/**\n * A `Result` is returned from validation functions.\n */\n\nexport type Result =\n  | boolean\n  | string\n  | Partial<Failure>\n  | Iterable<boolean | string | Partial<Failure>>\n\n/**\n * A `Coercer` takes an unknown value and optionally coerces it.\n */\n\nexport type Coercer<T = unknown> = (value: T, context: Context) => unknown\n\n/**\n * A `Validator` takes an unknown value and validates it.\n */\n\nexport type Validator = (value: unknown, context: Context) => Result\n\n/**\n * A `Refiner` takes a value of a known type and validates it against a further\n * constraint.\n */\n\nexport type Refiner<T> = (value: T, context: Context) => Result\n","import { Struct, Context, Validator } from '../struct'\nimport { object, optional } from './types'\nimport { ObjectSchema, Assign, ObjectType, PartialObjectSchema } from '../utils'\n\n/**\n * Create a new struct that combines the properties properties from multiple\n * object structs.\n *\n * Like JavaScript's `Object.assign` utility.\n */\n\nexport function assign<A extends ObjectSchema, B extends ObjectSchema>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>\n): Struct<ObjectType<Assign<A, B>>, Assign<A, B>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>\n): Struct<ObjectType<Assign<Assign<A, B>, C>>, Assign<Assign<A, B>, C>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>\n): Struct<\n  ObjectType<Assign<Assign<Assign<A, B>, C>, D>>,\n  Assign<Assign<Assign<A, B>, C>, D>\n>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema,\n  E extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>,\n  E: Struct<ObjectType<E>, E>\n): Struct<\n  ObjectType<Assign<Assign<Assign<Assign<A, B>, C>, D>, E>>,\n  Assign<Assign<Assign<Assign<A, B>, C>, D>, E>\n>\nexport function assign(...Structs: Struct<any>[]): any {\n  const schemas = Structs.map((s) => s.schema)\n  const schema = Object.assign({}, ...schemas)\n  return object(schema)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n */\n\nexport function define<T>(name: string, validator: Validator): Struct<T, null> {\n  return new Struct({ type: name, schema: null, validator })\n}\n\n/**\n * Create a new struct based on an existing struct, but the value is allowed to\n * be `undefined`. `log` will be called if the value is not `undefined`.\n */\n\nexport function deprecated<T>(\n  struct: Struct<T>,\n  log: (value: unknown, ctx: Context) => void\n): Struct<T> {\n  return new Struct({\n    ...struct,\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n    validator(value, ctx) {\n      if (value === undefined) {\n        return true\n      } else {\n        log(value, ctx)\n        return struct.validator(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Create a struct with dynamic validation logic.\n *\n * The callback will receive the value currently being validated, and must\n * return a struct object to validate it with. This can be useful to model\n * validation logic that changes based on its input.\n */\n\nexport function dynamic<T>(\n  fn: (value: unknown, ctx: Context) => Struct<T, any>\n): Struct<T, null> {\n  return new Struct({\n    type: 'dynamic',\n    schema: null,\n    *entries(value, ctx) {\n      const struct = fn(value, ctx)\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a struct with lazily evaluated validation logic.\n *\n * The first time validation is run with the struct, the callback will be called\n * and must return a struct object to use. This is useful for cases where you\n * want to have self-referential structs for nested data structures to avoid a\n * circular definition problem.\n */\n\nexport function lazy<T>(fn: () => Struct<T, any>): Struct<T, null> {\n  let struct: Struct<T, any> | undefined\n  return new Struct({\n    type: 'lazy',\n    schema: null,\n    *entries(value, ctx) {\n      struct ??= fn()\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      struct ??= fn()\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      struct ??= fn()\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a new struct based on an existing object struct, but excluding\n * specific properties.\n *\n * Like TypeScript's `Omit` utility.\n */\n\nexport function omit<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Omit<S, K>>, Omit<S, K>> {\n  const { schema } = struct\n  const subschema: any = { ...schema }\n\n  for (const key of keys) {\n    delete subschema[key]\n  }\n\n  return object(subschema as Omit<S, K>)\n}\n\n/**\n * Create a new struct based on an existing object struct, but with all of its\n * properties allowed to be `undefined`.\n *\n * Like TypeScript's `Partial` utility.\n */\n\nexport function partial<S extends ObjectSchema>(\n  struct: Struct<ObjectType<S>, S> | S\n): Struct<ObjectType<PartialObjectSchema<S>>, PartialObjectSchema<S>> {\n  const schema: any =\n    struct instanceof Struct ? { ...struct.schema } : { ...struct }\n\n  for (const key in schema) {\n    schema[key] = optional(schema[key])\n  }\n\n  return object(schema) as any\n}\n\n/**\n * Create a new struct based on an existing object struct, but only including\n * specific properties.\n *\n * Like TypeScript's `Pick` utility.\n */\n\nexport function pick<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Pick<S, K>>, Pick<S, K>> {\n  const { schema } = struct\n  const subschema: any = {}\n\n  for (const key of keys) {\n    subschema[key] = schema[key]\n  }\n\n  return object(subschema as Pick<S, K>)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n *\n * @deprecated This function has been renamed to `define`.\n */\n\nexport function struct<T>(name: string, validator: Validator): Struct<T, null> {\n  console.warn(\n    'superstruct@0.11 - The `struct` helper has been renamed to `define`.'\n  )\n\n  return define(name, validator)\n}\n","import { Infer, Struct } from '../struct'\nimport { define } from './utilities'\nimport {\n  TupleSchema,\n  ObjectSchema,\n  ObjectType,\n  print,\n  run,\n  isObject,\n} from '../utils'\n\n/**\n * Ensure that any value passes validation.\n */\n\nexport function any(): Struct<any, null> {\n  return define('any', () => true)\n}\n\n/**\n * Ensure that a value is an array and that its elements are of a specific type.\n *\n * Note: If you omit the element struct, the arrays elements will not be\n * iterated at all. This can be helpful for cases where performance is critical,\n * and it is preferred to using `array(any())`.\n */\n\nexport function array<T extends Struct<any>>(Element: T): Struct<Infer<T>[], T>\nexport function array(): Struct<unknown[], undefined>\nexport function array<T extends Struct<any>>(Element?: T): any {\n  return new Struct({\n    type: 'array',\n    schema: Element,\n    *entries(value) {\n      if (Element && Array.isArray(value)) {\n        for (const [i, v] of value.entries()) {\n          yield [i, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return Array.isArray(value) ? value.slice() : value\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array value, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a boolean.\n */\n\nexport function boolean(): Struct<boolean, null> {\n  return define('boolean', (value) => {\n    return typeof value === 'boolean'\n  })\n}\n\n/**\n * Ensure that a value is a valid `Date`.\n *\n * Note: this also ensures that the value is *not* an invalid `Date` object,\n * which can occur when parsing a date fails but still returns a `Date`.\n */\n\nexport function date(): Struct<Date, null> {\n  return define('date', (value) => {\n    return (\n      (value instanceof Date && !isNaN(value.getTime())) ||\n      `Expected a valid \\`Date\\` object, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is one of a set of potential values.\n *\n * Note: after creating the struct, you can access the definition of the\n * potential values as `struct.schema`.\n */\n\nexport function enums<T extends number>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends string>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends number | string>(values: readonly T[]): any {\n  const schema: any = {}\n  const description = values.map((v) => print(v)).join()\n\n  for (const key of values) {\n    schema[key] = key\n  }\n\n  return new Struct({\n    type: 'enums',\n    schema,\n    validator(value) {\n      return (\n        values.includes(value as any) ||\n        `Expected one of \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a function.\n */\n\nexport function func(): Struct<Function, null> {\n  return define('func', (value) => {\n    return (\n      typeof value === 'function' ||\n      `Expected a function, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an instance of a specific class.\n */\n\nexport function instance<T extends { new (...args: any): any }>(\n  Class: T\n): Struct<InstanceType<T>, null> {\n  return define('instance', (value) => {\n    return (\n      value instanceof Class ||\n      `Expected a \\`${Class.name}\\` instance, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an integer.\n */\n\nexport function integer(): Struct<number, null> {\n  return define('integer', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value) && Number.isInteger(value)) ||\n      `Expected an integer, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value matches all of a set of types.\n */\n\nexport function intersection<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function intersection<A, B>(\n  Structs: TupleSchema<[A, B]>\n): Struct<A & B, null>\nexport function intersection<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A & B & C, null>\nexport function intersection<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A & B & C & D, null>\nexport function intersection<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A & B & C & D & E, null>\nexport function intersection<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A & B & C & D & E & F, null>\nexport function intersection<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A & B & C & D & E & F & G, null>\nexport function intersection<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A & B & C & D & E & F & G & H, null>\nexport function intersection<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A & B & C & D & E & F & G & H & I, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A & B & C & D & E & F & G & H & I & J, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P & Q,\n  null\n>\nexport function intersection(Structs: Array<Struct<any, any>>): any {\n  return new Struct({\n    type: 'intersection',\n    schema: null,\n    *entries(value, ctx) {\n      for (const S of Structs) {\n        yield* S.entries(value, ctx)\n      }\n    },\n    *validator(value, ctx) {\n      for (const S of Structs) {\n        yield* S.validator(value, ctx)\n      }\n    },\n    *refiner(value, ctx) {\n      for (const S of Structs) {\n        yield* S.refiner(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Ensure that a value is an exact value, using `===` for comparison.\n */\n\nexport function literal<T extends boolean>(constant: T): Struct<T, T>\nexport function literal<T extends number>(constant: T): Struct<T, T>\nexport function literal<T extends string>(constant: T): Struct<T, T>\nexport function literal<T>(constant: T): Struct<T, null>\nexport function literal<T>(constant: T): any {\n  const description = print(constant)\n  const t = typeof constant\n  return new Struct({\n    type: 'literal',\n    schema:\n      t === 'string' || t === 'number' || t === 'boolean' ? constant : null,\n    validator(value) {\n      return (\n        value === constant ||\n        `Expected the literal \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `Map` object, and that its keys and values are of\n * specific types.\n */\n\nexport function map(): Struct<Map<unknown, unknown>, null>\nexport function map<K, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Map<K, V>, null>\nexport function map<K, V>(Key?: Struct<K>, Value?: Struct<V>): any {\n  return new Struct({\n    type: 'map',\n    schema: null,\n    *entries(value) {\n      if (Key && Value && value instanceof Map) {\n        for (const [k, v] of value.entries()) {\n          yield [k as string, k, Key]\n          yield [k as string, v, Value]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Map ? new Map(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Map ||\n        `Expected a \\`Map\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that no value ever passes validation.\n */\n\nexport function never(): Struct<never, null> {\n  return define('never', () => false)\n}\n\n/**\n * Augment an existing struct to allow `null` values.\n */\n\nexport function nullable<T, S>(struct: Struct<T, S>): Struct<T | null, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) => value === null || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === null || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is a number.\n */\n\nexport function number(): Struct<number, null> {\n  return define('number', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value)) ||\n      `Expected a number, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an object, that is has a known set of properties,\n * and that its properties are of specific types.\n *\n * Note: Unrecognized properties will fail validation.\n */\n\nexport function object(): Struct<Record<string, unknown>, null>\nexport function object<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S>\nexport function object<S extends ObjectSchema>(schema?: S): any {\n  const knowns = schema ? Object.keys(schema) : []\n  const Never = never()\n  return new Struct({\n    type: 'object',\n    schema: schema ? schema : null,\n    *entries(value) {\n      if (schema && isObject(value)) {\n        const unknowns = new Set(Object.keys(value))\n\n        for (const key of knowns) {\n          unknowns.delete(key)\n          yield [key, value[key], schema[key]]\n        }\n\n        for (const key of unknowns) {\n          yield [key, value[key], Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n    coercer(value) {\n      return isObject(value) ? { ...value } : value\n    },\n  })\n}\n\n/**\n * Augment a struct to allow `undefined` values.\n */\n\nexport function optional<T, S>(struct: Struct<T, S>): Struct<T | undefined, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) =>\n      value === undefined || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is an object with keys and values of specific types, but\n * without ensuring any specific shape of properties.\n *\n * Like TypeScript's `Record` utility.\n */\n\nexport function record<K extends string, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Record<K, V>, null> {\n  return new Struct({\n    type: 'record',\n    schema: null,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k in value) {\n          const v = value[k]\n          yield [k, k, Key]\n          yield [k, v, Value]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `RegExp`.\n *\n * Note: this does not test the value against the regular expression! For that\n * you need to use the `pattern()` refinement.\n */\n\nexport function regexp(): Struct<RegExp, null> {\n  return define('regexp', (value) => {\n    return value instanceof RegExp\n  })\n}\n\n/**\n * Ensure that a value is a `Set` object, and that its elements are of a\n * specific type.\n */\n\nexport function set(): Struct<Set<unknown>, null>\nexport function set<T>(Element: Struct<T>): Struct<Set<T>, null>\nexport function set<T>(Element?: Struct<T>): any {\n  return new Struct({\n    type: 'set',\n    schema: null,\n    *entries(value) {\n      if (Element && value instanceof Set) {\n        for (const v of value) {\n          yield [v as string, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Set ? new Set(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Set ||\n        `Expected a \\`Set\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a string.\n */\n\nexport function string(): Struct<string, null> {\n  return define('string', (value) => {\n    return (\n      typeof value === 'string' ||\n      `Expected a string, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is a tuple of a specific length, and that each of its\n * elements is of a specific type.\n */\n\nexport function tuple<A>(Structs: TupleSchema<[A]>): Struct<[A], null>\nexport function tuple<A, B>(Structs: TupleSchema<[A, B]>): Struct<[A, B], null>\nexport function tuple<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<[A, B, C], null>\nexport function tuple<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<[A, B, C, D], null>\nexport function tuple<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<[A, B, C, D, E], null>\nexport function tuple<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<[A, B, C, D, E, F], null>\nexport function tuple<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<[A, B, C, D, E, F, G], null>\nexport function tuple<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<[A, B, C, D, E, F, G, H], null>\nexport function tuple<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<[A, B, C, D, E, F, G, H, I], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<[A, B, C, D, E, F, G, H, I, J], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q], null>\nexport function tuple(Elements: Struct<any>[]): any {\n  const Never = never()\n\n  return new Struct({\n    type: 'tuple',\n    schema: null,\n    *entries(value) {\n      if (Array.isArray(value)) {\n        const length = Math.max(Elements.length, value.length)\n\n        for (let i = 0; i < length; i++) {\n          yield [i, value[i], Elements[i] || Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value has a set of known properties of specific types.\n *\n * Note: Unrecognized properties are allowed and untouched. This is similar to\n * how TypeScript's structural typing works.\n */\n\nexport function type<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S> {\n  const keys = Object.keys(schema)\n  return new Struct({\n    type: 'type',\n    schema,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k of keys) {\n          yield [k, value[k], schema[k]]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value matches one of a set of types.\n */\n\nexport function union<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function union<A, B>(Structs: TupleSchema<[A, B]>): Struct<A | B, null>\nexport function union<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A | B | C, null>\nexport function union<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A | B | C | D, null>\nexport function union<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A | B | C | D | E, null>\nexport function union<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A | B | C | D | E | F, null>\nexport function union<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A | B | C | D | E | F | G, null>\nexport function union<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A | B | C | D | E | F | G | H, null>\nexport function union<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A | B | C | D | E | F | G | H | I, null>\nexport function union<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A | B | C | D | E | F | G | H | I | J, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q,\n  null\n>\nexport function union(Structs: Struct<any>[]): any {\n  const description = Structs.map((s) => s.type).join(' | ')\n  return new Struct({\n    type: 'union',\n    schema: null,\n    validator(value, ctx) {\n      const failures = []\n\n      for (const S of Structs) {\n        const [...tuples] = run(value, S, ctx)\n        const [first] = tuples\n\n        if (!first[0]) {\n          return []\n        } else {\n          for (const [failure] of tuples) {\n            if (failure) {\n              failures.push(failure)\n            }\n          }\n        }\n      }\n\n      return [\n        `Expected the value to satisfy a union of \\`${description}\\`, but received: ${print(\n          value\n        )}`,\n        ...failures,\n      ]\n    },\n  })\n}\n\n/**\n * Ensure that any value passes validation, without widening its type to `any`.\n */\n\nexport function unknown(): Struct<unknown, null> {\n  return define('unknown', () => true)\n}\n","import { Struct, is, Coercer } from '../struct'\nimport { isPlainObject } from '../utils'\nimport { string, unknown } from './types'\n\n/**\n * Augment a `Struct` to add an additional coercion step to its input.\n *\n * This allows you to transform input data before validating it, to increase the\n * likelihood that it passes validation—for example for default values, parsing\n * different formats, etc.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function coerce<T, S, C>(\n  struct: Struct<T, S>,\n  condition: Struct<C, any>,\n  coercer: Coercer<C>\n): Struct<T, S> {\n  return new Struct({\n    ...struct,\n    coercer: (value, ctx) => {\n      return is(value, condition)\n        ? struct.coercer(coercer(value, ctx), ctx)\n        : struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Augment a struct to replace `undefined` values with a default.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function defaulted<T, S>(\n  struct: Struct<T, S>,\n  fallback: any,\n  options: {\n    strict?: boolean\n  } = {}\n): Struct<T, S> {\n  return coerce(struct, unknown(), (x) => {\n    const f = typeof fallback === 'function' ? fallback() : fallback\n\n    if (x === undefined) {\n      return f\n    }\n\n    if (!options.strict && isPlainObject(x) && isPlainObject(f)) {\n      const ret = { ...x }\n      let changed = false\n\n      for (const key in f) {\n        if (ret[key] === undefined) {\n          ret[key] = f[key]\n          changed = true\n        }\n      }\n\n      if (changed) {\n        return ret\n      }\n    }\n\n    return x\n  })\n}\n\n/**\n * Augment a struct to trim string inputs.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function trimmed<T, S>(struct: Struct<T, S>): Struct<T, S> {\n  return coerce(struct, string(), (x) => x.trim())\n}\n","/*! noble-secp256k1 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _3n = BigInt(3);\nconst _8n = BigInt(8);\nconst CURVE = Object.freeze({\n    a: _0n,\n    b: BigInt(7),\n    P: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f'),\n    n: BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141'),\n    h: _1n,\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n});\nexport { CURVE };\nfunction weistrass(x) {\n    const { a, b } = CURVE;\n    const x2 = mod(x * x);\n    const x3 = mod(x2 * x);\n    return mod(x3 + a * x + b);\n}\nconst USE_ENDOMORPHISM = CURVE.a === _0n;\nclass ShaError extends Error {\n    constructor(message) {\n        super(message);\n    }\n}\nclass JacobianPoint {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('JacobianPoint#fromAffine: expected Point');\n        }\n        return new JacobianPoint(p.x, p.y, _1n);\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return JacobianPoint.toAffineBatch(points).map(JacobianPoint.fromAffine);\n    }\n    equals(other) {\n        if (!(other instanceof JacobianPoint))\n            throw new TypeError('JacobianPoint expected');\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        const Z1Z1 = mod(Z1 * Z1);\n        const Z2Z2 = mod(Z2 * Z2);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        return U1 === U2 && S1 === S2;\n    }\n    negate() {\n        return new JacobianPoint(this.x, mod(-this.y), this.z);\n    }\n    double() {\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const A = mod(X1 * X1);\n        const B = mod(Y1 * Y1);\n        const C = mod(B * B);\n        const x1b = X1 + B;\n        const D = mod(_2n * (mod(x1b * x1b) - A - C));\n        const E = mod(_3n * A);\n        const F = mod(E * E);\n        const X3 = mod(F - _2n * D);\n        const Y3 = mod(E * (D - X3) - _8n * C);\n        const Z3 = mod(_2n * Y1 * Z1);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    add(other) {\n        if (!(other instanceof JacobianPoint))\n            throw new TypeError('JacobianPoint expected');\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        if (X2 === _0n || Y2 === _0n)\n            return this;\n        if (X1 === _0n || Y1 === _0n)\n            return other;\n        const Z1Z1 = mod(Z1 * Z1);\n        const Z2Z2 = mod(Z2 * Z2);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        const H = mod(U2 - U1);\n        const r = mod(S2 - S1);\n        if (H === _0n) {\n            if (r === _0n) {\n                return this.double();\n            }\n            else {\n                return JacobianPoint.ZERO;\n            }\n        }\n        const HH = mod(H * H);\n        const HHH = mod(H * HH);\n        const V = mod(U1 * HH);\n        const X3 = mod(r * r - HHH - _2n * V);\n        const Y3 = mod(r * (V - X3) - S1 * HHH);\n        const Z3 = mod(Z1 * Z2 * H);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiplyUnsafe(scalar) {\n        const P0 = JacobianPoint.ZERO;\n        if (typeof scalar === 'bigint' && scalar === _0n)\n            return P0;\n        let n = normalizeScalar(scalar);\n        if (n === _1n)\n            return this;\n        if (!USE_ENDOMORPHISM) {\n            let p = P0;\n            let d = this;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        }\n        let { k1neg, k1, k2neg, k2 } = splitScalarEndo(n);\n        let k1p = P0;\n        let k2p = P0;\n        let d = this;\n        while (k1 > _0n || k2 > _0n) {\n            if (k1 & _1n)\n                k1p = k1p.add(d);\n            if (k2 & _1n)\n                k2p = k2p.add(d);\n            d = d.double();\n            k1 >>= _1n;\n            k2 >>= _1n;\n        }\n        if (k1neg)\n            k1p = k1p.negate();\n        if (k2neg)\n            k2p = k2p.negate();\n        k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);\n        return k1p.add(k2p);\n    }\n    precomputeWindow(W) {\n        const windows = USE_ENDOMORPHISM ? 128 / W + 1 : 256 / W + 1;\n        const points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(JacobianPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = JacobianPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = JacobianPoint.ZERO;\n        let f = JacobianPoint.ZERO;\n        const windows = 1 + (USE_ENDOMORPHISM ? 128 / W : 256 / W);\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            if (wbits === 0) {\n                let pr = precomputes[offset];\n                if (window % 2)\n                    pr = pr.negate();\n                f = f.add(pr);\n            }\n            else {\n                let cached = precomputes[offset + Math.abs(wbits) - 1];\n                if (wbits < 0)\n                    cached = cached.negate();\n                p = p.add(cached);\n            }\n        }\n        return { p, f };\n    }\n    multiply(scalar, affinePoint) {\n        let n = normalizeScalar(scalar);\n        let point;\n        let fake;\n        if (USE_ENDOMORPHISM) {\n            const { k1neg, k1, k2neg, k2 } = splitScalarEndo(n);\n            let { p: k1p, f: f1p } = this.wNAF(k1, affinePoint);\n            let { p: k2p, f: f2p } = this.wNAF(k2, affinePoint);\n            if (k1neg)\n                k1p = k1p.negate();\n            if (k2neg)\n                k2p = k2p.negate();\n            k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);\n            point = k1p.add(k2p);\n            fake = f1p.add(f2p);\n        }\n        else {\n            const { p, f } = this.wNAF(n, affinePoint);\n            point = p;\n            fake = f;\n        }\n        return JacobianPoint.normalizeZ([point, fake])[0];\n    }\n    toAffine(invZ = invert(this.z)) {\n        const { x, y, z } = this;\n        const iz1 = invZ;\n        const iz2 = mod(iz1 * iz1);\n        const iz3 = mod(iz2 * iz1);\n        const ax = mod(x * iz2);\n        const ay = mod(y * iz3);\n        const zz = mod(z * iz1);\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return new Point(ax, ay);\n    }\n}\nJacobianPoint.BASE = new JacobianPoint(CURVE.Gx, CURVE.Gy, _1n);\nJacobianPoint.ZERO = new JacobianPoint(_0n, _1n, _0n);\nconst pointPrecomputes = new WeakMap();\nexport class Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    hasEvenY() {\n        return this.y % _2n === _0n;\n    }\n    static fromCompressedHex(bytes) {\n        const isShort = bytes.length === 32;\n        const x = bytesToNumber(isShort ? bytes : bytes.subarray(1));\n        if (!isValidFieldElement(x))\n            throw new Error('Point is not on curve');\n        const y2 = weistrass(x);\n        let y = sqrtMod(y2);\n        const isYOdd = (y & _1n) === _1n;\n        if (isShort) {\n            if (isYOdd)\n                y = mod(-y);\n        }\n        else {\n            const isFirstByteOdd = (bytes[0] & 1) === 1;\n            if (isFirstByteOdd !== isYOdd)\n                y = mod(-y);\n        }\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromUncompressedHex(bytes) {\n        const x = bytesToNumber(bytes.subarray(1, 33));\n        const y = bytesToNumber(bytes.subarray(33, 65));\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        const len = bytes.length;\n        const header = bytes[0];\n        if (len === 32 || (len === 33 && (header === 0x02 || header === 0x03))) {\n            return this.fromCompressedHex(bytes);\n        }\n        if (len === 65 && header === 0x04)\n            return this.fromUncompressedHex(bytes);\n        throw new Error(`Point.fromHex: received invalid point. Expected 32-33 compressed bytes or 65 uncompressed bytes, not ${len}`);\n    }\n    static fromPrivateKey(privateKey) {\n        return Point.BASE.multiply(normalizePrivateKey(privateKey));\n    }\n    static fromSignature(msgHash, signature, recovery) {\n        msgHash = ensureBytes(msgHash);\n        const h = truncateHash(msgHash);\n        const { r, s } = normalizeSignature(signature);\n        if (recovery !== 0 && recovery !== 1) {\n            throw new Error('Cannot recover signature: invalid recovery bit');\n        }\n        const prefix = recovery & 1 ? '03' : '02';\n        const R = Point.fromHex(prefix + numTo32bStr(r));\n        const { n } = CURVE;\n        const rinv = invert(r, n);\n        const u1 = mod(-h * rinv, n);\n        const u2 = mod(s * rinv, n);\n        const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2);\n        if (!Q)\n            throw new Error('Cannot recover signature: point at infinify');\n        Q.assertValidity();\n        return Q;\n    }\n    toRawBytes(isCompressed = false) {\n        return hexToBytes(this.toHex(isCompressed));\n    }\n    toHex(isCompressed = false) {\n        const x = numTo32bStr(this.x);\n        if (isCompressed) {\n            const prefix = this.hasEvenY() ? '02' : '03';\n            return `${prefix}${x}`;\n        }\n        else {\n            return `04${x}${numTo32bStr(this.y)}`;\n        }\n    }\n    toHexX() {\n        return this.toHex(true).slice(2);\n    }\n    toRawX() {\n        return this.toRawBytes(true).slice(1);\n    }\n    assertValidity() {\n        const msg = 'Point is not on elliptic curve';\n        const { x, y } = this;\n        if (!isValidFieldElement(x) || !isValidFieldElement(y))\n            throw new Error(msg);\n        const left = mod(y * y);\n        const right = weistrass(x);\n        if (mod(left - right) !== _0n)\n            throw new Error(msg);\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(this.x, mod(-this.y));\n    }\n    double() {\n        return JacobianPoint.fromAffine(this).double().toAffine();\n    }\n    add(other) {\n        return JacobianPoint.fromAffine(this).add(JacobianPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return JacobianPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n    multiplyAndAddUnsafe(Q, a, b) {\n        const P = JacobianPoint.fromAffine(this);\n        const aP = a === _0n || a === _1n || this !== Point.BASE ? P.multiplyUnsafe(a) : P.multiply(a);\n        const bQ = JacobianPoint.fromAffine(Q).multiplyUnsafe(b);\n        const sum = aP.add(bQ);\n        return sum.equals(JacobianPoint.ZERO) ? undefined : sum.toAffine();\n    }\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _0n);\nfunction sliceDER(s) {\n    return Number.parseInt(s[0], 16) >= 8 ? '00' + s : s;\n}\nfunction parseDERInt(data) {\n    if (data.length < 2 || data[0] !== 0x02) {\n        throw new Error(`Invalid signature integer tag: ${bytesToHex(data)}`);\n    }\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) {\n        throw new Error(`Invalid signature integer: wrong length`);\n    }\n    if (res[0] === 0x00 && res[1] <= 0x7f) {\n        throw new Error('Invalid signature integer: trailing length');\n    }\n    return { data: bytesToNumber(res), left: data.subarray(len + 2) };\n}\nfunction parseDERSignature(data) {\n    if (data.length < 2 || data[0] != 0x30) {\n        throw new Error(`Invalid signature tag: ${bytesToHex(data)}`);\n    }\n    if (data[1] !== data.length - 2) {\n        throw new Error('Invalid signature: incorrect length');\n    }\n    const { data: r, left: sBytes } = parseDERInt(data.subarray(2));\n    const { data: s, left: rBytesLeft } = parseDERInt(sBytes);\n    if (rBytesLeft.length) {\n        throw new Error(`Invalid signature: left bytes after parsing: ${bytesToHex(rBytesLeft)}`);\n    }\n    return { r, s };\n}\nexport class Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromCompact(hex) {\n        const arr = hex instanceof Uint8Array;\n        const name = 'Signature.fromCompact';\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`${name}: Expected string or Uint8Array`);\n        const str = arr ? bytesToHex(hex) : hex;\n        if (str.length !== 128)\n            throw new Error(`${name}: Expected 64-byte hex`);\n        return new Signature(hexToNumber(str.slice(0, 64)), hexToNumber(str.slice(64, 128)));\n    }\n    static fromDER(hex) {\n        const arr = hex instanceof Uint8Array;\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`Signature.fromDER: Expected string or Uint8Array`);\n        const { r, s } = parseDERSignature(arr ? hex : hexToBytes(hex));\n        return new Signature(r, s);\n    }\n    static fromHex(hex) {\n        return this.fromDER(hex);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isWithinCurveOrder(r))\n            throw new Error('Invalid Signature: r must be 0 < r < n');\n        if (!isWithinCurveOrder(s))\n            throw new Error('Invalid Signature: s must be 0 < s < n');\n    }\n    hasHighS() {\n        const HALF = CURVE.n >> _1n;\n        return this.s > HALF;\n    }\n    normalizeS() {\n        return this.hasHighS() ? new Signature(this.r, CURVE.n - this.s) : this;\n    }\n    toDERRawBytes(isCompressed = false) {\n        return hexToBytes(this.toDERHex(isCompressed));\n    }\n    toDERHex(isCompressed = false) {\n        const sHex = sliceDER(numberToHexUnpadded(this.s));\n        if (isCompressed)\n            return sHex;\n        const rHex = sliceDER(numberToHexUnpadded(this.r));\n        const rLen = numberToHexUnpadded(rHex.length / 2);\n        const sLen = numberToHexUnpadded(sHex.length / 2);\n        const length = numberToHexUnpadded(rHex.length / 2 + sHex.length / 2 + 4);\n        return `30${length}02${rLen}${rHex}02${sLen}${sHex}`;\n    }\n    toRawBytes() {\n        return this.toDERRawBytes();\n    }\n    toHex() {\n        return this.toDERHex();\n    }\n    toCompactRawBytes() {\n        return hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n}\nfunction concatBytes(...arrays) {\n    if (!arrays.every((b) => b instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nconst POW_2_256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\nfunction numTo32bStr(num) {\n    if (typeof num !== 'bigint')\n        throw new Error('Expected bigint');\n    if (!(_0n <= num && num < POW_2_256))\n        throw new Error('Expected number < 2^256');\n    return num.toString(16).padStart(64, '0');\n}\nfunction numTo32b(num) {\n    const b = hexToBytes(numTo32bStr(num));\n    if (b.length !== 32)\n        throw new Error('Error: expected 32 bytes');\n    return b;\n}\nfunction numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nfunction hexToNumber(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToNumber: expected string, got ' + typeof hex);\n    }\n    return BigInt(`0x${hex}`);\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex' + hex.length);\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nfunction bytesToNumber(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nfunction ensureBytes(hex) {\n    return hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n}\nfunction normalizeScalar(num) {\n    if (typeof num === 'number' && Number.isSafeInteger(num) && num > 0)\n        return BigInt(num);\n    if (typeof num === 'bigint' && isWithinCurveOrder(num))\n        return num;\n    throw new TypeError('Expected valid private scalar: 0 < scalar < curve.n');\n}\nfunction mod(a, b = CURVE.P) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction sqrtMod(x) {\n    const { P } = CURVE;\n    const _6n = BigInt(6);\n    const _11n = BigInt(11);\n    const _22n = BigInt(22);\n    const _23n = BigInt(23);\n    const _44n = BigInt(44);\n    const _88n = BigInt(88);\n    const b2 = (x * x * x) % P;\n    const b3 = (b2 * b2 * x) % P;\n    const b6 = (pow2(b3, _3n) * b3) % P;\n    const b9 = (pow2(b6, _3n) * b3) % P;\n    const b11 = (pow2(b9, _2n) * b2) % P;\n    const b22 = (pow2(b11, _11n) * b11) % P;\n    const b44 = (pow2(b22, _22n) * b22) % P;\n    const b88 = (pow2(b44, _44n) * b44) % P;\n    const b176 = (pow2(b88, _88n) * b88) % P;\n    const b220 = (pow2(b176, _44n) * b44) % P;\n    const b223 = (pow2(b220, _3n) * b3) % P;\n    const t1 = (pow2(b223, _23n) * b22) % P;\n    const t2 = (pow2(t1, _6n) * b2) % P;\n    return pow2(t2, _2n);\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, p = CURVE.P) {\n    const scratch = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = acc;\n        return mod(acc * num, p);\n    }, _1n);\n    const inverted = invert(lastMultiplied, p);\n    nums.reduceRight((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = mod(acc * scratch[i], p);\n        return mod(acc * num, p);\n    }, inverted);\n    return scratch;\n}\nconst divNearest = (a, b) => (a + b / _2n) / b;\nconst ENDO = {\n    a1: BigInt('0x3086d221a7d46bcde86c90e49284eb15'),\n    b1: -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3'),\n    a2: BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8'),\n    b2: BigInt('0x3086d221a7d46bcde86c90e49284eb15'),\n    POW_2_128: BigInt('0x100000000000000000000000000000000'),\n};\nfunction splitScalarEndo(k) {\n    const { n } = CURVE;\n    const { a1, b1, a2, b2, POW_2_128 } = ENDO;\n    const c1 = divNearest(b2 * k, n);\n    const c2 = divNearest(-b1 * k, n);\n    let k1 = mod(k - c1 * a1 - c2 * a2, n);\n    let k2 = mod(-c1 * b1 - c2 * b2, n);\n    const k1neg = k1 > POW_2_128;\n    const k2neg = k2 > POW_2_128;\n    if (k1neg)\n        k1 = n - k1;\n    if (k2neg)\n        k2 = n - k2;\n    if (k1 > POW_2_128 || k2 > POW_2_128) {\n        throw new Error('splitScalarEndo: Endomorphism failed, k=' + k);\n    }\n    return { k1neg, k1, k2neg, k2 };\n}\nfunction truncateHash(hash) {\n    const { n } = CURVE;\n    const byteLength = hash.length;\n    const delta = byteLength * 8 - 256;\n    let h = bytesToNumber(hash);\n    if (delta > 0)\n        h = h >> BigInt(delta);\n    if (h >= n)\n        h -= n;\n    return h;\n}\nlet _sha256Sync;\nlet _hmacSha256Sync;\nclass HmacDrbg {\n    constructor() {\n        this.v = new Uint8Array(32).fill(1);\n        this.k = new Uint8Array(32).fill(0);\n        this.counter = 0;\n    }\n    hmac(...values) {\n        return utils.hmacSha256(this.k, ...values);\n    }\n    hmacSync(...values) {\n        return _hmacSha256Sync(this.k, ...values);\n    }\n    checkSync() {\n        if (typeof _hmacSha256Sync !== 'function')\n            throw new ShaError('hmacSha256Sync needs to be set');\n    }\n    incr() {\n        if (this.counter >= 1000)\n            throw new Error('Tried 1,000 k values for sign(), all were invalid');\n        this.counter += 1;\n    }\n    async reseed(seed = new Uint8Array()) {\n        this.k = await this.hmac(this.v, Uint8Array.from([0x00]), seed);\n        this.v = await this.hmac(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = await this.hmac(this.v, Uint8Array.from([0x01]), seed);\n        this.v = await this.hmac(this.v);\n    }\n    reseedSync(seed = new Uint8Array()) {\n        this.checkSync();\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x00]), seed);\n        this.v = this.hmacSync(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x01]), seed);\n        this.v = this.hmacSync(this.v);\n    }\n    async generate() {\n        this.incr();\n        this.v = await this.hmac(this.v);\n        return this.v;\n    }\n    generateSync() {\n        this.checkSync();\n        this.incr();\n        this.v = this.hmacSync(this.v);\n        return this.v;\n    }\n}\nfunction isWithinCurveOrder(num) {\n    return _0n < num && num < CURVE.n;\n}\nfunction isValidFieldElement(num) {\n    return _0n < num && num < CURVE.P;\n}\nfunction kmdToSig(kBytes, m, d) {\n    const k = bytesToNumber(kBytes);\n    if (!isWithinCurveOrder(k))\n        return;\n    const { n } = CURVE;\n    const q = Point.BASE.multiply(k);\n    const r = mod(q.x, n);\n    if (r === _0n)\n        return;\n    const s = mod(invert(k, n) * mod(m + d * r, n), n);\n    if (s === _0n)\n        return;\n    const sig = new Signature(r, s);\n    const recovery = (q.x === sig.r ? 0 : 2) | Number(q.y & _1n);\n    return { sig, recovery };\n}\nfunction normalizePrivateKey(key) {\n    let num;\n    if (typeof key === 'bigint') {\n        num = key;\n    }\n    else if (typeof key === 'number' && Number.isSafeInteger(key) && key > 0) {\n        num = BigInt(key);\n    }\n    else if (typeof key === 'string') {\n        if (key.length !== 64)\n            throw new Error('Expected 32 bytes of private key');\n        num = hexToNumber(key);\n    }\n    else if (key instanceof Uint8Array) {\n        if (key.length !== 32)\n            throw new Error('Expected 32 bytes of private key');\n        num = bytesToNumber(key);\n    }\n    else {\n        throw new TypeError('Expected valid private key');\n    }\n    if (!isWithinCurveOrder(num))\n        throw new Error('Expected private key: 0 < key < n');\n    return num;\n}\nfunction normalizePublicKey(publicKey) {\n    if (publicKey instanceof Point) {\n        publicKey.assertValidity();\n        return publicKey;\n    }\n    else {\n        return Point.fromHex(publicKey);\n    }\n}\nfunction normalizeSignature(signature) {\n    if (signature instanceof Signature) {\n        signature.assertValidity();\n        return signature;\n    }\n    try {\n        return Signature.fromDER(signature);\n    }\n    catch (error) {\n        return Signature.fromCompact(signature);\n    }\n}\nexport function getPublicKey(privateKey, isCompressed = false) {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n}\nexport function recoverPublicKey(msgHash, signature, recovery, isCompressed = false) {\n    return Point.fromSignature(msgHash, signature, recovery).toRawBytes(isCompressed);\n}\nfunction isProbPub(item) {\n    const arr = item instanceof Uint8Array;\n    const str = typeof item === 'string';\n    const len = (arr || str) && item.length;\n    if (arr)\n        return len === 33 || len === 65;\n    if (str)\n        return len === 66 || len === 130;\n    if (item instanceof Point)\n        return true;\n    return false;\n}\nexport function getSharedSecret(privateA, publicB, isCompressed = false) {\n    if (isProbPub(privateA))\n        throw new TypeError('getSharedSecret: first arg must be private key');\n    if (!isProbPub(publicB))\n        throw new TypeError('getSharedSecret: second arg must be public key');\n    const b = normalizePublicKey(publicB);\n    b.assertValidity();\n    return b.multiply(normalizePrivateKey(privateA)).toRawBytes(isCompressed);\n}\nfunction bits2int(bytes) {\n    const slice = bytes.length > 32 ? bytes.slice(0, 32) : bytes;\n    return bytesToNumber(slice);\n}\nfunction bits2octets(bytes) {\n    const z1 = bits2int(bytes);\n    const z2 = mod(z1, CURVE.n);\n    return int2octets(z2 < _0n ? z1 : z2);\n}\nfunction int2octets(num) {\n    return numTo32b(num);\n}\nfunction initSigArgs(msgHash, privateKey, extraEntropy) {\n    if (msgHash == null)\n        throw new Error(`sign: expected valid message hash, not \"${msgHash}\"`);\n    const h1 = ensureBytes(msgHash);\n    const d = normalizePrivateKey(privateKey);\n    const seedArgs = [int2octets(d), bits2octets(h1)];\n    if (extraEntropy != null) {\n        if (extraEntropy === true)\n            extraEntropy = utils.randomBytes(32);\n        const e = ensureBytes(extraEntropy);\n        if (e.length !== 32)\n            throw new Error('sign: Expected 32 bytes of extra data');\n        seedArgs.push(e);\n    }\n    const seed = concatBytes(...seedArgs);\n    const m = bits2int(h1);\n    return { seed, m, d };\n}\nfunction finalizeSig(recSig, opts) {\n    let { sig, recovery } = recSig;\n    const { canonical, der, recovered } = Object.assign({ canonical: true, der: true }, opts);\n    if (canonical && sig.hasHighS()) {\n        sig = sig.normalizeS();\n        recovery ^= 1;\n    }\n    const hashed = der ? sig.toDERRawBytes() : sig.toCompactRawBytes();\n    return recovered ? [hashed, recovery] : hashed;\n}\nasync function sign(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    let sig;\n    const drbg = new HmacDrbg();\n    await drbg.reseed(seed);\n    while (!(sig = kmdToSig(await drbg.generate(), m, d)))\n        await drbg.reseed();\n    return finalizeSig(sig, opts);\n}\nfunction signSync(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    let sig;\n    const drbg = new HmacDrbg();\n    drbg.reseedSync(seed);\n    while (!(sig = kmdToSig(drbg.generateSync(), m, d)))\n        drbg.reseedSync();\n    return finalizeSig(sig, opts);\n}\nexport { sign, signSync };\nconst vopts = { strict: true };\nexport function verify(signature, msgHash, publicKey, opts = vopts) {\n    let sig;\n    try {\n        sig = normalizeSignature(signature);\n        msgHash = ensureBytes(msgHash);\n    }\n    catch (error) {\n        return false;\n    }\n    const { r, s } = sig;\n    if (opts.strict && sig.hasHighS())\n        return false;\n    const h = truncateHash(msgHash);\n    let P;\n    try {\n        P = normalizePublicKey(publicKey);\n    }\n    catch (error) {\n        return false;\n    }\n    const { n } = CURVE;\n    const sinv = invert(s, n);\n    const u1 = mod(h * sinv, n);\n    const u2 = mod(r * sinv, n);\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2);\n    if (!R)\n        return false;\n    const v = mod(R.x, n);\n    return v === r;\n}\nfunction schnorrChallengeFinalize(ch) {\n    return mod(bytesToNumber(ch), CURVE.n);\n}\nclass SchnorrSignature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        if (bytes.length !== 64)\n            throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${bytes.length}`);\n        const r = bytesToNumber(bytes.subarray(0, 32));\n        const s = bytesToNumber(bytes.subarray(32, 64));\n        return new SchnorrSignature(r, s);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isValidFieldElement(r) || !isWithinCurveOrder(s))\n            throw new Error('Invalid signature');\n    }\n    toHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n    toRawBytes() {\n        return hexToBytes(this.toHex());\n    }\n}\nfunction schnorrGetPublicKey(privateKey) {\n    return Point.fromPrivateKey(privateKey).toRawX();\n}\nclass InternalSchnorrSignature {\n    constructor(message, privateKey, auxRand = utils.randomBytes()) {\n        if (message == null)\n            throw new TypeError(`sign: Expected valid message, not \"${message}\"`);\n        this.m = ensureBytes(message);\n        const { x, scalar } = this.getScalar(normalizePrivateKey(privateKey));\n        this.px = x;\n        this.d = scalar;\n        this.rand = ensureBytes(auxRand);\n        if (this.rand.length !== 32)\n            throw new TypeError('sign: Expected 32 bytes of aux randomness');\n    }\n    getScalar(priv) {\n        const point = Point.fromPrivateKey(priv);\n        const scalar = point.hasEvenY() ? priv : CURVE.n - priv;\n        return { point, scalar, x: point.toRawX() };\n    }\n    initNonce(d, t0h) {\n        return numTo32b(d ^ bytesToNumber(t0h));\n    }\n    finalizeNonce(k0h) {\n        const k0 = mod(bytesToNumber(k0h), CURVE.n);\n        if (k0 === _0n)\n            throw new Error('sign: Creation of signature failed. k is zero');\n        const { point: R, x: rx, scalar: k } = this.getScalar(k0);\n        return { R, rx, k };\n    }\n    finalizeSig(R, k, e, d) {\n        return new SchnorrSignature(R.x, mod(k + e * d, CURVE.n)).toRawBytes();\n    }\n    error() {\n        throw new Error('sign: Invalid signature produced');\n    }\n    async calc() {\n        const { m, d, px, rand } = this;\n        const tag = utils.taggedHash;\n        const t = this.initNonce(d, await tag(TAGS.aux, rand));\n        const { R, rx, k } = this.finalizeNonce(await tag(TAGS.nonce, t, px, m));\n        const e = schnorrChallengeFinalize(await tag(TAGS.challenge, rx, px, m));\n        const sig = this.finalizeSig(R, k, e, d);\n        if (!(await schnorrVerify(sig, m, px)))\n            this.error();\n        return sig;\n    }\n    calcSync() {\n        const { m, d, px, rand } = this;\n        const tag = utils.taggedHashSync;\n        const t = this.initNonce(d, tag(TAGS.aux, rand));\n        const { R, rx, k } = this.finalizeNonce(tag(TAGS.nonce, t, px, m));\n        const e = schnorrChallengeFinalize(tag(TAGS.challenge, rx, px, m));\n        const sig = this.finalizeSig(R, k, e, d);\n        if (!schnorrVerifySync(sig, m, px))\n            this.error();\n        return sig;\n    }\n}\nasync function schnorrSign(msg, privKey, auxRand) {\n    return new InternalSchnorrSignature(msg, privKey, auxRand).calc();\n}\nfunction schnorrSignSync(msg, privKey, auxRand) {\n    return new InternalSchnorrSignature(msg, privKey, auxRand).calcSync();\n}\nfunction initSchnorrVerify(signature, message, publicKey) {\n    const raw = signature instanceof SchnorrSignature;\n    const sig = raw ? signature : SchnorrSignature.fromHex(signature);\n    if (raw)\n        sig.assertValidity();\n    return {\n        ...sig,\n        m: ensureBytes(message),\n        P: normalizePublicKey(publicKey),\n    };\n}\nfunction finalizeSchnorrVerify(r, P, s, e) {\n    const R = Point.BASE.multiplyAndAddUnsafe(P, normalizePrivateKey(s), mod(-e, CURVE.n));\n    if (!R || !R.hasEvenY() || R.x !== r)\n        return false;\n    return true;\n}\nasync function schnorrVerify(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = schnorrChallengeFinalize(await utils.taggedHash(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        return false;\n    }\n}\nfunction schnorrVerifySync(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = schnorrChallengeFinalize(utils.taggedHashSync(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        if (error instanceof ShaError)\n            throw error;\n        return false;\n    }\n}\nexport const schnorr = {\n    Signature: SchnorrSignature,\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    signSync: schnorrSignSync,\n    verifySync: schnorrVerifySync,\n};\nPoint.BASE._setWindowSize(8);\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nconst TAGS = {\n    challenge: 'BIP0340/challenge',\n    aux: 'BIP0340/aux',\n    nonce: 'BIP0340/nonce',\n};\nconst TAGGED_HASH_PREFIXES = {};\nexport const utils = {\n    bytesToHex,\n    hexToBytes,\n    concatBytes,\n    mod,\n    invert,\n    isValidPrivateKey(privateKey) {\n        try {\n            normalizePrivateKey(privateKey);\n            return true;\n        }\n        catch (error) {\n            return false;\n        }\n    },\n    _bigintTo32Bytes: numTo32b,\n    _normalizePrivateKey: normalizePrivateKey,\n    hashToPrivateKey: (hash) => {\n        hash = ensureBytes(hash);\n        if (hash.length < 40 || hash.length > 1024)\n            throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');\n        const num = mod(bytesToNumber(hash), CURVE.n - _1n) + _1n;\n        return numTo32b(num);\n    },\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return Uint8Array.from(randomBytes(bytesLength));\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => {\n        return utils.hashToPrivateKey(utils.randomBytes(40));\n    },\n    sha256: async (...messages) => {\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-256', concatBytes(...messages));\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHash } = crypto.node;\n            const hash = createHash('sha256');\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha256 function\");\n        }\n    },\n    hmacSha256: async (key, ...messages) => {\n        if (crypto.web) {\n            const ckey = await crypto.web.subtle.importKey('raw', key, { name: 'HMAC', hash: { name: 'SHA-256' } }, false, ['sign']);\n            const message = concatBytes(...messages);\n            const buffer = await crypto.web.subtle.sign('HMAC', ckey, message);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHmac } = crypto.node;\n            const hash = createHmac('sha256', key);\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have hmac-sha256 function\");\n        }\n    },\n    sha256Sync: undefined,\n    hmacSha256Sync: undefined,\n    taggedHash: async (tag, ...messages) => {\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = await utils.sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return utils.sha256(tagP, ...messages);\n    },\n    taggedHashSync: (tag, ...messages) => {\n        if (typeof _sha256Sync !== 'function')\n            throw new ShaError('sha256Sync is undefined, you need to set it');\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = _sha256Sync(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return _sha256Sync(tagP, ...messages);\n    },\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point === Point.BASE ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_3n);\n        return cached;\n    },\n};\nObject.defineProperties(utils, {\n    sha256Sync: {\n        configurable: false,\n        get() {\n            return _sha256Sync;\n        },\n        set(val) {\n            if (!_sha256Sync)\n                _sha256Sync = val;\n        },\n    },\n    hmacSha256Sync: {\n        configurable: false,\n        get() {\n            return _hmacSha256Sync;\n        },\n        set(val) {\n            if (!_hmacSha256Sync)\n                _hmacSha256Sync = val;\n        },\n    },\n});\n","import {sha512} from '@noble/hashes/sha512';\nimport * as ed25519 from '@noble/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\ned25519.utils.sha512Sync = (...m) => sha512(ed25519.utils.concatBytes(...m));\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.sync.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.Point.fromHex(publicKey, true /* strict */);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sync.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sync.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.sync.verify;\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using acounter\n   */\n  static unique(): PublicKey {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","import {Buffer} from 'buffer';\n\nimport {generatePrivateKey, getPublicKey} from './utils/ed25519';\nimport {toBuffer} from './utils/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  private _publicKey: Buffer;\n  /** @internal */\n  private _secretKey: Buffer;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Buffer | Uint8Array | Array<number>) {\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n  get secretKey(): Buffer {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n}\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n","import {LoadedAddresses} from '../connection';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {MessageCompiledInstruction} from './index';\n\nexport type AccountKeysFromLookups = LoadedAddresses;\n\nexport class MessageAccountKeys {\n  staticAccountKeys: Array<PublicKey>;\n  accountKeysFromLookups?: AccountKeysFromLookups;\n\n  constructor(\n    staticAccountKeys: Array<PublicKey>,\n    accountKeysFromLookups?: AccountKeysFromLookups,\n  ) {\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments(): Array<Array<PublicKey>> {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n\n  get(index: number): PublicKey | undefined {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n\n  get length(): number {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(\n    instructions: Array<TransactionInstruction>,\n  ): Array<MessageCompiledInstruction> {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments()\n      .flat()\n      .forEach((key, index) => {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n\n    const findKeyIndex = (key: PublicKey) => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined)\n        throw new Error(\n          'Encountered an unknown instruction account key during compilation',\n        );\n      return keyIndex;\n    };\n\n    return instructions.map((instruction): MessageCompiledInstruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta =>\n          findKeyIndex(meta.pubkey),\n        ),\n        data: instruction.data,\n      };\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {VoteAuthorizeWithSeedArgs} from './programs/vote';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nexport const voteAuthorizeWithSeedArgs = (\n  property: string = 'voteAuthorizeWithSeedArgs',\n) => {\n  return BufferLayout.struct<VoteAuthorizeWithSeedArgs>(\n    [\n      BufferLayout.u32('voteAuthorizationType'),\n      publicKey('currentAuthorityDerivedKeyOwnerPubkey'),\n      rustString('currentAuthorityDerivedKeySeed'),\n      publicKey('newAuthorized'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({layout: item}, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?: TransactionBlockhashCtor | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!verify(signature, signData, publicKey.toBuffer())) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import {MessageHeader, MessageAddressTableLookup} from './index';\nimport {AccountKeysFromLookups} from './account-keys';\nimport {AddressLookupTableAccount} from '../programs';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {PublicKey} from '../publickey';\n\nexport type CompiledKeyMeta = {\n  isSigner: boolean;\n  isWritable: boolean;\n  isInvoked: boolean;\n};\n\ntype KeyMetaMap = Map<string, CompiledKeyMeta>;\n\nexport class CompiledKeys {\n  payer: PublicKey;\n  keyMetaMap: KeyMetaMap;\n\n  constructor(payer: PublicKey, keyMetaMap: KeyMetaMap) {\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(\n    instructions: Array<TransactionInstruction>,\n    payer: PublicKey,\n  ): CompiledKeys {\n    const keyMetaMap: KeyMetaMap = new Map();\n    const getOrInsertDefault = (pubkey: PublicKey): CompiledKeyMeta => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false,\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents(): [MessageHeader, Array<PublicKey>] {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n\n    const writableSigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && meta.isWritable,\n    );\n    const readonlySigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && !meta.isWritable,\n    );\n    const writableNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && meta.isWritable,\n    );\n    const readonlyNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && !meta.isWritable,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length,\n    };\n\n    // sanity checks\n    {\n      assert(\n        writableSigners.length > 0,\n        'Expected at least one writable signer key',\n      );\n      const [payerAddress] = writableSigners[0];\n      assert(\n        payerAddress === this.payer.toBase58(),\n        'Expected first writable signer key to be the fee payer',\n      );\n    }\n\n    const staticAccountKeys = [\n      ...writableSigners.map(([address]) => new PublicKey(address)),\n      ...readonlySigners.map(([address]) => new PublicKey(address)),\n      ...writableNonSigners.map(([address]) => new PublicKey(address)),\n      ...readonlyNonSigners.map(([address]) => new PublicKey(address)),\n    ];\n\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(\n    lookupTable: AddressLookupTableAccount,\n  ): [MessageAddressTableLookup, AccountKeysFromLookups] | undefined {\n    const [writableIndexes, drainedWritableKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable,\n      );\n    const [readonlyIndexes, drainedReadonlyKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable,\n      );\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [\n      {\n        accountKey: lookupTable.key,\n        writableIndexes,\n        readonlyIndexes,\n      },\n      {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys,\n      },\n    ];\n  }\n\n  /** @internal */\n  private drainKeysFoundInLookupTable(\n    lookupTableEntries: Array<PublicKey>,\n    keyMetaFilter: (keyMeta: CompiledKeyMeta) => boolean,\n  ): [Array<number>, Array<PublicKey>] {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry =>\n          entry.equals(key),\n        );\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {TransactionInstruction} from '../transaction';\nimport {CompiledKeys} from './compiled-keys';\nimport {MessageAccountKeys} from './account-keys';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[] | PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nexport type CompileLegacyArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  getAccountKeys(): MessageAccountKeys {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args: CompileLegacyArgs): Message {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(\n      (ix: MessageCompiledInstruction): CompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accounts: ix.accountKeyIndexes,\n        data: bs58.encode(ix.data),\n      }),\n    );\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions,\n    });\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift() as number;\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = byteArray.shift() as number;\n    const numReadonlyUnsignedAccounts = byteArray.shift() as number;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n    byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {TransactionInstruction} from '../transaction';\nimport {AddressLookupTableAccount} from '../programs';\nimport {CompiledKeys} from './compiled-keys';\nimport {AccountKeysFromLookups, MessageAccountKeys} from './account-keys';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport type CompileV0Args = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n  addressLookupTableAccounts?: Array<AddressLookupTableAccount>;\n};\n\nexport type GetAccountKeysArgs =\n  | {\n      accountKeysFromLookups?: AccountKeysFromLookups | null;\n    }\n  | {\n      addressLookupTableAccounts?: AddressLookupTableAccount[] | null;\n    };\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups(): number {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n\n  getAccountKeys(args?: GetAccountKeysArgs): MessageAccountKeys {\n    let accountKeysFromLookups: AccountKeysFromLookups | undefined;\n    if (\n      args &&\n      'accountKeysFromLookups' in args &&\n      args.accountKeysFromLookups\n    ) {\n      if (\n        this.numAccountKeysFromLookups !=\n        args.accountKeysFromLookups.writable.length +\n          args.accountKeysFromLookups.readonly.length\n      ) {\n        throw new Error(\n          'Failed to get account keys because of a mismatch in the number of account keys from lookups',\n        );\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (\n      args &&\n      'addressLookupTableAccounts' in args &&\n      args.addressLookupTableAccounts\n    ) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(\n        args.addressLookupTableAccounts,\n      );\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error(\n        'Failed to get account keys because address table lookups were not resolved',\n      );\n    }\n    return new MessageAccountKeys(\n      this.staticAccountKeys,\n      accountKeysFromLookups,\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce(\n        (count, lookup) => count + lookup.writableIndexes.length,\n        0,\n      );\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(\n    addressLookupTableAccounts: AddressLookupTableAccount[],\n  ): AccountKeysFromLookups {\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: [],\n      readonly: [],\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account =>\n        account.key.equals(tableLookup.accountKey),\n      );\n      if (!tableAccount) {\n        throw new Error(\n          `Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`,\n        );\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args: CompileV0Args): MessageV0 {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n\n    const addressTableLookups = new Array<MessageAddressTableLookup>();\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array(),\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {writable, readonly}] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(\n      staticAccountKeys,\n      accountKeysFromLookups,\n    );\n    const compiledInstructions = accountKeys.compileInstructions(\n      args.instructions,\n    );\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = byteArray.shift() as number;\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: byteArray.shift() as number,\n      numReadonlySignedAccounts: byteArray.shift() as number,\n      numReadonlyUnsignedAccounts: byteArray.shift() as number,\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(byteArray.splice(0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = byteArray.splice(0, writableIndexesLength);\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status =\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n      ? (\n          await connection.confirmTransaction(\n            {\n              signature: signature,\n              blockhash: transaction.recentBlockhash,\n              lastValidBlockHeight: transaction.lastValidBlockHeight,\n            },\n            options && options.commitment,\n          )\n        ).value\n      : (\n          await connection.confirmTransaction(\n            signature,\n            options && options.commitment,\n          )\n        ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  typeof SolanaJSONRPCErrorCode[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n","import * as BufferLayout from '@solana/buffer-layout';\n\nexport interface IAccountStateData {\n  readonly typeIndex: number;\n}\n\n/**\n * @internal\n */\nexport type AccountType<TInputData extends IAccountStateData> = {\n  /** The account type index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nexport function decodeData<TAccountStateData extends IAccountStateData>(\n  type: AccountType<TAccountStateData>,\n  data: Uint8Array,\n): TAccountStateData {\n  let decoded: TAccountStateData;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\n      `invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`,\n    );\n  }\n\n  return decoded;\n}\n","const URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\n\nexport function makeWebsocketUrl(endpoint: string) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [\n    _, // eslint-disable-line @typescript-eslint/no-unused-vars\n    hostish,\n    portWithColon,\n    rest,\n  ] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort =\n    portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to solana-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\n\nimport {AgentManager} from './agent-manager';\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl, {Response} from './fetch-impl';\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n  VersionedTransaction,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy = {\n  signature: TransactionSignature;\n} & BlockhashWithExpiryBlockHeight;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulateTransactionConfig = {\n  /** Optional parameter used to enable signature verification before simulation */\n  sigVerify?: boolean;\n  /** Optional parameter used to replace the simulated transaction's recent blockhash with the latest blockhash */\n  replaceRecentBlockhash?: boolean;\n  /** Optional parameter used to set the commitment level when selecting the latest block */\n  commitment?: Commitment;\n  /** Optional parameter used to specify a list of account addresses to return post simulation state for */\n  accounts?: {\n    encoding: 'base64';\n    addresses: string[];\n  };\n  /** Optional parameter used to specify the minimum block slot that can be used for simulation */\n  minContextSlot?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n};\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n  /** Indicates if the account key came from the transaction or a lookup table */\n  source?: 'transaction' | 'lookupTable';\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A block with parsed transactions\n */\nexport type ParsedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The details of the transaction */\n    transaction: ParsedTransaction;\n    /** Metadata produced from the transaction */\n    meta: ParsedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n  /** The number of blocks beneath this block */\n  blockHeight: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agentManager: AgentManager | undefined;\n  if (!process.env.BROWSER) {\n    agentManager = new AgentManager(url.startsWith('https:') /* useHttps */);\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(\n      pick({\n        pubkey: PublicKeyFromString,\n        signer: boolean(),\n        writable: boolean(),\n        source: optional(\n          union([literal('transaction'), literal('lookupTable')]),\n        ),\n      }),\n    ),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ParsedConfirmedTransactionResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(\n    publicKeys: PublicKey[],\n    rawConfig?: GetMultipleAccountsConfig,\n  ): Promise<\n    RpcResponseAndContext<(AccountInfo<Buffer | ParsedAccountData> | null)[]>\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: BlockheightBasedTransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` using a `TransactionConfirmationConfig` */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy:\n      | BlockheightBasedTransactionConfirmationStrategy\n      | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config =\n        strategy as BlockheightBasedTransactionConfirmationStrategy;\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const subscriptionCommitment = commitment || this.commitment;\n    let timeoutId;\n    let subscriptionId;\n    let done = false;\n\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          rawSignature,\n          (result: SignatureResult, context: Context) => {\n            subscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            done = true;\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    const expiryPromise = new Promise<\n      | {__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED}\n      | {__type: TransactionStatus.TIMED_OUT; timeoutMs: number}\n    >(resolve => {\n      if (typeof strategy === 'string') {\n        let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n        switch (subscriptionCommitment) {\n          case 'processed':\n          case 'recent':\n          case 'single':\n          case 'confirmed':\n          case 'singleGossip': {\n            timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n            break;\n          }\n          // exhaust enums to ensure full coverage\n          case 'finalized':\n          case 'max':\n          case 'root':\n        }\n\n        timeoutId = setTimeout(\n          () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n          timeoutMs,\n        );\n      } else {\n        let config =\n          strategy as BlockheightBasedTransactionConfirmationStrategy;\n        const checkBlockHeight = async () => {\n          try {\n            const blockHeight = await this.getBlockHeight(commitment);\n            return blockHeight;\n          } catch (_e) {\n            return -1;\n          }\n        };\n        (async () => {\n          let currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n          while (currentBlockHeight <= config.lastValidBlockHeight) {\n            await sleep(1000);\n            if (done) return;\n            currentBlockHeight = await checkBlockHeight();\n            if (done) return;\n          }\n          resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n        })();\n      }\n    });\n\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      switch (outcome.__type) {\n        case TransactionStatus.BLOCKHEIGHT_EXCEEDED:\n          throw new TransactionExpiredBlockheightExceededError(rawSignature);\n        case TransactionStatus.PROCESSED:\n          result = outcome.response;\n          break;\n        case TransactionStatus.TIMED_OUT:\n          throw new TransactionExpiredTimeoutError(\n            rawSignature,\n            outcome.timeoutMs / 1000,\n          );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: Message,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const wireMessage = message.serialize().toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result as unknown as RpcResponseAndContext<number>;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta, version}) => ({\n        meta,\n        transaction: {\n          ...transaction,\n          message: versionedMessageFromResponse(version, transaction.message),\n        },\n        version,\n      })),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<ParsedBlockResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetParsedBlockRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    return res.result;\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  async getBlockHeight(\n    commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block height information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n  simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  simulateTransaction(\n    transaction: VersionedTransaction,\n    config?: SimulateTransactionConfig,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(\n    transactionOrMessage: VersionedTransaction | Transaction | Message,\n    configOrSigners?: SimulateTransactionConfig | Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction =\n        Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config: any = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n  sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  sendTransaction(\n    transaction: VersionedTransaction,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(\n    transaction: VersionedTransaction | Transaction,\n    signersOrOptions?: Array<Signer> | SendOptions,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, options);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration =\n      (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._subscriptionsByHash[hash] = {\n        ...subscription,\n        state: 'pending',\n      };\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'subscribing',\n                };\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                };\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'pending',\n                };\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._subscriptionsByHash[hash] = {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  };\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._subscriptionsByHash[hash] = {\n                      ...subscription,\n                      state: 'subscribed',\n                    };\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'unsubscribed',\n                };\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {hmac} from '@noble/hashes/hmac';\nimport {sha256} from '@noble/hashes/sha256';\nimport * as secp256k1 from '@noble/secp256k1';\n\n// Supply a synchronous hashing algorithm to make this\n// library interoperable with the synchronous APIs in web3.js.\nsecp256k1.utils.hmacSha256Sync = (key: Uint8Array, ...msgs: Uint8Array[]) => {\n  const h = hmac.create(sha256, key);\n  msgs.forEach(msg => h.update(msg));\n  return h.digest();\n};\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.signSync>[0],\n  privKey: Parameters<typeof secp256k1.signSync>[1],\n) => secp256k1.signSync(msgHash, privKey, {der: false, recovered: true});\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport {keccak_256} from '@noble/hashes/sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * AuthorizeWithSeed instruction params\n */\nexport type AuthorizeVoteWithSeedParams = {\n  currentAuthorityDerivedKeyBasePubkey: PublicKey;\n  currentAuthorityDerivedKeyOwnerPubkey: PublicKey;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n  votePubkey: PublicKey;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType,\n      },\n    } = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(\n        currentAuthorityDerivedKeyOwnerPubkey,\n      ),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n      votePubkey: instruction.keys[0].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'AuthorizeWithSeed' | 'InitializeAccount' | 'Withdraw';\n\n/** @internal */\nexport type VoteAuthorizeWithSeedArgs = Readonly<{\n  currentAuthorityDerivedKeyOwnerPubkey: Uint8Array;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorized: Uint8Array;\n  voteAuthorizationType: number;\n}>;\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  AuthorizeWithSeed: IInstructionInputData & {\n    voteAuthorizeWithSeedArgs: VoteAuthorizeWithSeedArgs;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<VoteInstructionInputData['AuthorizeWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteAuthorizeWithSeedArgs(),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   */\n  static space: number = 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params: AuthorizeVoteWithSeedParams): Transaction {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(\n          currentAuthorityDerivedKeyOwnerPubkey.toBuffer(),\n        ),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index,\n      },\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insuffcient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sha384 = exports.sha512_256 = exports.sha512 = exports.SHA512 = void 0;\nconst _sha2_js_1 = require(\"./_sha2.js\");\nconst _u64_js_1 = require(\"./_u64.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = _u64_js_1.default.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n)));\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = new Uint32Array(80);\nconst SHA512_W_L = new Uint32Array(80);\nclass SHA512 extends _sha2_js_1.SHA2 {\n    constructor() {\n        super(128, 64, 16, false);\n        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n        // Also looks cleaner and easier to verify with spec.\n        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x6a09e667 | 0;\n        this.Al = 0xf3bcc908 | 0;\n        this.Bh = 0xbb67ae85 | 0;\n        this.Bl = 0x84caa73b | 0;\n        this.Ch = 0x3c6ef372 | 0;\n        this.Cl = 0xfe94f82b | 0;\n        this.Dh = 0xa54ff53a | 0;\n        this.Dl = 0x5f1d36f1 | 0;\n        this.Eh = 0x510e527f | 0;\n        this.El = 0xade682d1 | 0;\n        this.Fh = 0x9b05688c | 0;\n        this.Fl = 0x2b3e6c1f | 0;\n        this.Gh = 0x1f83d9ab | 0;\n        this.Gl = 0xfb41bd6b | 0;\n        this.Hh = 0x5be0cd19 | 0;\n        this.Hl = 0x137e2179 | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = _u64_js_1.default.rotrSH(W15h, W15l, 1) ^ _u64_js_1.default.rotrSH(W15h, W15l, 8) ^ _u64_js_1.default.shrSH(W15h, W15l, 7);\n            const s0l = _u64_js_1.default.rotrSL(W15h, W15l, 1) ^ _u64_js_1.default.rotrSL(W15h, W15l, 8) ^ _u64_js_1.default.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = _u64_js_1.default.rotrSH(W2h, W2l, 19) ^ _u64_js_1.default.rotrBH(W2h, W2l, 61) ^ _u64_js_1.default.shrSH(W2h, W2l, 6);\n            const s1l = _u64_js_1.default.rotrSL(W2h, W2l, 19) ^ _u64_js_1.default.rotrBL(W2h, W2l, 61) ^ _u64_js_1.default.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = _u64_js_1.default.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = _u64_js_1.default.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = _u64_js_1.default.rotrSH(Eh, El, 14) ^ _u64_js_1.default.rotrSH(Eh, El, 18) ^ _u64_js_1.default.rotrBH(Eh, El, 41);\n            const sigma1l = _u64_js_1.default.rotrSL(Eh, El, 14) ^ _u64_js_1.default.rotrSL(Eh, El, 18) ^ _u64_js_1.default.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = _u64_js_1.default.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = _u64_js_1.default.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = _u64_js_1.default.rotrSH(Ah, Al, 28) ^ _u64_js_1.default.rotrBH(Ah, Al, 34) ^ _u64_js_1.default.rotrBH(Ah, Al, 39);\n            const sigma0l = _u64_js_1.default.rotrSL(Ah, Al, 28) ^ _u64_js_1.default.rotrBL(Ah, Al, 34) ^ _u64_js_1.default.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = _u64_js_1.default.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = _u64_js_1.default.add3L(T1l, sigma0l, MAJl);\n            Ah = _u64_js_1.default.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = _u64_js_1.default.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = _u64_js_1.default.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = _u64_js_1.default.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = _u64_js_1.default.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = _u64_js_1.default.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = _u64_js_1.default.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = _u64_js_1.default.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = _u64_js_1.default.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        SHA512_W_H.fill(0);\n        SHA512_W_L.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nexports.SHA512 = SHA512;\nclass SHA512_256 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x22312194 | 0;\n        this.Al = 0xfc2bf72c | 0;\n        this.Bh = 0x9f555fa3 | 0;\n        this.Bl = 0xc84c64c2 | 0;\n        this.Ch = 0x2393b86b | 0;\n        this.Cl = 0x6f53b151 | 0;\n        this.Dh = 0x96387719 | 0;\n        this.Dl = 0x5940eabd | 0;\n        this.Eh = 0x96283ee2 | 0;\n        this.El = 0xa88effe3 | 0;\n        this.Fh = 0xbe5e1e25 | 0;\n        this.Fl = 0x53863992 | 0;\n        this.Gh = 0x2b0199fc | 0;\n        this.Gl = 0x2c85b8aa | 0;\n        this.Hh = 0x0eb72ddc | 0;\n        this.Hl = 0x81c52ca2 | 0;\n        this.outputLen = 32;\n    }\n}\nclass SHA384 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0xcbbb9d5d | 0;\n        this.Al = 0xc1059ed8 | 0;\n        this.Bh = 0x629a292a | 0;\n        this.Bl = 0x367cd507 | 0;\n        this.Ch = 0x9159015a | 0;\n        this.Cl = 0x3070dd17 | 0;\n        this.Dh = 0x152fecd8 | 0;\n        this.Dl = 0xf70e5939 | 0;\n        this.Eh = 0x67332667 | 0;\n        this.El = 0xffc00b31 | 0;\n        this.Fh = 0x8eb44a87 | 0;\n        this.Fl = 0x68581511 | 0;\n        this.Gh = 0xdb0c2e0d | 0;\n        this.Gl = 0x64f98fa7 | 0;\n        this.Hh = 0x47b5481d | 0;\n        this.Hl = 0xbefa4fa4 | 0;\n        this.outputLen = 48;\n    }\n}\nexports.sha512 = (0, utils_js_1.wrapConstructor)(() => new SHA512());\nexports.sha512_256 = (0, utils_js_1.wrapConstructor)(() => new SHA512_256());\nexports.sha384 = (0, utils_js_1.wrapConstructor)(() => new SHA384());\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.crypto = void 0;\nexports.crypto = {\n    node: undefined,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sha256 = void 0;\nconst _sha2_js_1 = require(\"./_sha2.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = new Uint32Array(64);\nclass SHA256 extends _sha2_js_1.SHA2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = (0, utils_js_1.rotr)(W15, 7) ^ (0, utils_js_1.rotr)(W15, 18) ^ (W15 >>> 3);\n            const s1 = (0, utils_js_1.rotr)(W2, 17) ^ (0, utils_js_1.rotr)(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = (0, utils_js_1.rotr)(E, 6) ^ (0, utils_js_1.rotr)(E, 11) ^ (0, utils_js_1.rotr)(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = (0, utils_js_1.rotr)(A, 2) ^ (0, utils_js_1.rotr)(A, 13) ^ (0, utils_js_1.rotr)(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexports.sha256 = (0, utils_js_1.wrapConstructor)(() => new SHA256());\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deserializeUnchecked = exports.deserialize = exports.serialize = exports.BinaryReader = exports.BinaryWriter = exports.BorshError = exports.baseDecode = exports.baseEncode = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bs58_1 = __importDefault(require(\"bs58\"));\n// TODO: Make sure this polyfill not included when not required\nconst encoding = __importStar(require(\"text-encoding-utf-8\"));\nconst ResolvedTextDecoder = typeof TextDecoder !== \"function\" ? encoding.TextDecoder : TextDecoder;\nconst textDecoder = new ResolvedTextDecoder(\"utf-8\", { fatal: true });\nfunction baseEncode(value) {\n    if (typeof value === \"string\") {\n        value = Buffer.from(value, \"utf8\");\n    }\n    return bs58_1.default.encode(Buffer.from(value));\n}\nexports.baseEncode = baseEncode;\nfunction baseDecode(value) {\n    return Buffer.from(bs58_1.default.decode(value));\n}\nexports.baseDecode = baseDecode;\nconst INITIAL_LENGTH = 1024;\nclass BorshError extends Error {\n    constructor(message) {\n        super(message);\n        this.fieldPath = [];\n        this.originalMessage = message;\n    }\n    addToFieldPath(fieldName) {\n        this.fieldPath.splice(0, 0, fieldName);\n        // NOTE: Modifying message directly as jest doesn't use .toString()\n        this.message = this.originalMessage + \": \" + this.fieldPath.join(\".\");\n    }\n}\nexports.BorshError = BorshError;\n/// Binary encoder.\nclass BinaryWriter {\n    constructor() {\n        this.buf = Buffer.alloc(INITIAL_LENGTH);\n        this.length = 0;\n    }\n    maybeResize() {\n        if (this.buf.length < 16 + this.length) {\n            this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);\n        }\n    }\n    writeU8(value) {\n        this.maybeResize();\n        this.buf.writeUInt8(value, this.length);\n        this.length += 1;\n    }\n    writeU16(value) {\n        this.maybeResize();\n        this.buf.writeUInt16LE(value, this.length);\n        this.length += 2;\n    }\n    writeU32(value) {\n        this.maybeResize();\n        this.buf.writeUInt32LE(value, this.length);\n        this.length += 4;\n    }\n    writeU64(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 8)));\n    }\n    writeU128(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 16)));\n    }\n    writeU256(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 32)));\n    }\n    writeU512(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 64)));\n    }\n    writeBuffer(buffer) {\n        // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser\n        this.buf = Buffer.concat([\n            Buffer.from(this.buf.subarray(0, this.length)),\n            buffer,\n            Buffer.alloc(INITIAL_LENGTH),\n        ]);\n        this.length += buffer.length;\n    }\n    writeString(str) {\n        this.maybeResize();\n        const b = Buffer.from(str, \"utf8\");\n        this.writeU32(b.length);\n        this.writeBuffer(b);\n    }\n    writeFixedArray(array) {\n        this.writeBuffer(Buffer.from(array));\n    }\n    writeArray(array, fn) {\n        this.maybeResize();\n        this.writeU32(array.length);\n        for (const elem of array) {\n            this.maybeResize();\n            fn(elem);\n        }\n    }\n    toArray() {\n        return this.buf.subarray(0, this.length);\n    }\n}\nexports.BinaryWriter = BinaryWriter;\nfunction handlingRangeError(target, propertyKey, propertyDescriptor) {\n    const originalMethod = propertyDescriptor.value;\n    propertyDescriptor.value = function (...args) {\n        try {\n            return originalMethod.apply(this, args);\n        }\n        catch (e) {\n            if (e instanceof RangeError) {\n                const code = e.code;\n                if ([\"ERR_BUFFER_OUT_OF_BOUNDS\", \"ERR_OUT_OF_RANGE\"].indexOf(code) >= 0) {\n                    throw new BorshError(\"Reached the end of buffer when deserializing\");\n                }\n            }\n            throw e;\n        }\n    };\n}\nclass BinaryReader {\n    constructor(buf) {\n        this.buf = buf;\n        this.offset = 0;\n    }\n    readU8() {\n        const value = this.buf.readUInt8(this.offset);\n        this.offset += 1;\n        return value;\n    }\n    readU16() {\n        const value = this.buf.readUInt16LE(this.offset);\n        this.offset += 2;\n        return value;\n    }\n    readU32() {\n        const value = this.buf.readUInt32LE(this.offset);\n        this.offset += 4;\n        return value;\n    }\n    readU64() {\n        const buf = this.readBuffer(8);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU128() {\n        const buf = this.readBuffer(16);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU256() {\n        const buf = this.readBuffer(32);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU512() {\n        const buf = this.readBuffer(64);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readBuffer(len) {\n        if (this.offset + len > this.buf.length) {\n            throw new BorshError(`Expected buffer length ${len} isn't within bounds`);\n        }\n        const result = this.buf.slice(this.offset, this.offset + len);\n        this.offset += len;\n        return result;\n    }\n    readString() {\n        const len = this.readU32();\n        const buf = this.readBuffer(len);\n        try {\n            // NOTE: Using TextDecoder to fail on invalid UTF-8\n            return textDecoder.decode(buf);\n        }\n        catch (e) {\n            throw new BorshError(`Error decoding UTF-8 string: ${e}`);\n        }\n    }\n    readFixedArray(len) {\n        return new Uint8Array(this.readBuffer(len));\n    }\n    readArray(fn) {\n        const len = this.readU32();\n        const result = Array();\n        for (let i = 0; i < len; ++i) {\n            result.push(fn());\n        }\n        return result;\n    }\n}\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU8\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU16\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU32\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU64\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU128\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU256\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU512\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readString\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readFixedArray\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readArray\", null);\nexports.BinaryReader = BinaryReader;\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\nfunction serializeField(schema, fieldName, value, fieldType, writer) {\n    try {\n        // TODO: Handle missing values properly (make sure they never result in just skipped write)\n        if (typeof fieldType === \"string\") {\n            writer[`write${capitalizeFirstLetter(fieldType)}`](value);\n        }\n        else if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                if (value.length !== fieldType[0]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[0]}, but got ${value.length} bytes`);\n                }\n                writer.writeFixedArray(value);\n            }\n            else if (fieldType.length === 2 && typeof fieldType[1] === \"number\") {\n                if (value.length !== fieldType[1]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[1]}, but got ${value.length} bytes`);\n                }\n                for (let i = 0; i < fieldType[1]; i++) {\n                    serializeField(schema, null, value[i], fieldType[0], writer);\n                }\n            }\n            else {\n                writer.writeArray(value, (item) => {\n                    serializeField(schema, fieldName, item, fieldType[0], writer);\n                });\n            }\n        }\n        else if (fieldType.kind !== undefined) {\n            switch (fieldType.kind) {\n                case \"option\": {\n                    if (value === null || value === undefined) {\n                        writer.writeU8(0);\n                    }\n                    else {\n                        writer.writeU8(1);\n                        serializeField(schema, fieldName, value, fieldType.type, writer);\n                    }\n                    break;\n                }\n                case \"map\": {\n                    writer.writeU32(value.size);\n                    value.forEach((val, key) => {\n                        serializeField(schema, fieldName, key, fieldType.key, writer);\n                        serializeField(schema, fieldName, val, fieldType.value, writer);\n                    });\n                    break;\n                }\n                default:\n                    throw new BorshError(`FieldType ${fieldType} unrecognized`);\n            }\n        }\n        else {\n            serializeStruct(schema, value, writer);\n        }\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction serializeStruct(schema, obj, writer) {\n    if (typeof obj.borshSerialize === \"function\") {\n        obj.borshSerialize(writer);\n        return;\n    }\n    const structSchema = schema.get(obj.constructor);\n    if (!structSchema) {\n        throw new BorshError(`Class ${obj.constructor.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        structSchema.fields.map(([fieldName, fieldType]) => {\n            serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n        });\n    }\n    else if (structSchema.kind === \"enum\") {\n        const name = obj[structSchema.field];\n        for (let idx = 0; idx < structSchema.values.length; ++idx) {\n            const [fieldName, fieldType] = structSchema.values[idx];\n            if (fieldName === name) {\n                writer.writeU8(idx);\n                serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n                break;\n            }\n        }\n    }\n    else {\n        throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${obj.constructor.name}`);\n    }\n}\n/// Serialize given object using schema of the form:\n/// { class_name -> [ [field_name, field_type], .. ], .. }\nfunction serialize(schema, obj, Writer = BinaryWriter) {\n    const writer = new Writer();\n    serializeStruct(schema, obj, writer);\n    return writer.toArray();\n}\nexports.serialize = serialize;\nfunction deserializeField(schema, fieldName, fieldType, reader) {\n    try {\n        if (typeof fieldType === \"string\") {\n            return reader[`read${capitalizeFirstLetter(fieldType)}`]();\n        }\n        if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                return reader.readFixedArray(fieldType[0]);\n            }\n            else if (typeof fieldType[1] === \"number\") {\n                const arr = [];\n                for (let i = 0; i < fieldType[1]; i++) {\n                    arr.push(deserializeField(schema, null, fieldType[0], reader));\n                }\n                return arr;\n            }\n            else {\n                return reader.readArray(() => deserializeField(schema, fieldName, fieldType[0], reader));\n            }\n        }\n        if (fieldType.kind === \"option\") {\n            const option = reader.readU8();\n            if (option) {\n                return deserializeField(schema, fieldName, fieldType.type, reader);\n            }\n            return undefined;\n        }\n        if (fieldType.kind === \"map\") {\n            let map = new Map();\n            const length = reader.readU32();\n            for (let i = 0; i < length; i++) {\n                const key = deserializeField(schema, fieldName, fieldType.key, reader);\n                const val = deserializeField(schema, fieldName, fieldType.value, reader);\n                map.set(key, val);\n            }\n            return map;\n        }\n        return deserializeStruct(schema, fieldType, reader);\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction deserializeStruct(schema, classType, reader) {\n    if (typeof classType.borshDeserialize === \"function\") {\n        return classType.borshDeserialize(reader);\n    }\n    const structSchema = schema.get(classType);\n    if (!structSchema) {\n        throw new BorshError(`Class ${classType.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        const result = {};\n        for (const [fieldName, fieldType] of schema.get(classType).fields) {\n            result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);\n        }\n        return new classType(result);\n    }\n    if (structSchema.kind === \"enum\") {\n        const idx = reader.readU8();\n        if (idx >= structSchema.values.length) {\n            throw new BorshError(`Enum index: ${idx} is out of range`);\n        }\n        const [fieldName, fieldType] = structSchema.values[idx];\n        const fieldValue = deserializeField(schema, fieldName, fieldType, reader);\n        return new classType({ [fieldName]: fieldValue });\n    }\n    throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${classType.constructor.name}`);\n}\n/// Deserializes object from bytes using schema.\nfunction deserialize(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    const result = deserializeStruct(schema, classType, reader);\n    if (reader.offset < buffer.length) {\n        throw new BorshError(`Unexpected ${buffer.length - reader.offset} bytes after deserialized data`);\n    }\n    return result;\n}\nexports.deserialize = deserialize;\n/// Deserializes object from bytes using schema, without checking the length read\nfunction deserializeUnchecked(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    return deserializeStruct(schema, classType, reader);\n}\nexports.deserializeUnchecked = deserializeUnchecked;\n","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet converter;\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\nfunction toBigIntLE(buf) {\n    {\n        const reversed = Buffer.from(buf);\n        reversed.reverse();\n        const hex = reversed.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\nfunction toBigIntBE(buf) {\n    {\n        const hex = buf.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\nfunction toBufferLE(num, width) {\n    {\n        const hex = num.toString(16);\n        const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n        buffer.reverse();\n        return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\nfunction toBufferBE(num, width) {\n    {\n        const hex = num.toString(16);\n        return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n}\nexports.toBufferBE = toBufferBE;\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Client = void 0;\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _websocket = _interopRequireDefault(require(\"./lib/client/websocket.browser\"));\n\nvar _client = _interopRequireDefault(require(\"./lib/client\"));\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar Client = /*#__PURE__*/function (_CommonClient) {\n  (0, _inherits2[\"default\"])(Client, _CommonClient);\n\n  var _super = _createSuper(Client);\n\n  function Client() {\n    var address = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"ws://localhost:8080\";\n\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$autoconnect = _ref.autoconnect,\n        autoconnect = _ref$autoconnect === void 0 ? true : _ref$autoconnect,\n        _ref$reconnect = _ref.reconnect,\n        reconnect = _ref$reconnect === void 0 ? true : _ref$reconnect,\n        _ref$reconnect_interv = _ref.reconnect_interval,\n        reconnect_interval = _ref$reconnect_interv === void 0 ? 1000 : _ref$reconnect_interv,\n        _ref$max_reconnects = _ref.max_reconnects,\n        max_reconnects = _ref$max_reconnects === void 0 ? 5 : _ref$max_reconnects;\n\n    var generate_request_id = arguments.length > 2 ? arguments[2] : undefined;\n    (0, _classCallCheck2[\"default\"])(this, Client);\n    return _super.call(this, _websocket[\"default\"], address, {\n      autoconnect: autoconnect,\n      reconnect: reconnect,\n      reconnect_interval: reconnect_interval,\n      max_reconnects: max_reconnects\n    }, generate_request_id);\n  }\n\n  return (0, _createClass2[\"default\"])(Client);\n}(_client[\"default\"]);\n\nexports.Client = Client;","/**\n * WebSocket implements a browser-side WebSocket specification.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar WebSocketBrowserImpl = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(WebSocketBrowserImpl, _EventEmitter);\n\n  var _super = _createSuper(WebSocketBrowserImpl);\n\n  /** Instantiate a WebSocket class\n   * @constructor\n   * @param {String} address - url to a websocket server\n   * @param {(Object)} options - websocket options\n   * @param {(String|Array)} protocols - a list of protocols\n   * @return {WebSocketBrowserImpl} - returns a WebSocket instance\n   */\n  function WebSocketBrowserImpl(address, options, protocols) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, WebSocketBrowserImpl);\n    _this = _super.call(this);\n    _this.socket = new window.WebSocket(address, protocols);\n\n    _this.socket.onopen = function () {\n      return _this.emit(\"open\");\n    };\n\n    _this.socket.onmessage = function (event) {\n      return _this.emit(\"message\", event.data);\n    };\n\n    _this.socket.onerror = function (error) {\n      return _this.emit(\"error\", error);\n    };\n\n    _this.socket.onclose = function (event) {\n      _this.emit(\"close\", event.code, event.reason);\n    };\n\n    return _this;\n  }\n  /**\n   * Sends data through a websocket connection\n   * @method\n   * @param {(String|Object)} data - data to be sent via websocket\n   * @param {Object} optionsOrCallback - ws options\n   * @param {Function} callback - a callback called once the data is sent\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(WebSocketBrowserImpl, [{\n    key: \"send\",\n    value: function send(data, optionsOrCallback, callback) {\n      var cb = callback || optionsOrCallback;\n\n      try {\n        this.socket.send(data);\n        cb();\n      } catch (error) {\n        cb(error);\n      }\n    }\n    /**\n     * Closes an underlying socket\n     * @method\n     * @param {Number} code - status code explaining why the connection is being closed\n     * @param {String} reason - a description why the connection is closing\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, reason) {\n      this.socket.close(code, reason);\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(type, listener, options) {\n      this.socket.addEventListener(type, listener, options);\n    }\n  }]);\n  return WebSocketBrowserImpl;\n}(_eventemitter.EventEmitter);\n/**\n * factory method for common WebSocket instance\n * @method\n * @param {String} address - url to a websocket server\n * @param {(Object)} options - websocket options\n * @return {Undefined}\n */\n\n\nfunction _default(address, options) {\n  return new WebSocketBrowserImpl(address, options);\n}","/**\n * \"Client\" wraps \"ws\" or a browser-implemented \"WebSocket\" library\n * according to the environment providing JSON RPC 2.0 support on top.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar __rest = void 0 && (void 0).__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}; // @ts-ignore\n\n\nvar CommonClient = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(CommonClient, _EventEmitter);\n\n  var _super = _createSuper(CommonClient);\n\n  /**\n   * Instantiate a Client class.\n   * @constructor\n   * @param {webSocketFactory} webSocketFactory - factory method for WebSocket\n   * @param {String} address - url to a websocket server\n   * @param {Object} options - ws options object with reconnect parameters\n   * @param {Function} generate_request_id - custom generation request Id\n   * @return {CommonClient}\n   */\n  function CommonClient(webSocketFactory) {\n    var _this;\n\n    var address = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"ws://localhost:8080\";\n\n    var _a = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var generate_request_id = arguments.length > 3 ? arguments[3] : undefined;\n    (0, _classCallCheck2[\"default\"])(this, CommonClient);\n\n    var _a$autoconnect = _a.autoconnect,\n        autoconnect = _a$autoconnect === void 0 ? true : _a$autoconnect,\n        _a$reconnect = _a.reconnect,\n        reconnect = _a$reconnect === void 0 ? true : _a$reconnect,\n        _a$reconnect_interval = _a.reconnect_interval,\n        reconnect_interval = _a$reconnect_interval === void 0 ? 1000 : _a$reconnect_interval,\n        _a$max_reconnects = _a.max_reconnects,\n        max_reconnects = _a$max_reconnects === void 0 ? 5 : _a$max_reconnects,\n        rest_options = __rest(_a, [\"autoconnect\", \"reconnect\", \"reconnect_interval\", \"max_reconnects\"]);\n\n    _this = _super.call(this);\n    _this.webSocketFactory = webSocketFactory;\n    _this.queue = {};\n    _this.rpc_id = 0;\n    _this.address = address;\n    _this.autoconnect = autoconnect;\n    _this.ready = false;\n    _this.reconnect = reconnect;\n    _this.reconnect_interval = reconnect_interval;\n    _this.max_reconnects = max_reconnects;\n    _this.rest_options = rest_options;\n    _this.current_reconnects = 0;\n\n    _this.generate_request_id = generate_request_id || function () {\n      return ++_this.rpc_id;\n    };\n\n    if (_this.autoconnect) _this._connect(_this.address, Object.assign({\n      autoconnect: _this.autoconnect,\n      reconnect: _this.reconnect,\n      reconnect_interval: _this.reconnect_interval,\n      max_reconnects: _this.max_reconnects\n    }, _this.rest_options));\n    return _this;\n  }\n  /**\n   * Connects to a defined server if not connected already.\n   * @method\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(CommonClient, [{\n    key: \"connect\",\n    value: function connect() {\n      if (this.socket) return;\n\n      this._connect(this.address, Object.assign({\n        autoconnect: this.autoconnect,\n        reconnect: this.reconnect,\n        reconnect_interval: this.reconnect_interval,\n        max_reconnects: this.max_reconnects\n      }, this.rest_options));\n    }\n    /**\n     * Calls a registered RPC method on server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object|Array} params - optional method parameters\n     * @param {Number} timeout - RPC reply timeout value\n     * @param {Object} ws_opts - options passed to ws\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"call\",\n    value: function call(method, params, timeout, ws_opts) {\n      var _this2 = this;\n\n      if (!ws_opts && \"object\" === (0, _typeof2[\"default\"])(timeout)) {\n        ws_opts = timeout;\n        timeout = null;\n      }\n\n      return new Promise(function (resolve, reject) {\n        if (!_this2.ready) return reject(new Error(\"socket not ready\"));\n\n        var rpc_id = _this2.generate_request_id(method, params);\n\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null,\n          id: rpc_id\n        };\n\n        _this2.socket.send(JSON.stringify(message), ws_opts, function (error) {\n          if (error) return reject(error);\n          _this2.queue[rpc_id] = {\n            promise: [resolve, reject]\n          };\n\n          if (timeout) {\n            _this2.queue[rpc_id].timeout = setTimeout(function () {\n              delete _this2.queue[rpc_id];\n              reject(new Error(\"reply timeout\"));\n            }, timeout);\n          }\n        });\n      });\n    }\n    /**\n     * Logins with the other side of the connection.\n     * @method\n     * @param {Object} params - Login credentials object\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"login\",\n    value: function () {\n      var _login = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(params) {\n        var resp;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.call(\"rpc.login\", params);\n\n              case 2:\n                resp = _context.sent;\n\n                if (resp) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error(\"authentication failed\");\n\n              case 5:\n                return _context.abrupt(\"return\", resp);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function login(_x) {\n        return _login.apply(this, arguments);\n      }\n\n      return login;\n    }()\n    /**\n     * Fetches a list of client's methods registered on server.\n     * @method\n     * @return {Array}\n     */\n\n  }, {\n    key: \"listMethods\",\n    value: function () {\n      var _listMethods = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2() {\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.call(\"__listMethods\");\n\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function listMethods() {\n        return _listMethods.apply(this, arguments);\n      }\n\n      return listMethods;\n    }()\n    /**\n     * Sends a JSON-RPC 2.0 notification to server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object} params - optional method parameters\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"notify\",\n    value: function notify(method, params) {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (!_this3.ready) return reject(new Error(\"socket not ready\"));\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null\n        };\n\n        _this3.socket.send(JSON.stringify(message), function (error) {\n          if (error) return reject(error);\n          resolve();\n        });\n      });\n    }\n    /**\n     * Subscribes for a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function () {\n      var _subscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee3(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context3.next = 3;\n                return this.call(\"rpc.on\", event);\n\n              case 3:\n                result = _context3.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed subscribing to an event '\" + event + \"' with: \" + result[event]);\n\n              case 6:\n                return _context3.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function subscribe(_x2) {\n        return _subscribe.apply(this, arguments);\n      }\n\n      return subscribe;\n    }()\n    /**\n     * Unsubscribes from a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function () {\n      var _unsubscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee4(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context4.next = 3;\n                return this.call(\"rpc.off\", event);\n\n              case 3:\n                result = _context4.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed unsubscribing from an event with: \" + result);\n\n              case 6:\n                return _context4.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function unsubscribe(_x3) {\n        return _unsubscribe.apply(this, arguments);\n      }\n\n      return unsubscribe;\n    }()\n    /**\n     * Closes a WebSocket connection gracefully.\n     * @method\n     * @param {Number} code - socket close code\n     * @param {String} data - optional data to be sent before closing\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, data) {\n      this.socket.close(code || 1000, data);\n    }\n    /**\n     * Connection/Message handler.\n     * @method\n     * @private\n     * @param {String} address - WebSocket API address\n     * @param {Object} options - ws options object\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"_connect\",\n    value: function _connect(address, options) {\n      var _this4 = this;\n\n      this.socket = this.webSocketFactory(address, options);\n      this.socket.addEventListener(\"open\", function () {\n        _this4.ready = true;\n\n        _this4.emit(\"open\");\n\n        _this4.current_reconnects = 0;\n      });\n      this.socket.addEventListener(\"message\", function (_ref) {\n        var message = _ref.data;\n        if (message instanceof ArrayBuffer) message = Buffer.from(message).toString();\n\n        try {\n          message = JSON.parse(message);\n        } catch (error) {\n          return;\n        } // check if any listeners are attached and forward event\n\n\n        if (message.notification && _this4.listeners(message.notification).length) {\n          if (!Object.keys(message.params).length) return _this4.emit(message.notification);\n          var args = [message.notification];\n          if (message.params.constructor === Object) args.push(message.params);else // using for-loop instead of unshift/spread because performance is better\n            for (var i = 0; i < message.params.length; i++) {\n              args.push(message.params[i]);\n            } // run as microtask so that pending queue messages are resolved first\n          // eslint-disable-next-line prefer-spread\n\n          return Promise.resolve().then(function () {\n            _this4.emit.apply(_this4, args);\n          });\n        }\n\n        if (!_this4.queue[message.id]) {\n          // general JSON RPC 2.0 events\n          if (message.method && message.params) {\n            // run as microtask so that pending queue messages are resolved first\n            return Promise.resolve().then(function () {\n              _this4.emit(message.method, message.params);\n            });\n          }\n\n          return;\n        } // reject early since server's response is invalid\n\n\n        if (\"error\" in message === \"result\" in message) _this4.queue[message.id].promise[1](new Error(\"Server response malformed. Response must include either \\\"result\\\"\" + \" or \\\"error\\\", but not both.\"));\n        if (_this4.queue[message.id].timeout) clearTimeout(_this4.queue[message.id].timeout);\n        if (message.error) _this4.queue[message.id].promise[1](message.error);else _this4.queue[message.id].promise[0](message.result);\n        delete _this4.queue[message.id];\n      });\n      this.socket.addEventListener(\"error\", function (error) {\n        return _this4.emit(\"error\", error);\n      });\n      this.socket.addEventListener(\"close\", function (_ref2) {\n        var code = _ref2.code,\n            reason = _ref2.reason;\n        if (_this4.ready) // Delay close event until internal state is updated\n          setTimeout(function () {\n            return _this4.emit(\"close\", code, reason);\n          }, 0);\n        _this4.ready = false;\n        _this4.socket = undefined;\n        if (code === 1000) return;\n        _this4.current_reconnects++;\n        if (_this4.reconnect && (_this4.max_reconnects > _this4.current_reconnects || _this4.max_reconnects === 0)) setTimeout(function () {\n          return _this4._connect(address, options);\n        }, _this4.reconnect_interval);\n      });\n    }\n  }]);\n  return CommonClient;\n}(_eventemitter.EventEmitter);\n\nexports[\"default\"] = CommonClient;","'use strict';\n\nconst uuid = require('uuid').v4;\nconst generateRequest = require('../../generateRequest');\n\n/**\n * Constructor for a Jayson Browser Client that does not depend any node.js core libraries\n * @class ClientBrowser\n * @param {Function} callServer Method that calls the server, receives the stringified request and a regular node-style callback\n * @param {Object} [options]\n * @param {Function} [options.reviver] Reviver function for JSON\n * @param {Function} [options.replacer] Replacer function for JSON\n * @param {Number} [options.version=2] JSON-RPC version to use (1|2)\n * @param {Function} [options.generator] Function to use for generating request IDs\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n * @return {ClientBrowser}\n */\nconst ClientBrowser = function(callServer, options) {\n  if(!(this instanceof ClientBrowser)) {\n    return new ClientBrowser(callServer, options);\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  this.options = {\n    reviver: typeof options.reviver !== 'undefined' ? options.reviver : null,\n    replacer: typeof options.replacer !== 'undefined' ? options.replacer : null,\n    generator: typeof options.generator !== 'undefined' ? options.generator : function() { return uuid(); },\n    version: typeof options.version !== 'undefined' ? options.version : 2,\n    notificationIdNull: typeof options.notificationIdNull === 'boolean' ? options.notificationIdNull : false,\n  };\n\n  this.callServer = callServer;\n};\n\nmodule.exports = ClientBrowser;\n\n/**\n *  Creates a request and dispatches it if given a callback.\n *  @param {String|Array} method A batch request if passed an Array, or a method name if passed a String\n *  @param {Array|Object} [params] Parameters for the method\n *  @param {String|Number} [id] Optional id. If undefined an id will be generated. If null it creates a notification request\n *  @param {Function} [callback] Request callback. If specified, executes the request rather than only returning it.\n *  @throws {TypeError} Invalid parameters\n *  @return {Object} JSON-RPC 1.0 or 2.0 compatible request\n */\nClientBrowser.prototype.request = function(method, params, id, callback) {\n  const self = this;\n  let request = null;\n\n  // is this a batch request?\n  const isBatch = Array.isArray(method) && typeof params === 'function';\n\n  if (this.options.version === 1 && isBatch) {\n    throw new TypeError('JSON-RPC 1.0 does not support batching');\n  }\n\n  // is this a raw request?\n  const isRaw = !isBatch && method && typeof method === 'object' && typeof params === 'function';\n\n  if(isBatch || isRaw) {\n    callback = params;\n    request = method;\n  } else {\n    if(typeof id === 'function') {\n      callback = id;\n      // specifically undefined because \"null\" is a notification request\n      id = undefined;\n    }\n\n    const hasCallback = typeof callback === 'function';\n\n    try {\n      request = generateRequest(method, params, id, {\n        generator: this.options.generator,\n        version: this.options.version,\n        notificationIdNull: this.options.notificationIdNull,\n      });\n    } catch(err) {\n      if(hasCallback) {\n        return callback(err);\n      }\n      throw err;\n    }\n\n    // no callback means we should just return a raw request\n    if(!hasCallback) {\n      return request;\n    }\n\n  }\n\n  let message;\n  try {\n    message = JSON.stringify(request, this.options.replacer);\n  } catch(err) {\n    return callback(err);\n  }\n\n  this.callServer(message, function(err, response) {\n    self._parseResponse(err, response, callback);\n  });\n\n  // always return the raw request\n  return request;\n};\n\n/**\n * Parses a response from a server\n * @param {Object} err Error to pass on that is unrelated to the actual response\n * @param {String} responseText JSON-RPC 1.0 or 2.0 response\n * @param {Function} callback Callback that will receive different arguments depending on the amount of parameters\n * @private\n */\nClientBrowser.prototype._parseResponse = function(err, responseText, callback) {\n  if(err) {\n    callback(err);\n    return;\n  }\n\n  if(!responseText) {\n    // empty response text, assume that is correct because it could be a\n    // notification which jayson does not give any body for\n    return callback();\n  }\n\n  let response;\n  try {\n    response = JSON.parse(responseText, this.options.reviver);\n  } catch(err) {\n    return callback(err);\n  }\n\n  if(callback.length === 3) {\n    // if callback length is 3, we split callback arguments on error and response\n\n    // is batch response?\n    if(Array.isArray(response)) {\n\n      // neccesary to split strictly on validity according to spec here\n      const isError = function(res) {\n        return typeof res.error !== 'undefined';\n      };\n\n      const isNotError = function (res) {\n        return !isError(res);\n      };\n\n      return callback(null, response.filter(isError), response.filter(isNotError));\n    \n    } else {\n\n      // split regardless of validity\n      return callback(null, response.error, response.result);\n    \n    }\n  \n  }\n\n  callback(null, response);\n};\n","'use strict';\n\nconst uuid = require('uuid').v4;\n\n/**\n *  Generates a JSON-RPC 1.0 or 2.0 request\n *  @param {String} method Name of method to call\n *  @param {Array|Object} params Array of parameters passed to the method as specified, or an object of parameter names and corresponding value\n *  @param {String|Number|null} [id] Request ID can be a string, number, null for explicit notification or left out for automatic generation\n *  @param {Object} [options]\n *  @param {Number} [options.version=2] JSON-RPC version to use (1 or 2)\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n *  @param {Function} [options.generator] Passed the request, and the options object and is expected to return a request ID\n *  @throws {TypeError} If any of the parameters are invalid\n *  @return {Object} A JSON-RPC 1.0 or 2.0 request\n *  @memberOf Utils\n */\nconst generateRequest = function(method, params, id, options) {\n  if(typeof method !== 'string') {\n    throw new TypeError(method + ' must be a string');\n  }\n\n  options = options || {};\n\n  // check valid version provided\n  const version = typeof options.version === 'number' ? options.version : 2;\n  if (version !== 1 && version !== 2) {\n    throw new TypeError(version + ' must be 1 or 2');\n  }\n\n  const request = {\n    method: method\n  };\n\n  if(version === 2) {\n    request.jsonrpc = '2.0';\n  }\n\n  if(params) {\n    // params given, but invalid?\n    if(typeof params !== 'object' && !Array.isArray(params)) {\n      throw new TypeError(params + ' must be an object, array or omitted');\n    }\n    request.params = params;\n  }\n\n  // if id was left out, generate one (null means explicit notification)\n  if(typeof(id) === 'undefined') {\n    const generator = typeof options.generator === 'function' ? options.generator : function() { return uuid(); };\n    request.id = generator(request, options);\n  } else if (version === 2 && id === null) {\n    // we have a version 2 notification\n    if (options.notificationIdNull) {\n      request.id = null; // id will not be set at all unless option provided\n    }\n  } else {\n    request.id = id;\n  }\n\n  return request;\n};\n\nmodule.exports = generateRequest;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.shake256 = exports.shake128 = exports.keccak_512 = exports.keccak_384 = exports.keccak_256 = exports.keccak_224 = exports.sha3_512 = exports.sha3_384 = exports.sha3_256 = exports.sha3_224 = exports.Keccak = exports.keccakP = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst _u64_js_1 = require(\"./_u64.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _7n = BigInt(7);\nconst _256n = BigInt(256);\nconst _0x71n = BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n    // Pi\n    [x, y] = [y, (2 * x + 3 * y) % 5];\n    SHA3_PI.push(2 * (5 * y + x));\n    // Rotational\n    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n    // Iota\n    let t = _0n;\n    for (let j = 0; j < 7; j++) {\n        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n        if (R & _2n)\n            t ^= _1n << ((_1n << BigInt(j)) - _1n);\n    }\n    _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = _u64_js_1.default.split(_SHA3_IOTA, true);\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s) => s > 32 ? _u64_js_1.default.rotlBH(h, l, s) : _u64_js_1.default.rotlSH(h, l, s);\nconst rotlL = (h, l, s) => s > 32 ? _u64_js_1.default.rotlBL(h, l, s) : _u64_js_1.default.rotlSL(h, l, s);\n// Same as keccakf1600, but allows to skip some rounds\nfunction keccakP(s, rounds = 24) {\n    const B = new Uint32Array(5 * 2);\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n    for (let round = 24 - rounds; round < 24; round++) {\n        // Theta θ\n        for (let x = 0; x < 10; x++)\n            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n        for (let x = 0; x < 10; x += 2) {\n            const idx1 = (x + 8) % 10;\n            const idx0 = (x + 2) % 10;\n            const B0 = B[idx0];\n            const B1 = B[idx0 + 1];\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n            for (let y = 0; y < 50; y += 10) {\n                s[x + y] ^= Th;\n                s[x + y + 1] ^= Tl;\n            }\n        }\n        // Rho (ρ) and Pi (π)\n        let curH = s[2];\n        let curL = s[3];\n        for (let t = 0; t < 24; t++) {\n            const shift = SHA3_ROTL[t];\n            const Th = rotlH(curH, curL, shift);\n            const Tl = rotlL(curH, curL, shift);\n            const PI = SHA3_PI[t];\n            curH = s[PI];\n            curL = s[PI + 1];\n            s[PI] = Th;\n            s[PI + 1] = Tl;\n        }\n        // Chi (χ)\n        for (let y = 0; y < 50; y += 10) {\n            for (let x = 0; x < 10; x++)\n                B[x] = s[y + x];\n            for (let x = 0; x < 10; x++)\n                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n        }\n        // Iota (ι)\n        s[0] ^= SHA3_IOTA_H[round];\n        s[1] ^= SHA3_IOTA_L[round];\n    }\n    B.fill(0);\n}\nexports.keccakP = keccakP;\nclass Keccak extends utils_js_1.Hash {\n    // NOTE: we accept arguments in bytes instead of bits here.\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\n        super();\n        this.blockLen = blockLen;\n        this.suffix = suffix;\n        this.outputLen = outputLen;\n        this.enableXOF = enableXOF;\n        this.rounds = rounds;\n        this.pos = 0;\n        this.posOut = 0;\n        this.finished = false;\n        this.destroyed = false;\n        // Can be passed from user as dkLen\n        _assert_js_1.default.number(outputLen);\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n        if (0 >= this.blockLen || this.blockLen >= 200)\n            throw new Error('Sha3 supports only keccak-f1600 function');\n        this.state = new Uint8Array(200);\n        this.state32 = (0, utils_js_1.u32)(this.state);\n    }\n    keccak() {\n        keccakP(this.state32, this.rounds);\n        this.posOut = 0;\n        this.pos = 0;\n    }\n    update(data) {\n        _assert_js_1.default.exists(this);\n        const { blockLen, state } = this;\n        data = (0, utils_js_1.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            for (let i = 0; i < take; i++)\n                state[this.pos++] ^= data[pos++];\n            if (this.pos === blockLen)\n                this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished)\n            return;\n        this.finished = true;\n        const { state, suffix, pos, blockLen } = this;\n        // Do the padding\n        state[pos] ^= suffix;\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)\n            this.keccak();\n        state[blockLen - 1] ^= 0x80;\n        this.keccak();\n    }\n    writeInto(out) {\n        _assert_js_1.default.exists(this, false);\n        _assert_js_1.default.bytes(out);\n        this.finish();\n        const bufferOut = this.state;\n        const { blockLen } = this;\n        for (let pos = 0, len = out.length; pos < len;) {\n            if (this.posOut >= blockLen)\n                this.keccak();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n        if (!this.enableXOF)\n            throw new Error('XOF is not possible for this instance');\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        _assert_js_1.default.number(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        _assert_js_1.default.output(out, this);\n        if (this.finished)\n            throw new Error('digest() was already called');\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = true;\n        this.state.fill(0);\n    }\n    _cloneInto(to) {\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n        to.state32.set(this.state32);\n        to.pos = this.pos;\n        to.posOut = this.posOut;\n        to.finished = this.finished;\n        to.rounds = rounds;\n        // Suffix can change in cSHAKE\n        to.suffix = suffix;\n        to.outputLen = outputLen;\n        to.enableXOF = enableXOF;\n        to.destroyed = this.destroyed;\n        return to;\n    }\n}\nexports.Keccak = Keccak;\nconst gen = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapConstructor)(() => new Keccak(blockLen, suffix, outputLen));\nexports.sha3_224 = gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexports.sha3_256 = gen(0x06, 136, 256 / 8);\nexports.sha3_384 = gen(0x06, 104, 384 / 8);\nexports.sha3_512 = gen(0x06, 72, 512 / 8);\nexports.keccak_224 = gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexports.keccak_256 = gen(0x01, 136, 256 / 8);\nexports.keccak_384 = gen(0x01, 104, 384 / 8);\nexports.keccak_512 = gen(0x01, 72, 512 / 8);\nconst genShake = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapConstructorWithOpts)((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\nexports.shake128 = genShake(0x1f, 168, 128 / 8);\nexports.shake256 = genShake(0x1f, 136, 256 / 8);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hmac = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// HMAC (RFC 2104)\nclass HMAC extends utils_js_1.Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        _assert_js_1.default.hash(hash);\n        const key = (0, utils_js_1.toBytes)(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new TypeError('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        _assert_js_1.default.exists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        _assert_js_1.default.exists(this);\n        _assert_js_1.default.bytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nconst hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nexports.hmac = hmac;\nexports.hmac.create = (hash, key) => new HMAC(hash, key);\n"],"sourceRoot":""}