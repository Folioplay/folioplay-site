{"version":3,"sources":["../../src/config.ts","../../src/openloginAdapter.ts"],"names":["getOpenloginDefaultOptions","chainNamespace","chainId","adapterSettings","network","OPENLOGIN_NETWORK","MAINNET","clientId","uxMode","UX_MODE","POPUP","chainConfig","getChainConfig","loginSettings","OpenloginAdapter","params","WALLET_ADAPTERS","OPENLOGIN","ADAPTER_NAMESPACES","MULTICHAIN","ADAPTER_CATEGORY","IN_APP","ADAPTER_STATUS","NOT_READY","CHAIN_NAMESPACES","EIP155","log","debug","defaultOptions","openloginOptions","sessionTime","currentChainNamespace","defaultChainIdConfig","rpcTarget","OTHER","WalletInitializationError","invalidParams","provider","privKeyProvider","_","Error","options","isRedirectResult","REDIRECT","redirectResult","getHashQueryParams","Object","keys","length","_pid","replaceUrlOnRedirect","openloginInstance","OpenLogin","init","status","READY","emit","ADAPTER_EVENTS","privKey","autoConnect","connect","error","CONNECTING","adapter","connectWithProvider","ERRORED","message","includes","WalletLoginError","popupClosed","connectionError","cleanup","CONNECTED","notConnectedError","notReady","logout","DISCONNECTED","getUserInfo","userInfo","idToken","customChainConfig","SOLANA","SolanaPrivateKeyProvider","config","EthereumPrivateKeyProvider","CommonPrivateKeyProvider","curve","SUPPORTED_KEY_CURVES","ED25519","SECP256K1","login","merge","loginProvider","extraLoginOptions","login_hint","finalPrivKey","getED25519Key","sk","toString","setupProvider","reconnected","BaseAdapter"],"mappings":"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","file":"static/js/19.a0be0db6.chunk.js","sourcesContent":["import OpenLogin, { OPENLOGIN_NETWORK, UX_MODE, getHashQueryParams, SUPPORTED_KEY_CURVES } from '@toruslabs/openlogin';\nimport { getChainConfig, WALLET_ADAPTERS, ADAPTER_NAMESPACES, ADAPTER_CATEGORY, ADAPTER_STATUS, CHAIN_NAMESPACES, log, WalletInitializationError, ADAPTER_EVENTS, WalletLoginError, BaseAdapter } from '@web3auth/base';\nimport _asyncToGenerator from '@babel/runtime/helpers/asyncToGenerator';\nimport _classCallCheck from '@babel/runtime/helpers/classCallCheck';\nimport _createClass from '@babel/runtime/helpers/createClass';\nimport _assertThisInitialized from '@babel/runtime/helpers/assertThisInitialized';\nimport _get from '@babel/runtime/helpers/get';\nimport _inherits from '@babel/runtime/helpers/inherits';\nimport _possibleConstructorReturn from '@babel/runtime/helpers/possibleConstructorReturn';\nimport _getPrototypeOf from '@babel/runtime/helpers/getPrototypeOf';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport _regeneratorRuntime from '@babel/runtime/regenerator';\nimport { CommonPrivateKeyProvider } from '@web3auth/base-provider';\nimport merge from 'lodash.merge';\n\nvar getOpenloginDefaultOptions = function getOpenloginDefaultOptions(chainNamespace, chainId) {\n  return {\n    adapterSettings: {\n      network: OPENLOGIN_NETWORK.MAINNET,\n      clientId: \"\",\n      uxMode: UX_MODE.POPUP\n    },\n    chainConfig: chainNamespace ? getChainConfig(chainNamespace, chainId) : null,\n    loginSettings: {}\n  };\n};\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nvar OpenloginAdapter = /*#__PURE__*/function (_BaseAdapter) {\n  _inherits(OpenloginAdapter, _BaseAdapter);\n\n  var _super = _createSuper(OpenloginAdapter);\n\n  function OpenloginAdapter(params) {\n    var _params$chainConfig, _params$chainConfig2, _params$adapterSettin, _params$chainConfig3;\n\n    var _this;\n\n    _classCallCheck(this, OpenloginAdapter);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"name\", WALLET_ADAPTERS.OPENLOGIN);\n\n    _defineProperty(_assertThisInitialized(_this), \"adapterNamespace\", ADAPTER_NAMESPACES.MULTICHAIN);\n\n    _defineProperty(_assertThisInitialized(_this), \"type\", ADAPTER_CATEGORY.IN_APP);\n\n    _defineProperty(_assertThisInitialized(_this), \"openloginInstance\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"clientId\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"status\", ADAPTER_STATUS.NOT_READY);\n\n    _defineProperty(_assertThisInitialized(_this), \"currentChainNamespace\", CHAIN_NAMESPACES.EIP155);\n\n    _defineProperty(_assertThisInitialized(_this), \"openloginOptions\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"loginSettings\", {});\n\n    _defineProperty(_assertThisInitialized(_this), \"privKeyProvider\", null);\n\n    log.debug(\"const openlogin adapter\", params);\n    var defaultOptions = getOpenloginDefaultOptions((_params$chainConfig = params.chainConfig) === null || _params$chainConfig === void 0 ? void 0 : _params$chainConfig.chainNamespace, (_params$chainConfig2 = params.chainConfig) === null || _params$chainConfig2 === void 0 ? void 0 : _params$chainConfig2.chainId);\n    _this.openloginOptions = _objectSpread(_objectSpread({\n      clientId: \"\",\n      network: OPENLOGIN_NETWORK.MAINNET\n    }, defaultOptions.adapterSettings), params.adapterSettings || {});\n    _this.clientId = (_params$adapterSettin = params.adapterSettings) === null || _params$adapterSettin === void 0 ? void 0 : _params$adapterSettin.clientId;\n    _this.loginSettings = _objectSpread(_objectSpread({}, defaultOptions.loginSettings), params.loginSettings);\n    _this.sessionTime = _this.loginSettings.sessionTime || 86400; // if no chainNamespace is passed then chain config should be set before calling init\n\n    if ((_params$chainConfig3 = params.chainConfig) !== null && _params$chainConfig3 !== void 0 && _params$chainConfig3.chainNamespace) {\n      var _params$chainConfig4;\n\n      _this.currentChainNamespace = (_params$chainConfig4 = params.chainConfig) === null || _params$chainConfig4 === void 0 ? void 0 : _params$chainConfig4.chainNamespace;\n      var defaultChainIdConfig = defaultOptions.chainConfig ? defaultOptions.chainConfig : {};\n      _this.chainConfig = _objectSpread(_objectSpread({}, defaultChainIdConfig), params === null || params === void 0 ? void 0 : params.chainConfig);\n      log.debug(\"const openlogin chainConfig\", _this.chainConfig);\n\n      if (!_this.chainConfig.rpcTarget && params.chainConfig.chainNamespace !== CHAIN_NAMESPACES.OTHER) {\n        throw WalletInitializationError.invalidParams(\"rpcTarget is required in chainConfig\");\n      }\n    }\n\n    return _this;\n  }\n\n  _createClass(OpenloginAdapter, [{\n    key: \"chainConfigProxy\",\n    get: function get() {\n      return this.chainConfig ? _objectSpread({}, this.chainConfig) : null;\n    }\n  }, {\n    key: \"provider\",\n    get: function get() {\n      var _this$privKeyProvider;\n\n      return ((_this$privKeyProvider = this.privKeyProvider) === null || _this$privKeyProvider === void 0 ? void 0 : _this$privKeyProvider.provider) || null;\n    },\n    set: function set(_) {\n      throw new Error(\"Not implemented\");\n    }\n  }, {\n    key: \"init\",\n    value: function () {\n      var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(options) {\n        var _this$openloginOption;\n\n        var isRedirectResult, redirectResult;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _get(_getPrototypeOf(OpenloginAdapter.prototype), \"checkInitializationRequirements\", this).call(this);\n\n                if ((_this$openloginOption = this.openloginOptions) !== null && _this$openloginOption !== void 0 && _this$openloginOption.clientId) {\n                  _context.next = 3;\n                  break;\n                }\n\n                throw WalletInitializationError.invalidParams(\"clientId is required before openlogin's initialization\");\n\n              case 3:\n                if (this.chainConfig) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw WalletInitializationError.invalidParams(\"chainConfig is required before initialization\");\n\n              case 5:\n                isRedirectResult = false;\n\n                if (this.openloginOptions.uxMode === UX_MODE.REDIRECT) {\n                  redirectResult = getHashQueryParams();\n\n                  if (Object.keys(redirectResult).length > 0 && redirectResult._pid) {\n                    isRedirectResult = true;\n                  }\n                }\n\n                this.openloginOptions = _objectSpread(_objectSpread({}, this.openloginOptions), {}, {\n                  replaceUrlOnRedirect: isRedirectResult\n                });\n                this.openloginInstance = new OpenLogin(this.openloginOptions);\n                log.debug(\"initializing openlogin adapter init\");\n                _context.next = 12;\n                return this.openloginInstance.init();\n\n              case 12:\n                this.status = ADAPTER_STATUS.READY;\n                this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.OPENLOGIN);\n                _context.prev = 14;\n                log.debug(\"initializing openlogin adapter\"); // connect only if it is redirect result or if connect (adapter is cached/already connected in same session) is true\n\n                if (!(this.openloginInstance.privKey && (options.autoConnect || isRedirectResult))) {\n                  _context.next = 19;\n                  break;\n                }\n\n                _context.next = 19;\n                return this.connect();\n\n              case 19:\n                _context.next = 25;\n                break;\n\n              case 21:\n                _context.prev = 21;\n                _context.t0 = _context[\"catch\"](14);\n                log.error(\"Failed to connect with cached openlogin provider\", _context.t0);\n                this.emit(\"ERRORED\", _context.t0);\n\n              case 25:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[14, 21]]);\n      }));\n\n      function init(_x) {\n        return _init.apply(this, arguments);\n      }\n\n      return init;\n    }()\n  }, {\n    key: \"connect\",\n    value: function () {\n      var _connect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(params) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _get(_getPrototypeOf(OpenloginAdapter.prototype), \"checkConnectionRequirements\", this).call(this);\n\n                this.status = ADAPTER_STATUS.CONNECTING;\n                this.emit(ADAPTER_EVENTS.CONNECTING, _objectSpread(_objectSpread({}, params), {}, {\n                  adapter: WALLET_ADAPTERS.OPENLOGIN\n                }));\n                _context2.prev = 3;\n                _context2.next = 6;\n                return this.connectWithProvider(params);\n\n              case 6:\n                return _context2.abrupt(\"return\", this.provider);\n\n              case 9:\n                _context2.prev = 9;\n                _context2.t0 = _context2[\"catch\"](3);\n                log.error(\"Failed to connect with openlogin provider\", _context2.t0); // ready again to be connected\n\n                this.status = ADAPTER_STATUS.READY;\n                this.emit(ADAPTER_EVENTS.ERRORED, _context2.t0);\n\n                if (!(_context2.t0 !== null && _context2.t0 !== void 0 && _context2.t0.message.includes(\"user closed popup\"))) {\n                  _context2.next = 16;\n                  break;\n                }\n\n                throw WalletLoginError.popupClosed();\n\n              case 16:\n                throw WalletLoginError.connectionError(\"Failed to login with openlogin\");\n\n              case 17:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[3, 9]]);\n      }));\n\n      function connect(_x2) {\n        return _connect.apply(this, arguments);\n      }\n\n      return connect;\n    }()\n  }, {\n    key: \"disconnect\",\n    value: function () {\n      var _disconnect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var options,\n            _args3 = arguments;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                options = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {\n                  cleanup: false\n                };\n\n                if (!(this.status !== ADAPTER_STATUS.CONNECTED)) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n\n              case 3:\n                if (this.openloginInstance) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n\n              case 5:\n                _context3.next = 7;\n                return this.openloginInstance.logout();\n\n              case 7:\n                if (options.cleanup) {\n                  this.status = ADAPTER_STATUS.NOT_READY;\n                  this.openloginInstance = null;\n                  this.privKeyProvider = null;\n                } else {\n                  // ready to be connected again\n                  this.status = ADAPTER_STATUS.READY;\n                }\n\n                this.emit(ADAPTER_EVENTS.DISCONNECTED);\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function disconnect() {\n        return _disconnect.apply(this, arguments);\n      }\n\n      return disconnect;\n    }()\n  }, {\n    key: \"authenticateUser\",\n    value: function () {\n      var _authenticateUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var userInfo;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!(this.status !== ADAPTER_STATUS.CONNECTED)) {\n                  _context4.next = 2;\n                  break;\n                }\n\n                throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n\n              case 2:\n                _context4.next = 4;\n                return this.getUserInfo();\n\n              case 4:\n                userInfo = _context4.sent;\n                return _context4.abrupt(\"return\", {\n                  idToken: userInfo.idToken\n                });\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function authenticateUser() {\n        return _authenticateUser.apply(this, arguments);\n      }\n\n      return authenticateUser;\n    }()\n  }, {\n    key: \"getUserInfo\",\n    value: function () {\n      var _getUserInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var userInfo;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (!(this.status !== ADAPTER_STATUS.CONNECTED)) {\n                  _context5.next = 2;\n                  break;\n                }\n\n                throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n\n              case 2:\n                if (this.openloginInstance) {\n                  _context5.next = 4;\n                  break;\n                }\n\n                throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n\n              case 4:\n                _context5.next = 6;\n                return this.openloginInstance.getUserInfo();\n\n              case 6:\n                userInfo = _context5.sent;\n                return _context5.abrupt(\"return\", userInfo);\n\n              case 8:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getUserInfo() {\n        return _getUserInfo.apply(this, arguments);\n      }\n\n      return getUserInfo;\n    }() // should be called only before initialization.\n\n  }, {\n    key: \"setAdapterSettings\",\n    value: function setAdapterSettings(adapterSettings) {\n      if (this.status === ADAPTER_STATUS.READY) return;\n      var defaultOptions = getOpenloginDefaultOptions();\n      this.openloginOptions = _objectSpread(_objectSpread(_objectSpread({}, defaultOptions.adapterSettings), this.openloginOptions || {}), adapterSettings);\n\n      if (adapterSettings.sessionTime) {\n        this.loginSettings = _objectSpread(_objectSpread({}, this.loginSettings), {}, {\n          sessionTime: adapterSettings.sessionTime\n        });\n      }\n\n      if (adapterSettings.clientId) {\n        this.clientId = adapterSettings.clientId;\n      }\n    } // should be called only before initialization.\n\n  }, {\n    key: \"setChainConfig\",\n    value: function setChainConfig(customChainConfig) {\n      _get(_getPrototypeOf(OpenloginAdapter.prototype), \"setChainConfig\", this).call(this, customChainConfig);\n\n      this.currentChainNamespace = customChainConfig.chainNamespace;\n    }\n  }, {\n    key: \"connectWithProvider\",\n    value: function () {\n      var _connectWithProvider = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(params) {\n        var _yield$import, SolanaPrivateKeyProvider, _yield$import2, EthereumPrivateKeyProvider, _params$extraLoginOpt, finalPrivKey, _yield$import3, getED25519Key;\n\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (this.chainConfig) {\n                  _context6.next = 2;\n                  break;\n                }\n\n                throw WalletInitializationError.invalidParams(\"chainConfig is required before initialization\");\n\n              case 2:\n                if (this.openloginInstance) {\n                  _context6.next = 4;\n                  break;\n                }\n\n                throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n\n              case 4:\n                if (!(this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA)) {\n                  _context6.next = 12;\n                  break;\n                }\n\n                _context6.next = 7;\n                return import('@web3auth/solana-provider');\n\n              case 7:\n                _yield$import = _context6.sent;\n                SolanaPrivateKeyProvider = _yield$import.SolanaPrivateKeyProvider;\n                this.privKeyProvider = new SolanaPrivateKeyProvider({\n                  config: {\n                    chainConfig: this.chainConfig\n                  }\n                });\n                _context6.next = 25;\n                break;\n\n              case 12:\n                if (!(this.currentChainNamespace === CHAIN_NAMESPACES.EIP155)) {\n                  _context6.next = 20;\n                  break;\n                }\n\n                _context6.next = 15;\n                return import('@web3auth/ethereum-provider');\n\n              case 15:\n                _yield$import2 = _context6.sent;\n                EthereumPrivateKeyProvider = _yield$import2.EthereumPrivateKeyProvider;\n                this.privKeyProvider = new EthereumPrivateKeyProvider({\n                  config: {\n                    chainConfig: this.chainConfig\n                  }\n                });\n                _context6.next = 25;\n                break;\n\n              case 20:\n                if (!(this.currentChainNamespace === CHAIN_NAMESPACES.OTHER)) {\n                  _context6.next = 24;\n                  break;\n                }\n\n                this.privKeyProvider = new CommonPrivateKeyProvider();\n                _context6.next = 25;\n                break;\n\n              case 24:\n                throw new Error(\"Invalid chainNamespace: \".concat(this.currentChainNamespace, \" found while connecting to wallet\"));\n\n              case 25:\n                if (!(!this.openloginInstance.privKey && params)) {\n                  _context6.next = 29;\n                  break;\n                }\n\n                if (!this.loginSettings.curve) {\n                  this.loginSettings.curve = this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA ? SUPPORTED_KEY_CURVES.ED25519 : SUPPORTED_KEY_CURVES.SECP256K1;\n                }\n\n                _context6.next = 29;\n                return this.openloginInstance.login(merge(this.loginSettings, {\n                  loginProvider: params.loginProvider\n                }, {\n                  extraLoginOptions: _objectSpread(_objectSpread({}, params.extraLoginOptions || {}), {}, {\n                    login_hint: params.login_hint || ((_params$extraLoginOpt = params.extraLoginOptions) === null || _params$extraLoginOpt === void 0 ? void 0 : _params$extraLoginOpt.login_hint)\n                  })\n                }));\n\n              case 29:\n                finalPrivKey = this.openloginInstance.privKey;\n\n                if (!finalPrivKey) {\n                  _context6.next = 41;\n                  break;\n                }\n\n                if (!(this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA)) {\n                  _context6.next = 37;\n                  break;\n                }\n\n                _context6.next = 34;\n                return import('@toruslabs/openlogin-ed25519');\n\n              case 34:\n                _yield$import3 = _context6.sent;\n                getED25519Key = _yield$import3.getED25519Key;\n                finalPrivKey = getED25519Key(finalPrivKey).sk.toString(\"hex\");\n\n              case 37:\n                _context6.next = 39;\n                return this.privKeyProvider.setupProvider(finalPrivKey);\n\n              case 39:\n                this.status = ADAPTER_STATUS.CONNECTED;\n                this.emit(ADAPTER_EVENTS.CONNECTED, {\n                  adapter: WALLET_ADAPTERS.OPENLOGIN,\n                  reconnected: !params\n                });\n\n              case 41:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function connectWithProvider(_x3) {\n        return _connectWithProvider.apply(this, arguments);\n      }\n\n      return connectWithProvider;\n    }()\n  }]);\n\n  return OpenloginAdapter;\n}(BaseAdapter);\n\nexport { OpenloginAdapter, getOpenloginDefaultOptions };\n//# sourceMappingURL=openloginAdapter.esm.js.map\n",null],"sourceRoot":""}